<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="438" onload="init(evt)" viewBox="0 0 1200 438" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    searching = 0;
}

window.addEventListener("click", function(e) {
	var target = find_group(e.target);
	if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);
    }
    else if (e.target.id == "unzoom") unzoom();
    else if (e.target.id == "search") search_prompt();
}, false)

// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
	var target = find_group(e.target);
	if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
	var target = find_group(e.target);
	if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function find_child(node, selector) {
	var children = node.querySelectorAll(selector);
	if (children.length) return children[0];
	return;
}
function find_group(node) {
	var parent = node.parentElement;
	if (!parent) return;
	if (parent.id == "frames") return node;
	return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) -3;
    var txt = find_child(e, "title").textContent.replace(/\\([^(]*\\)\$/,"");
    t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
        return;
    for (var x = txt.length - 2; x > 0; x--) {
        if (t.getSubStringLength(0, x + 2) <= w) {
            t.textContent = txt.substring(0, x) + "..";
            return;
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - xpad) * ratio + xpad;
            if(e.tagName == "text")
                e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x - xpad, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = xpad;
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = parseInt(svg.width.baseVal.value) - (xpad*2);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = parseFloat(xmin + width);
    var ymin = parseFloat(attr.y.value);
    var ratio = (svg.width.baseVal.value - 2 * xpad) / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.0001;
    unzoombtn.classList.remove("hide");
    var el = document.getElementById("frames").children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = document.getElementById("frames").children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = document.getElementById("frames").children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;	// JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
]]></script><rect x="0" y="0" width="1200" height="438" fill="url(#background)"/><text id="title" x="600.00" y="24.00">py-spy</text><text id="details" x="10.00" y="421.00"> </text><text id="unzoom" class="hide" x="10.00" y="24.00">Reset Zoom</text><text id="search" x="1090.00" y="24.00">Search</text><text id="matched" x="1090.00" y="421.00"> </text><g id="frames"><g><title>_factorize_array (pandas/core/algorithms.py:456) (324 samples, 0.83%)</title><rect x="23" y="228" width="10" height="15" fill="rgb(213,73,13)"/><text x="26.00" y="238.50"></text></g><g><title>_get_data_algo (pandas/core/algorithms.py:228) (323 samples, 0.83%)</title><rect x="23" y="244" width="10" height="15" fill="rgb(216,199,15)"/><text x="26.00" y="254.50"></text></g><g><title>_factorize_array (pandas/core/algorithms.py:458) (53 samples, 0.14%)</title><rect x="33" y="228" width="1" height="15" fill="rgb(228,19,26)"/><text x="36.00" y="238.50"></text></g><g><title>factorize (pandas/core/algorithms.py:613) (1,411 samples, 3.63%)</title><rect x="20" y="212" width="43" height="15" fill="rgb(236,69,38)"/><text x="23.00" y="222.50">fact..</text></g><g><title>_factorize_array (pandas/core/algorithms.py:460) (947 samples, 2.43%)</title><rect x="34" y="228" width="29" height="15" fill="rgb(218,112,19)"/><text x="37.00" y="238.50">_f..</text></g><g><title>duplicated (pandas/core/frame.py:4687) (1,436 samples, 3.69%)</title><rect x="20" y="164" width="44" height="15" fill="rgb(205,173,54)"/><text x="23.00" y="174.50">dupl..</text></g><g><title>f (pandas/core/frame.py:4668) (1,432 samples, 3.68%)</title><rect x="20" y="180" width="44" height="15" fill="rgb(251,214,3)"/><text x="23.00" y="190.50">f (p..</text></g><g><title>wrapper (pandas/util/_decorators.py:188) (1,432 samples, 3.68%)</title><rect x="20" y="196" width="44" height="15" fill="rgb(222,209,1)"/><text x="23.00" y="206.50">wrap..</text></g><g><title>get_group_index (pandas/core/sorting.py:62) (42 samples, 0.11%)</title><rect x="64" y="180" width="1" height="15" fill="rgb(207,34,9)"/><text x="67.00" y="190.50"></text></g><g><title>maybe_lift (pandas/core/sorting.py:58) (41 samples, 0.11%)</title><rect x="64" y="196" width="1" height="15" fill="rgb(246,163,20)"/><text x="67.00" y="206.50"></text></g><g><title>get_group_index (pandas/core/sorting.py:82) (97 samples, 0.25%)</title><rect x="66" y="180" width="3" height="15" fill="rgb(215,10,13)"/><text x="69.00" y="190.50"></text></g><g><title>duplicated (pandas/core/frame.py:4689) (194 samples, 0.50%)</title><rect x="64" y="164" width="6" height="15" fill="rgb(247,102,44)"/><text x="67.00" y="174.50"></text></g><g><title>drop_duplicates (pandas/core/frame.py:4630) (1,911 samples, 4.91%)</title><rect x="18" y="148" width="58" height="15" fill="rgb(220,99,27)"/><text x="21.00" y="158.50">drop_d..</text></g><g><title>duplicated (pandas/core/frame.py:4690) (224 samples, 0.58%)</title><rect x="70" y="164" width="6" height="15" fill="rgb(221,3,17)"/><text x="73.00" y="174.50"></text></g><g><title>take_nd (pandas/core/algorithms.py:1651) (120 samples, 0.31%)</title><rect x="78" y="276" width="4" height="15" fill="rgb(225,147,27)"/><text x="81.00" y="286.50"></text></g><g><title>take_nd (pandas/core/internals/blocks.py:1238) (296 samples, 0.76%)</title><rect x="78" y="260" width="9" height="15" fill="rgb(210,199,9)"/><text x="81.00" y="270.50"></text></g><g><title>take_nd (pandas/core/algorithms.py:1655) (172 samples, 0.44%)</title><rect x="82" y="276" width="5" height="15" fill="rgb(234,124,50)"/><text x="85.00" y="286.50"></text></g><g><title>reindex_indexer (pandas/core/internals/managers.py:1235) (297 samples, 0.76%)</title><rect x="78" y="228" width="9" height="15" fill="rgb(245,58,43)"/><text x="81.00" y="238.50"></text></g><g><title>&lt;listcomp&gt; (pandas/core/internals/managers.py:1235) (297 samples, 0.76%)</title><rect x="78" y="244" width="9" height="15" fill="rgb(245,55,47)"/><text x="81.00" y="254.50"></text></g><g><title>_take (pandas/core/generic.py:3359) (342 samples, 0.88%)</title><rect x="77" y="196" width="10" height="15" fill="rgb(252,134,26)"/><text x="80.00" y="206.50"></text></g><g><title>take (pandas/core/internals/managers.py:1350) (300 samples, 0.77%)</title><rect x="78" y="212" width="9" height="15" fill="rgb(233,201,31)"/><text x="81.00" y="222.50"></text></g><g><title>__getitem__ (pandas/core/frame.py:2918) (368 samples, 0.95%)</title><rect x="76" y="164" width="12" height="15" fill="rgb(208,49,34)"/><text x="79.00" y="174.50"></text></g><g><title>_getitem_bool_array (pandas/core/frame.py:2969) (346 samples, 0.89%)</title><rect x="77" y="180" width="11" height="15" fill="rgb(237,74,41)"/><text x="80.00" y="190.50"></text></g><g><title>approximate_dependencies (dfd.py:354) (2,291 samples, 5.89%)</title><rect x="18" y="132" width="70" height="15" fill="rgb(233,14,35)"/><text x="21.00" y="142.50">approxi..</text></g><g><title>drop_duplicates (pandas/core/frame.py:4637) (379 samples, 0.97%)</title><rect x="76" y="148" width="12" height="15" fill="rgb(253,90,20)"/><text x="79.00" y="158.50"></text></g><g><title>_factorize_array (pandas/core/algorithms.py:456) (130 samples, 0.33%)</title><rect x="90" y="228" width="4" height="15" fill="rgb(231,137,42)"/><text x="93.00" y="238.50"></text></g><g><title>_get_data_algo (pandas/core/algorithms.py:228) (130 samples, 0.33%)</title><rect x="90" y="244" width="4" height="15" fill="rgb(221,71,5)"/><text x="93.00" y="254.50"></text></g><g><title>factorize (pandas/core/algorithms.py:613) (577 samples, 1.48%)</title><rect x="89" y="212" width="18" height="15" fill="rgb(223,34,50)"/><text x="92.00" y="222.50"></text></g><g><title>_factorize_array (pandas/core/algorithms.py:460) (393 samples, 1.01%)</title><rect x="95" y="228" width="12" height="15" fill="rgb(235,213,29)"/><text x="98.00" y="238.50"></text></g><g><title>duplicated (pandas/core/frame.py:4687) (609 samples, 1.56%)</title><rect x="89" y="164" width="18" height="15" fill="rgb(214,179,20)"/><text x="92.00" y="174.50"></text></g><g><title>f (pandas/core/frame.py:4668) (599 samples, 1.54%)</title><rect x="89" y="180" width="18" height="15" fill="rgb(249,1,8)"/><text x="92.00" y="190.50"></text></g><g><title>wrapper (pandas/util/_decorators.py:188) (599 samples, 1.54%)</title><rect x="89" y="196" width="18" height="15" fill="rgb(236,38,6)"/><text x="92.00" y="206.50"></text></g><g><title>duplicated (pandas/core/frame.py:4689) (58 samples, 0.15%)</title><rect x="107" y="164" width="2" height="15" fill="rgb(217,228,54)"/><text x="110.00" y="174.50"></text></g><g><title>get_group_index (pandas/core/sorting.py:82) (36 samples, 0.09%)</title><rect x="108" y="180" width="1" height="15" fill="rgb(214,63,39)"/><text x="111.00" y="190.50"></text></g><g><title>drop_duplicates (pandas/core/frame.py:4630) (872 samples, 2.24%)</title><rect x="88" y="148" width="26" height="15" fill="rgb(234,38,38)"/><text x="91.00" y="158.50">d..</text></g><g><title>duplicated (pandas/core/frame.py:4690) (177 samples, 0.45%)</title><rect x="109" y="164" width="5" height="15" fill="rgb(243,86,48)"/><text x="112.00" y="174.50"></text></g><g><title>take_nd (pandas/core/algorithms.py:1651) (73 samples, 0.19%)</title><rect x="115" y="276" width="2" height="15" fill="rgb(243,229,32)"/><text x="118.00" y="286.50"></text></g><g><title>reindex_indexer (pandas/core/internals/managers.py:1235) (197 samples, 0.51%)</title><rect x="115" y="228" width="6" height="15" fill="rgb(226,10,33)"/><text x="118.00" y="238.50"></text></g><g><title>&lt;listcomp&gt; (pandas/core/internals/managers.py:1235) (197 samples, 0.51%)</title><rect x="115" y="244" width="6" height="15" fill="rgb(211,177,45)"/><text x="118.00" y="254.50"></text></g><g><title>take_nd (pandas/core/internals/blocks.py:1238) (197 samples, 0.51%)</title><rect x="115" y="260" width="6" height="15" fill="rgb(227,122,51)"/><text x="118.00" y="270.50"></text></g><g><title>take_nd (pandas/core/algorithms.py:1655) (114 samples, 0.29%)</title><rect x="118" y="276" width="3" height="15" fill="rgb(222,36,1)"/><text x="121.00" y="286.50"></text></g><g><title>_take (pandas/core/generic.py:3359) (217 samples, 0.56%)</title><rect x="114" y="196" width="7" height="15" fill="rgb(230,177,11)"/><text x="117.00" y="206.50"></text></g><g><title>take (pandas/core/internals/managers.py:1350) (199 samples, 0.51%)</title><rect x="115" y="212" width="6" height="15" fill="rgb(231,11,22)"/><text x="118.00" y="222.50"></text></g><g><title>__getitem__ (pandas/core/frame.py:2918) (231 samples, 0.59%)</title><rect x="114" y="164" width="7" height="15" fill="rgb(217,5,21)"/><text x="117.00" y="174.50"></text></g><g><title>_getitem_bool_array (pandas/core/frame.py:2969) (226 samples, 0.58%)</title><rect x="114" y="180" width="7" height="15" fill="rgb(216,26,8)"/><text x="117.00" y="190.50"></text></g><g><title>approximate_dependencies (dfd.py:355) (1,107 samples, 2.84%)</title><rect x="88" y="132" width="33" height="15" fill="rgb(207,65,10)"/><text x="91.00" y="142.50">ap..</text></g><g><title>drop_duplicates (pandas/core/frame.py:4637) (234 samples, 0.60%)</title><rect x="114" y="148" width="7" height="15" fill="rgb(228,129,54)"/><text x="117.00" y="158.50"></text></g><g><title>apply (pandas/core/internals/managers.py:395) (50 samples, 0.13%)</title><rect x="122" y="260" width="2" height="15" fill="rgb(218,38,53)"/><text x="125.00" y="270.50"></text></g><g><title>copy (pandas/core/internals/blocks.py:753) (50 samples, 0.13%)</title><rect x="122" y="276" width="2" height="15" fill="rgb(218,88,51)"/><text x="125.00" y="286.50"></text></g><g><title>_drop_labels_or_levels (pandas/core/generic.py:1784) (52 samples, 0.13%)</title><rect x="122" y="212" width="2" height="15" fill="rgb(237,106,23)"/><text x="125.00" y="222.50"></text></g><g><title>copy (pandas/core/generic.py:5804) (52 samples, 0.13%)</title><rect x="122" y="228" width="2" height="15" fill="rgb(227,97,53)"/><text x="125.00" y="238.50"></text></g><g><title>copy (pandas/core/internals/managers.py:734) (52 samples, 0.13%)</title><rect x="122" y="244" width="2" height="15" fill="rgb(210,168,48)"/><text x="125.00" y="254.50"></text></g><g><title>merge (pandas/core/reshape/merge.py:47) (95 samples, 0.24%)</title><rect x="122" y="164" width="3" height="15" fill="rgb(231,166,11)"/><text x="125.00" y="174.50"></text></g><g><title>__init__ (pandas/core/reshape/merge.py:529) (92 samples, 0.24%)</title><rect x="122" y="180" width="3" height="15" fill="rgb(215,175,25)"/><text x="125.00" y="190.50"></text></g><g><title>_get_merge_keys (pandas/core/reshape/merge.py:885) (80 samples, 0.21%)</title><rect x="122" y="196" width="3" height="15" fill="rgb(233,95,20)"/><text x="125.00" y="206.50"></text></g><g><title>apply (pandas/core/internals/managers.py:395) (39 samples, 0.10%)</title><rect x="126" y="244" width="1" height="15" fill="rgb(205,133,30)"/><text x="129.00" y="254.50"></text></g><g><title>copy (pandas/core/internals/blocks.py:753) (39 samples, 0.10%)</title><rect x="126" y="260" width="1" height="15" fill="rgb(222,198,3)"/><text x="129.00" y="270.50"></text></g><g><title>_indicator_pre_merge (pandas/core/reshape/merge.py:587) (41 samples, 0.11%)</title><rect x="126" y="196" width="1" height="15" fill="rgb(212,213,12)"/><text x="129.00" y="206.50"></text></g><g><title>copy (pandas/core/generic.py:5804) (41 samples, 0.11%)</title><rect x="126" y="212" width="1" height="15" fill="rgb(235,73,40)"/><text x="129.00" y="222.50"></text></g><g><title>copy (pandas/core/internals/managers.py:734) (40 samples, 0.10%)</title><rect x="126" y="228" width="1" height="15" fill="rgb(225,185,37)"/><text x="129.00" y="238.50"></text></g><g><title>get_result (pandas/core/reshape/merge.py:544) (63 samples, 0.16%)</title><rect x="126" y="180" width="2" height="15" fill="rgb(221,43,15)"/><text x="129.00" y="190.50"></text></g><g><title>_factorize_keys (pandas/core/reshape/merge.py:1661) (365 samples, 0.94%)</title><rect x="129" y="244" width="11" height="15" fill="rgb(221,125,47)"/><text x="132.00" y="254.50"></text></g><g><title>_factorize_keys (pandas/core/reshape/merge.py:1662) (311 samples, 0.80%)</title><rect x="140" y="244" width="10" height="15" fill="rgb(250,177,20)"/><text x="143.00" y="254.50"></text></g><g><title>_get_join_indexers (pandas/core/reshape/merge.py:1130) (706 samples, 1.81%)</title><rect x="129" y="228" width="21" height="15" fill="rgb(241,126,23)"/><text x="132.00" y="238.50"></text></g><g><title>_factorize_keys (pandas/core/reshape/merge.py:1661) (110 samples, 0.28%)</title><rect x="152" y="260" width="3" height="15" fill="rgb(233,34,37)"/><text x="155.00" y="270.50"></text></g><g><title>_get_join_keys (pandas/core/reshape/merge.py:1722) (199 samples, 0.51%)</title><rect x="152" y="244" width="6" height="15" fill="rgb(216,124,6)"/><text x="155.00" y="254.50"></text></g><g><title>_factorize_keys (pandas/core/reshape/merge.py:1662) (79 samples, 0.20%)</title><rect x="155" y="260" width="3" height="15" fill="rgb(226,86,44)"/><text x="158.00" y="270.50"></text></g><g><title>_get_join_indexers (pandas/core/reshape/merge.py:1133) (273 samples, 0.70%)</title><rect x="150" y="228" width="8" height="15" fill="rgb(243,212,17)"/><text x="153.00" y="238.50"></text></g><g><title>_factorize_keys (pandas/core/reshape/merge.py:1661) (90 samples, 0.23%)</title><rect x="158" y="244" width="3" height="15" fill="rgb(206,159,37)"/><text x="161.00" y="254.50"></text></g><g><title>_factorize_keys (pandas/core/reshape/merge.py:1662) (64 samples, 0.16%)</title><rect x="161" y="244" width="2" height="15" fill="rgb(210,2,46)"/><text x="164.00" y="254.50"></text></g><g><title>_get_join_indexers (pandas/core/reshape/merge.py:1138) (165 samples, 0.42%)</title><rect x="158" y="228" width="5" height="15" fill="rgb(226,3,0)"/><text x="161.00" y="238.50"></text></g><g><title>get_result (pandas/core/reshape/merge.py:546) (1,228 samples, 3.16%)</title><rect x="128" y="180" width="37" height="15" fill="rgb(206,37,4)"/><text x="131.00" y="190.50">get..</text></g><g><title>_get_join_info (pandas/core/reshape/merge.py:756) (1,228 samples, 3.16%)</title><rect x="128" y="196" width="37" height="15" fill="rgb(227,12,53)"/><text x="131.00" y="206.50">_ge..</text></g><g><title>_get_join_indexers (pandas/core/reshape/merge.py:735) (1,228 samples, 3.16%)</title><rect x="128" y="212" width="37" height="15" fill="rgb(210,153,18)"/><text x="131.00" y="222.50">_ge..</text></g><g><title>_get_join_indexers (pandas/core/reshape/merge.py:1146) (55 samples, 0.14%)</title><rect x="163" y="228" width="2" height="15" fill="rgb(228,36,46)"/><text x="166.00" y="238.50"></text></g><g><title>concatenate_join_units (pandas/core/internals/concat.py:242) (78 samples, 0.20%)</title><rect x="165" y="212" width="3" height="15" fill="rgb(218,110,43)"/><text x="168.00" y="222.50"></text></g><g><title>&lt;listcomp&gt; (pandas/core/internals/concat.py:242) (78 samples, 0.20%)</title><rect x="165" y="228" width="3" height="15" fill="rgb(206,58,14)"/><text x="168.00" y="238.50"></text></g><g><title>get_reindexed_values (pandas/core/internals/concat.py:225) (78 samples, 0.20%)</title><rect x="165" y="244" width="3" height="15" fill="rgb(212,143,4)"/><text x="168.00" y="254.50"></text></g><g><title>take_nd (pandas/core/algorithms.py:1655) (48 samples, 0.12%)</title><rect x="166" y="260" width="2" height="15" fill="rgb(247,18,13)"/><text x="169.00" y="270.50"></text></g><g><title>concatenate_block_managers (pandas/core/internals/managers.py:2061) (85 samples, 0.22%)</title><rect x="165" y="196" width="3" height="15" fill="rgb(242,104,16)"/><text x="168.00" y="206.50"></text></g><g><title>get_result (pandas/core/reshape/merge.py:560) (96 samples, 0.25%)</title><rect x="165" y="180" width="3" height="15" fill="rgb(244,195,18)"/><text x="168.00" y="190.50"></text></g><g><title>__init__ (pandas/core/arrays/categorical.py:383) (103 samples, 0.26%)</title><rect x="169" y="212" width="3" height="15" fill="rgb(216,91,1)"/><text x="172.00" y="222.50"></text></g><g><title>_get_codes_for_values (pandas/core/arrays/categorical.py:2593) (51 samples, 0.13%)</title><rect x="170" y="228" width="2" height="15" fill="rgb(218,87,13)"/><text x="173.00" y="238.50"></text></g><g><title>_indicator_post_merge (pandas/core/reshape/merge.py:605) (107 samples, 0.27%)</title><rect x="169" y="196" width="3" height="15" fill="rgb(238,184,42)"/><text x="172.00" y="206.50"></text></g><g><title>reindex (pandas/core/generic.py:4337) (33 samples, 0.08%)</title><rect x="172" y="292" width="1" height="15" fill="rgb(231,111,5)"/><text x="175.00" y="302.50"></text></g><g><title>_consolidate_inplace (pandas/core/generic.py:5138) (33 samples, 0.08%)</title><rect x="172" y="308" width="1" height="15" fill="rgb(237,124,10)"/><text x="175.00" y="318.50"></text></g><g><title>reindex_indexer (pandas/core/internals/managers.py:1231) (62 samples, 0.16%)</title><rect x="173" y="356" width="2" height="15" fill="rgb(252,140,35)"/><text x="176.00" y="366.50"></text></g><g><title>_slice_take_blocks_ax0 (pandas/core/internals/managers.py:1312) (56 samples, 0.14%)</title><rect x="173" y="372" width="2" height="15" fill="rgb(254,82,14)"/><text x="176.00" y="382.50"></text></g><g><title>take_nd (pandas/core/internals/blocks.py:1234) (56 samples, 0.14%)</title><rect x="173" y="388" width="2" height="15" fill="rgb(233,202,35)"/><text x="176.00" y="398.50"></text></g><g><title>get_result (pandas/core/reshape/merge.py:566) (240 samples, 0.62%)</title><rect x="168" y="180" width="7" height="15" fill="rgb(243,106,46)"/><text x="171.00" y="190.50"></text></g><g><title>_indicator_post_merge (pandas/core/reshape/merge.py:611) (101 samples, 0.26%)</title><rect x="172" y="196" width="3" height="15" fill="rgb(221,175,17)"/><text x="175.00" y="206.50"></text></g><g><title>drop (pandas/core/frame.py:3940) (101 samples, 0.26%)</title><rect x="172" y="212" width="3" height="15" fill="rgb(250,98,33)"/><text x="175.00" y="222.50"></text></g><g><title>drop (pandas/core/generic.py:3780) (101 samples, 0.26%)</title><rect x="172" y="228" width="3" height="15" fill="rgb(210,188,23)"/><text x="175.00" y="238.50"></text></g><g><title>_drop_axis (pandas/core/generic.py:3813) (99 samples, 0.25%)</title><rect x="172" y="244" width="3" height="15" fill="rgb(211,228,33)"/><text x="175.00" y="254.50"></text></g><g><title>wrapper (pandas/util/_decorators.py:197) (99 samples, 0.25%)</title><rect x="172" y="260" width="3" height="15" fill="rgb(247,188,45)"/><text x="175.00" y="270.50"></text></g><g><title>reindex (pandas/core/frame.py:3809) (99 samples, 0.25%)</title><rect x="172" y="276" width="3" height="15" fill="rgb(207,147,32)"/><text x="175.00" y="286.50"></text></g><g><title>reindex (pandas/core/generic.py:4356) (66 samples, 0.17%)</title><rect x="173" y="292" width="2" height="15" fill="rgb(254,30,27)"/><text x="176.00" y="302.50"></text></g><g><title>_reindex_axes (pandas/core/frame.py:3736) (66 samples, 0.17%)</title><rect x="173" y="308" width="2" height="15" fill="rgb(231,120,12)"/><text x="176.00" y="318.50"></text></g><g><title>_reindex_columns (pandas/core/frame.py:3761) (65 samples, 0.17%)</title><rect x="173" y="324" width="2" height="15" fill="rgb(236,225,21)"/><text x="176.00" y="334.50"></text></g><g><title>_reindex_with_indexers (pandas/core/generic.py:4490) (64 samples, 0.16%)</title><rect x="173" y="340" width="2" height="15" fill="rgb(205,228,38)"/><text x="176.00" y="350.50"></text></g><g><title>_maybe_add_join_keys (pandas/core/reshape/merge.py:705) (47 samples, 0.12%)</title><rect x="176" y="196" width="2" height="15" fill="rgb(244,195,3)"/><text x="179.00" y="206.50"></text></g><g><title>__new__ (pandas/core/indexes/base.py:422) (82 samples, 0.21%)</title><rect x="178" y="212" width="2" height="15" fill="rgb(211,100,39)"/><text x="181.00" y="222.50"></text></g><g><title>_maybe_add_join_keys (pandas/core/reshape/merge.py:713) (109 samples, 0.28%)</title><rect x="178" y="196" width="3" height="15" fill="rgb(205,63,22)"/><text x="181.00" y="206.50"></text></g><g><title>get_result (pandas/core/reshape/merge.py:568) (256 samples, 0.66%)</title><rect x="175" y="180" width="8" height="15" fill="rgb(247,170,33)"/><text x="178.00" y="190.50"></text></g><g><title>_maybe_add_join_keys (pandas/core/reshape/merge.py:716) (60 samples, 0.15%)</title><rect x="181" y="196" width="2" height="15" fill="rgb(220,1,38)"/><text x="184.00" y="206.50"></text></g><g><title>__setitem__ (pandas/core/frame.py:3370) (60 samples, 0.15%)</title><rect x="181" y="212" width="2" height="15" fill="rgb(225,215,22)"/><text x="184.00" y="222.50"></text></g><g><title>_set_item (pandas/core/frame.py:3446) (39 samples, 0.10%)</title><rect x="182" y="228" width="1" height="15" fill="rgb(249,41,40)"/><text x="185.00" y="238.50"></text></g><g><title>_set_item (pandas/core/generic.py:3172) (38 samples, 0.10%)</title><rect x="182" y="244" width="1" height="15" fill="rgb(254,75,22)"/><text x="185.00" y="254.50"></text></g><g><title>approximate_dependencies (dfd.py:363) (2,032 samples, 5.22%)</title><rect x="121" y="132" width="62" height="15" fill="rgb(213,139,35)"/><text x="124.00" y="142.50">approx..</text></g><g><title>merge (pandas/core/frame.py:6868) (2,032 samples, 5.22%)</title><rect x="121" y="148" width="62" height="15" fill="rgb(242,171,2)"/><text x="124.00" y="158.50">merge ..</text></g><g><title>merge (pandas/core/reshape/merge.py:48) (1,919 samples, 4.93%)</title><rect x="125" y="164" width="58" height="15" fill="rgb(218,115,8)"/><text x="128.00" y="174.50">merge ..</text></g><g><title>__init__ (pandas/core/series.py:240) (60 samples, 0.15%)</title><rect x="187" y="164" width="2" height="15" fill="rgb(226,78,14)"/><text x="190.00" y="174.50"></text></g><g><title>sanitize_array (pandas/core/internals/construction.py:555) (38 samples, 0.10%)</title><rect x="190" y="180" width="2" height="15" fill="rgb(253,76,0)"/><text x="193.00" y="190.50"></text></g><g><title>_name_get (numpy/core/_dtype.py:334) (53 samples, 0.14%)</title><rect x="195" y="228" width="2" height="15" fill="rgb(251,154,53)"/><text x="198.00" y="238.50"></text></g><g><title>_try_cast (pandas/core/internals/construction.py:688) (157 samples, 0.40%)</title><rect x="192" y="196" width="5" height="15" fill="rgb(247,159,34)"/><text x="195.00" y="206.50"></text></g><g><title>maybe_castable (pandas/core/dtypes/cast.py:843) (131 samples, 0.34%)</title><rect x="193" y="212" width="4" height="15" fill="rgb(251,55,22)"/><text x="196.00" y="222.50"></text></g><g><title>_try_cast (pandas/core/internals/construction.py:694) (40 samples, 0.10%)</title><rect x="197" y="196" width="1" height="15" fill="rgb(226,56,33)"/><text x="200.00" y="206.50"></text></g><g><title>maybe_infer_to_datetimelike (pandas/core/dtypes/cast.py:866) (35 samples, 0.09%)</title><rect x="200" y="228" width="1" height="15" fill="rgb(224,184,49)"/><text x="203.00" y="238.50"></text></g><g><title>maybe_infer_to_datetimelike (pandas/core/dtypes/cast.py:874) (34 samples, 0.09%)</title><rect x="201" y="228" width="1" height="15" fill="rgb(243,201,37)"/><text x="204.00" y="238.50"></text></g><g><title>maybe_infer_to_datetimelike (pandas/core/dtypes/cast.py:879) (38 samples, 0.10%)</title><rect x="202" y="228" width="1" height="15" fill="rgb(252,151,44)"/><text x="205.00" y="238.50"></text></g><g><title>maybe_infer_to_datetimelike (pandas/core/dtypes/cast.py:926) (38 samples, 0.10%)</title><rect x="204" y="228" width="1" height="15" fill="rgb(224,133,41)"/><text x="207.00" y="238.50"></text></g><g><title>maybe_cast_to_datetime (pandas/core/dtypes/cast.py:1067) (197 samples, 0.51%)</title><rect x="199" y="212" width="6" height="15" fill="rgb(235,161,15)"/><text x="202.00" y="222.50"></text></g><g><title>maybe_cast_to_datetime (pandas/core/dtypes/cast.py:957) (35 samples, 0.09%)</title><rect x="205" y="212" width="1" height="15" fill="rgb(229,215,33)"/><text x="208.00" y="222.50"></text></g><g><title>_try_cast (pandas/core/internals/construction.py:697) (305 samples, 0.78%)</title><rect x="198" y="196" width="9" height="15" fill="rgb(210,200,4)"/><text x="201.00" y="206.50"></text></g><g><title>maybe_cast_to_datetime (pandas/core/dtypes/cast.py:958) (35 samples, 0.09%)</title><rect x="206" y="212" width="1" height="15" fill="rgb(216,188,52)"/><text x="209.00" y="222.50"></text></g><g><title>is_extension_type (pandas/core/dtypes/common.py:1693) (64 samples, 0.16%)</title><rect x="208" y="212" width="2" height="15" fill="rgb(207,50,42)"/><text x="211.00" y="222.50"></text></g><g><title>is_categorical (pandas/core/dtypes/common.py:291) (56 samples, 0.14%)</title><rect x="208" y="228" width="2" height="15" fill="rgb(214,22,17)"/><text x="211.00" y="238.50"></text></g><g><title>is_categorical_dtype (pandas/core/dtypes/common.py:602) (38 samples, 0.10%)</title><rect x="209" y="244" width="1" height="15" fill="rgb(208,203,7)"/><text x="212.00" y="254.50"></text></g><g><title>is_sparse (pandas/core/dtypes/common.py:216) (38 samples, 0.10%)</title><rect x="210" y="228" width="1" height="15" fill="rgb(208,208,4)"/><text x="213.00" y="238.50"></text></g><g><title>is_extension_type (pandas/core/dtypes/common.py:1695) (47 samples, 0.12%)</title><rect x="210" y="212" width="2" height="15" fill="rgb(235,43,23)"/><text x="213.00" y="222.50"></text></g><g><title>_try_cast (pandas/core/internals/construction.py:704) (141 samples, 0.36%)</title><rect x="208" y="196" width="4" height="15" fill="rgb(215,197,33)"/><text x="211.00" y="206.50"></text></g><g><title>sanitize_array (pandas/core/internals/construction.py:582) (688 samples, 1.77%)</title><rect x="192" y="180" width="21" height="15" fill="rgb(205,215,8)"/><text x="195.00" y="190.50"></text></g><g><title>sanitize_array (pandas/core/internals/construction.py:674) (217 samples, 0.56%)</title><rect x="214" y="180" width="7" height="15" fill="rgb(214,200,51)"/><text x="217.00" y="190.50"></text></g><g><title>__init__ (pandas/core/series.py:262) (1,036 samples, 2.66%)</title><rect x="190" y="164" width="31" height="15" fill="rgb(217,32,22)"/><text x="193.00" y="174.50">__..</text></g><g><title>get_block_type (pandas/core/internals/blocks.py:3050) (33 samples, 0.08%)</title><rect x="223" y="212" width="1" height="15" fill="rgb(244,70,34)"/><text x="226.00" y="222.50"></text></g><g><title>get_block_type (pandas/core/internals/blocks.py:3053) (57 samples, 0.15%)</title><rect x="224" y="212" width="2" height="15" fill="rgb(254,85,29)"/><text x="227.00" y="222.50"></text></g><g><title>is_categorical (pandas/core/dtypes/common.py:291) (46 samples, 0.12%)</title><rect x="224" y="228" width="2" height="15" fill="rgb(245,54,42)"/><text x="227.00" y="238.50"></text></g><g><title>is_interval_dtype (pandas/core/dtypes/common.py:569) (35 samples, 0.09%)</title><rect x="227" y="228" width="1" height="15" fill="rgb(220,52,11)"/><text x="230.00" y="238.50"></text></g><g><title>get_block_type (pandas/core/internals/blocks.py:3060) (64 samples, 0.16%)</title><rect x="227" y="212" width="2" height="15" fill="rgb(230,82,47)"/><text x="230.00" y="222.50"></text></g><g><title>make_block (pandas/core/internals/blocks.py:3088) (226 samples, 0.58%)</title><rect x="223" y="196" width="7" height="15" fill="rgb(249,20,50)"/><text x="226.00" y="206.50"></text></g><g><title>__init__ (pandas/core/internals/managers.py:1481) (333 samples, 0.86%)</title><rect x="222" y="180" width="10" height="15" fill="rgb(210,67,48)"/><text x="225.00" y="190.50"></text></g><g><title>make_block (pandas/core/internals/blocks.py:3095) (82 samples, 0.21%)</title><rect x="230" y="196" width="2" height="15" fill="rgb(218,213,6)"/><text x="233.00" y="206.50"></text></g><g><title>__init__ (pandas/core/internals/blocks.py:2631) (58 samples, 0.15%)</title><rect x="230" y="212" width="2" height="15" fill="rgb(254,48,45)"/><text x="233.00" y="222.50"></text></g><g><title>__init__ (pandas/core/series.py:264) (366 samples, 0.94%)</title><rect x="221" y="164" width="11" height="15" fill="rgb(241,121,22)"/><text x="224.00" y="174.50"></text></g><g><title>__init__ (pandas/core/series.py:266) (33 samples, 0.08%)</title><rect x="232" y="164" width="1" height="15" fill="rgb(244,105,20)"/><text x="235.00" y="174.50"></text></g><g><title>__setattr__ (pandas/core/generic.py:5079) (50 samples, 0.13%)</title><rect x="233" y="180" width="2" height="15" fill="rgb(222,54,25)"/><text x="236.00" y="190.50"></text></g><g><title>name (pandas/core/series.py:397) (39 samples, 0.10%)</title><rect x="234" y="196" width="1" height="15" fill="rgb(211,148,42)"/><text x="237.00" y="206.50"></text></g><g><title>__init__ (pandas/core/series.py:268) (92 samples, 0.24%)</title><rect x="233" y="164" width="3" height="15" fill="rgb(222,8,49)"/><text x="236.00" y="174.50"></text></g><g><title>iterrows (pandas/core/frame.py:846) (1,682 samples, 4.32%)</title><rect x="186" y="148" width="51" height="15" fill="rgb(226,86,31)"/><text x="189.00" y="158.50">iterr..</text></g><g><title>approximate_dependencies (dfd.py:368) (1,734 samples, 4.46%)</title><rect x="184" y="132" width="53" height="15" fill="rgb(228,122,29)"/><text x="187.00" y="142.50">appro..</text></g><g><title>approximate_dependencies (dfd.py:369) (317 samples, 0.81%)</title><rect x="237" y="132" width="10" height="15" fill="rgb(253,47,29)"/><text x="240.00" y="142.50"></text></g><g><title>__getitem__ (pandas/core/series.py:866) (60 samples, 0.15%)</title><rect x="250" y="148" width="2" height="15" fill="rgb(240,177,8)"/><text x="253.00" y="158.50"></text></g><g><title>get_value (pandas/core/indexes/base.py:4351) (105 samples, 0.27%)</title><rect x="254" y="164" width="3" height="15" fill="rgb(211,145,42)"/><text x="257.00" y="174.50"></text></g><g><title>_values (pandas/core/series.py:481) (74 samples, 0.19%)</title><rect x="255" y="180" width="2" height="15" fill="rgb(231,9,8)"/><text x="258.00" y="190.50"></text></g><g><title>internal_values (pandas/core/internals/managers.py:1550) (53 samples, 0.14%)</title><rect x="256" y="196" width="1" height="15" fill="rgb(212,63,13)"/><text x="259.00" y="206.50"></text></g><g><title>get_value (pandas/core/indexes/base.py:4352) (35 samples, 0.09%)</title><rect x="257" y="164" width="1" height="15" fill="rgb(248,81,11)"/><text x="260.00" y="174.50"></text></g><g><title>get_value (pandas/core/indexes/base.py:4369) (173 samples, 0.44%)</title><rect x="258" y="164" width="6" height="15" fill="rgb(219,212,45)"/><text x="261.00" y="174.50"></text></g><g><title>get_values (pandas/core/series.py:494) (131 samples, 0.34%)</title><rect x="260" y="180" width="4" height="15" fill="rgb(248,107,7)"/><text x="263.00" y="190.50"></text></g><g><title>get_values (pandas/core/internals/managers.py:1558) (111 samples, 0.29%)</title><rect x="260" y="196" width="4" height="15" fill="rgb(218,123,53)"/><text x="263.00" y="206.50"></text></g><g><title>to_dense (pandas/core/internals/blocks.py:185) (35 samples, 0.09%)</title><rect x="263" y="212" width="1" height="15" fill="rgb(229,63,44)"/><text x="266.00" y="222.50"></text></g><g><title>get_value (pandas/core/indexes/base.py:4370) (46 samples, 0.12%)</title><rect x="264" y="164" width="1" height="15" fill="rgb(241,9,45)"/><text x="267.00" y="174.50"></text></g><g><title>_convert_scalar_indexer (pandas/core/indexes/base.py:2856) (97 samples, 0.25%)</title><rect x="267" y="180" width="2" height="15" fill="rgb(231,160,19)"/><text x="270.00" y="190.50"></text></g><g><title>get_value (pandas/core/indexes/base.py:4372) (172 samples, 0.44%)</title><rect x="265" y="164" width="5" height="15" fill="rgb(213,125,19)"/><text x="268.00" y="174.50"></text></g><g><title>get_value (pandas/core/indexes/base.py:4374) (41 samples, 0.11%)</title><rect x="270" y="164" width="1" height="15" fill="rgb(253,61,42)"/><text x="273.00" y="174.50"></text></g><g><title>__getitem__ (pandas/core/series.py:868) (826 samples, 2.12%)</title><rect x="252" y="148" width="25" height="15" fill="rgb(241,216,38)"/><text x="255.00" y="158.50">_..</text></g><g><title>get_value (pandas/core/indexes/base.py:4375) (169 samples, 0.43%)</title><rect x="271" y="164" width="6" height="15" fill="rgb(235,86,49)"/><text x="274.00" y="174.50"></text></g><g><title>dtype (pandas/core/series.py:411) (34 samples, 0.09%)</title><rect x="276" y="180" width="1" height="15" fill="rgb(206,137,45)"/><text x="279.00" y="190.50"></text></g><g><title>get_mask (classes.py:591) (39 samples, 0.10%)</title><rect x="277" y="148" width="1" height="15" fill="rgb(217,151,47)"/><text x="280.00" y="158.50"></text></g><g><title>approximate_dependencies (dfd.py:371) (1,020 samples, 2.62%)</title><rect x="247" y="132" width="31" height="15" fill="rgb(238,31,31)"/><text x="250.00" y="142.50">ap..</text></g><g><title>approximate_dependencies (dfd.py:373) (4,625 samples, 11.89%)</title><rect x="278" y="132" width="141" height="15" fill="rgb(239,114,15)"/><text x="281.00" y="142.50">approximate_depen..</text></g><g><title>__getitem__ (pandas/core/series.py:868) (79 samples, 0.20%)</title><rect x="419" y="148" width="2" height="15" fill="rgb(244,124,42)"/><text x="422.00" y="158.50"></text></g><g><title>approximate_dependencies (dfd.py:374) (100 samples, 0.26%)</title><rect x="419" y="132" width="3" height="15" fill="rgb(222,205,46)"/><text x="422.00" y="142.50"></text></g><g><title>approximate_dependencies (dfd.py:375) (14,747 samples, 37.90%)</title><rect x="422" y="132" width="447" height="15" fill="rgb(244,199,52)"/><text x="425.00" y="142.50">approximate_dependencies (dfd.py:375)</text></g><g><title>__getitem__ (pandas/core/frame.py:2898) (104 samples, 0.27%)</title><rect x="873" y="148" width="3" height="15" fill="rgb(240,44,16)"/><text x="876.00" y="158.50"></text></g><g><title>__contains__ (pandas/core/indexes/base.py:3920) (38 samples, 0.10%)</title><rect x="875" y="164" width="1" height="15" fill="rgb(213,34,33)"/><text x="878.00" y="174.50"></text></g><g><title>__getitem__ (pandas/core/frame.py:2908) (44 samples, 0.11%)</title><rect x="877" y="148" width="1" height="15" fill="rgb(235,168,19)"/><text x="880.00" y="158.50"></text></g><g><title>is_bool_indexer (pandas/core/common.py:117) (39 samples, 0.10%)</title><rect x="879" y="164" width="1" height="15" fill="rgb(242,21,2)"/><text x="882.00" y="174.50"></text></g><g><title>is_bool_dtype (pandas/core/dtypes/common.py:1636) (62 samples, 0.16%)</title><rect x="882" y="180" width="2" height="15" fill="rgb(233,216,15)"/><text x="885.00" y="190.50"></text></g><g><title>is_extension_array_dtype (pandas/core/dtypes/common.py:1749) (50 samples, 0.13%)</title><rect x="883" y="196" width="1" height="15" fill="rgb(244,64,15)"/><text x="886.00" y="206.50"></text></g><g><title>is_bool_indexer (pandas/core/common.py:127) (133 samples, 0.34%)</title><rect x="881" y="164" width="4" height="15" fill="rgb(240,229,38)"/><text x="884.00" y="174.50"></text></g><g><title>__getitem__ (pandas/core/frame.py:2917) (234 samples, 0.60%)</title><rect x="878" y="148" width="7" height="15" fill="rgb(223,111,35)"/><text x="881.00" y="158.50"></text></g><g><title>_getitem_bool_array (pandas/core/frame.py:2961) (33 samples, 0.08%)</title><rect x="887" y="164" width="1" height="15" fill="rgb(212,130,20)"/><text x="890.00" y="174.50"></text></g><g><title>is_sparse (pandas/core/dtypes/common.py:216) (66 samples, 0.17%)</title><rect x="888" y="196" width="2" height="15" fill="rgb(218,6,10)"/><text x="891.00" y="206.50"></text></g><g><title>check_bool_indexer (pandas/core/indexing.py:2490) (85 samples, 0.22%)</title><rect x="888" y="180" width="3" height="15" fill="rgb(237,82,21)"/><text x="891.00" y="190.50"></text></g><g><title>_getitem_bool_array (pandas/core/frame.py:2967) (163 samples, 0.42%)</title><rect x="888" y="164" width="4" height="15" fill="rgb(230,119,43)"/><text x="891.00" y="174.50"></text></g><g><title>check_bool_indexer (pandas/core/indexing.py:2496) (61 samples, 0.16%)</title><rect x="891" y="180" width="1" height="15" fill="rgb(242,176,37)"/><text x="894.00" y="190.50"></text></g><g><title>asarray (numpy/core/numeric.py:538) (40 samples, 0.10%)</title><rect x="891" y="196" width="1" height="15" fill="rgb(241,150,0)"/><text x="894.00" y="206.50"></text></g><g><title>_getitem_bool_array (pandas/core/frame.py:2968) (1,421 samples, 3.65%)</title><rect x="892" y="164" width="44" height="15" fill="rgb(225,27,8)"/><text x="895.00" y="174.50">_get..</text></g><g><title>_protect_consolidate (pandas/core/generic.py:5127) (62 samples, 0.16%)</title><rect x="939" y="212" width="2" height="15" fill="rgb(209,201,32)"/><text x="942.00" y="222.50"></text></g><g><title>f (pandas/core/generic.py:5136) (60 samples, 0.15%)</title><rect x="939" y="228" width="2" height="15" fill="rgb(208,160,18)"/><text x="942.00" y="238.50"></text></g><g><title>_take (pandas/core/generic.py:3355) (139 samples, 0.36%)</title><rect x="937" y="180" width="4" height="15" fill="rgb(249,10,53)"/><text x="940.00" y="190.50"></text></g><g><title>_consolidate_inplace (pandas/core/generic.py:5138) (98 samples, 0.25%)</title><rect x="938" y="196" width="3" height="15" fill="rgb(236,227,24)"/><text x="941.00" y="206.50"></text></g><g><title>_get_block_manager_axis (pandas/core/generic.py:384) (39 samples, 0.10%)</title><rect x="941" y="196" width="2" height="15" fill="rgb(231,185,23)"/><text x="944.00" y="206.50"></text></g><g><title>_take (pandas/core/generic.py:3358) (58 samples, 0.15%)</title><rect x="941" y="180" width="2" height="15" fill="rgb(225,29,7)"/><text x="944.00" y="190.50"></text></g><g><title>take (pandas/core/internals/managers.py:1337) (90 samples, 0.23%)</title><rect x="944" y="196" width="2" height="15" fill="rgb(223,187,6)"/><text x="947.00" y="206.50"></text></g><g><title>asanyarray (numpy/core/numeric.py:591) (79 samples, 0.20%)</title><rect x="944" y="212" width="2" height="15" fill="rgb(239,170,50)"/><text x="947.00" y="222.50"></text></g><g><title>take (pandas/core/internals/managers.py:1339) (71 samples, 0.18%)</title><rect x="946" y="196" width="3" height="15" fill="rgb(234,214,30)"/><text x="949.00" y="206.50"></text></g><g><title>shape (pandas/core/internals/managers.py:141) (62 samples, 0.16%)</title><rect x="947" y="212" width="2" height="15" fill="rgb(228,119,39)"/><text x="950.00" y="222.50"></text></g><g><title>maybe_convert_indices (pandas/core/indexing.py:2608) (70 samples, 0.18%)</title><rect x="949" y="212" width="2" height="15" fill="rgb(235,82,20)"/><text x="952.00" y="222.50"></text></g><g><title>maybe_convert_indices (pandas/core/indexing.py:2609) (146 samples, 0.38%)</title><rect x="951" y="212" width="5" height="15" fill="rgb(222,15,34)"/><text x="954.00" y="222.50"></text></g><g><title>_any (numpy/core/_methods.py:43) (120 samples, 0.31%)</title><rect x="952" y="228" width="4" height="15" fill="rgb(206,106,49)"/><text x="955.00" y="238.50"></text></g><g><title>maybe_convert_indices (pandas/core/indexing.py:2613) (66 samples, 0.17%)</title><rect x="956" y="212" width="2" height="15" fill="rgb(253,120,25)"/><text x="959.00" y="222.50"></text></g><g><title>take (pandas/core/internals/managers.py:1341) (348 samples, 0.89%)</title><rect x="949" y="196" width="10" height="15" fill="rgb(214,174,26)"/><text x="952.00" y="206.50"></text></g><g><title>maybe_convert_indices (pandas/core/indexing.py:2614) (51 samples, 0.13%)</title><rect x="958" y="212" width="1" height="15" fill="rgb(250,204,34)"/><text x="961.00" y="222.50"></text></g><g><title>_any (numpy/core/_methods.py:43) (40 samples, 0.10%)</title><rect x="958" y="228" width="1" height="15" fill="rgb(253,13,43)"/><text x="961.00" y="238.50"></text></g><g><title>take (pandas/core/internals/managers.py:1344) (97 samples, 0.25%)</title><rect x="959" y="196" width="3" height="15" fill="rgb(212,86,25)"/><text x="962.00" y="206.50"></text></g><g><title>take (pandas/core/indexes/base.py:799) (65 samples, 0.17%)</title><rect x="964" y="212" width="2" height="15" fill="rgb(253,222,47)"/><text x="967.00" y="222.50"></text></g><g><title>_shallow_copy_with_infer (pandas/core/indexes/base.py:597) (35 samples, 0.09%)</title><rect x="967" y="244" width="1" height="15" fill="rgb(247,188,45)"/><text x="970.00" y="254.50"></text></g><g><title>__new__ (pandas/core/indexes/base.py:266) (96 samples, 0.25%)</title><rect x="970" y="260" width="2" height="15" fill="rgb(217,183,3)"/><text x="973.00" y="270.50"></text></g><g><title>__new__ (pandas/core/indexes/base.py:279) (53 samples, 0.14%)</title><rect x="973" y="260" width="2" height="15" fill="rgb(249,10,7)"/><text x="976.00" y="270.50"></text></g><g><title>is_categorical_dtype (pandas/core/dtypes/common.py:602) (48 samples, 0.12%)</title><rect x="973" y="276" width="2" height="15" fill="rgb(213,42,19)"/><text x="976.00" y="286.50"></text></g><g><title>__new__ (pandas/core/indexes/base.py:285) (58 samples, 0.15%)</title><rect x="975" y="260" width="2" height="15" fill="rgb(253,35,50)"/><text x="978.00" y="270.50"></text></g><g><title>is_interval_dtype (pandas/core/dtypes/common.py:569) (51 samples, 0.13%)</title><rect x="975" y="276" width="2" height="15" fill="rgb(223,175,32)"/><text x="978.00" y="286.50"></text></g><g><title>is_dtype (pandas/core/dtypes/dtypes.py:991) (35 samples, 0.09%)</title><rect x="976" y="292" width="1" height="15" fill="rgb(243,38,25)"/><text x="979.00" y="302.50"></text></g><g><title>is_datetime64_any_dtype (pandas/core/dtypes/common.py:1114) (90 samples, 0.23%)</title><rect x="977" y="276" width="3" height="15" fill="rgb(233,129,49)"/><text x="980.00" y="286.50"></text></g><g><title>is_datetime64_dtype (pandas/core/dtypes/common.py:431) (85 samples, 0.22%)</title><rect x="977" y="292" width="3" height="15" fill="rgb(242,62,9)"/><text x="980.00" y="302.50"></text></g><g><title>__new__ (pandas/core/indexes/base.py:292) (129 samples, 0.33%)</title><rect x="977" y="260" width="4" height="15" fill="rgb(234,182,35)"/><text x="980.00" y="270.50"></text></g><g><title>__new__ (pandas/core/indexes/base.py:311) (37 samples, 0.10%)</title><rect x="981" y="260" width="1" height="15" fill="rgb(222,80,6)"/><text x="984.00" y="270.50"></text></g><g><title>is_timedelta64_dtype (pandas/core/dtypes/common.py:500) (33 samples, 0.08%)</title><rect x="981" y="276" width="1" height="15" fill="rgb(251,205,41)"/><text x="984.00" y="286.50"></text></g><g><title>__new__ (pandas/core/indexes/base.py:324) (49 samples, 0.13%)</title><rect x="982" y="260" width="1" height="15" fill="rgb(214,8,21)"/><text x="985.00" y="270.50"></text></g><g><title>is_period_dtype (pandas/core/dtypes/common.py:533) (44 samples, 0.11%)</title><rect x="982" y="276" width="1" height="15" fill="rgb(220,84,5)"/><text x="985.00" y="286.50"></text></g><g><title>__new__ (pandas/core/indexes/base.py:330) (37 samples, 0.10%)</title><rect x="983" y="260" width="1" height="15" fill="rgb(210,53,20)"/><text x="986.00" y="270.50"></text></g><g><title>__new__ (pandas/core/indexes/base.py:399) (41 samples, 0.11%)</title><rect x="984" y="260" width="2" height="15" fill="rgb(249,209,5)"/><text x="987.00" y="270.50"></text></g><g><title>__new__ (pandas/core/indexes/base.py:402) (41 samples, 0.11%)</title><rect x="986" y="260" width="1" height="15" fill="rgb(221,16,38)"/><text x="989.00" y="270.50"></text></g><g><title>is_signed_integer_dtype (pandas/core/dtypes/common.py:977) (36 samples, 0.09%)</title><rect x="986" y="276" width="1" height="15" fill="rgb(236,126,8)"/><text x="989.00" y="286.50"></text></g><g><title>__new__ (pandas/core/indexes/base.py:403) (51 samples, 0.13%)</title><rect x="987" y="260" width="1" height="15" fill="rgb(250,211,49)"/><text x="990.00" y="270.50"></text></g><g><title>_simple_new (pandas/core/indexes/base.py:536) (33 samples, 0.08%)</title><rect x="993" y="292" width="1" height="15" fill="rgb(222,192,33)"/><text x="996.00" y="302.50"></text></g><g><title>take (pandas/core/internals/managers.py:1348) (1,059 samples, 2.72%)</title><rect x="962" y="196" width="32" height="15" fill="rgb(227,150,48)"/><text x="965.00" y="206.50">ta..</text></g><g><title>take (pandas/core/indexes/base.py:800) (936 samples, 2.41%)</title><rect x="966" y="212" width="28" height="15" fill="rgb(214,2,16)"/><text x="969.00" y="222.50">t..</text></g><g><title>_shallow_copy (pandas/core/indexes/numeric.py:71) (925 samples, 2.38%)</title><rect x="966" y="228" width="28" height="15" fill="rgb(221,169,53)"/><text x="969.00" y="238.50">_..</text></g><g><title>_shallow_copy_with_infer (pandas/core/indexes/base.py:607) (848 samples, 2.18%)</title><rect x="969" y="244" width="25" height="15" fill="rgb(252,84,2)"/><text x="972.00" y="254.50">_..</text></g><g><title>__new__ (pandas/core/indexes/base.py:404) (189 samples, 0.49%)</title><rect x="988" y="260" width="6" height="15" fill="rgb(221,109,34)"/><text x="991.00" y="270.50"></text></g><g><title>__new__ (pandas/core/indexes/numeric.py:58) (106 samples, 0.27%)</title><rect x="991" y="276" width="3" height="15" fill="rgb(246,56,1)"/><text x="994.00" y="286.50"></text></g><g><title>take_nd (pandas/core/algorithms.py:1584) (66 samples, 0.17%)</title><rect x="999" y="260" width="2" height="15" fill="rgb(230,183,11)"/><text x="1002.00" y="270.50"></text></g><g><title>is_extension_array_dtype (pandas/core/dtypes/common.py:1749) (46 samples, 0.12%)</title><rect x="999" y="276" width="2" height="15" fill="rgb(249,160,44)"/><text x="1002.00" y="286.50"></text></g><g><title>is_dtype (pandas/core/dtypes/base.py:101) (41 samples, 0.11%)</title><rect x="1001" y="292" width="2" height="15" fill="rgb(239,80,52)"/><text x="1004.00" y="302.50"></text></g><g><title>take_nd (pandas/core/algorithms.py:1586) (62 samples, 0.16%)</title><rect x="1001" y="260" width="2" height="15" fill="rgb(213,196,6)"/><text x="1004.00" y="270.50"></text></g><g><title>is_datetime64tz_dtype (pandas/core/dtypes/common.py:469) (54 samples, 0.14%)</title><rect x="1001" y="276" width="2" height="15" fill="rgb(231,40,11)"/><text x="1004.00" y="286.50"></text></g><g><title>take_nd (pandas/core/algorithms.py:1588) (80 samples, 0.21%)</title><rect x="1003" y="260" width="2" height="15" fill="rgb(218,133,20)"/><text x="1006.00" y="270.50"></text></g><g><title>is_interval_dtype (pandas/core/dtypes/common.py:569) (71 samples, 0.18%)</title><rect x="1003" y="276" width="2" height="15" fill="rgb(253,211,43)"/><text x="1006.00" y="286.50"></text></g><g><title>is_dtype (pandas/core/dtypes/dtypes.py:991) (55 samples, 0.14%)</title><rect x="1003" y="292" width="2" height="15" fill="rgb(206,196,28)"/><text x="1006.00" y="302.50"></text></g><g><title>is_sparse (pandas/core/dtypes/common.py:216) (65 samples, 0.17%)</title><rect x="1005" y="276" width="2" height="15" fill="rgb(243,45,54)"/><text x="1008.00" y="286.50"></text></g><g><title>take_nd (pandas/core/algorithms.py:1591) (80 samples, 0.21%)</title><rect x="1005" y="260" width="3" height="15" fill="rgb(246,54,48)"/><text x="1008.00" y="270.50"></text></g><g><title>maybe_promote (pandas/core/dtypes/cast.py:273) (54 samples, 0.14%)</title><rect x="1012" y="276" width="2" height="15" fill="rgb(226,93,11)"/><text x="1015.00" y="286.50"></text></g><g><title>is_datetime64tz_dtype (pandas/core/dtypes/common.py:469) (46 samples, 0.12%)</title><rect x="1012" y="292" width="2" height="15" fill="rgb(217,174,40)"/><text x="1015.00" y="302.50"></text></g><g><title>maybe_promote (pandas/core/dtypes/cast.py:276) (35 samples, 0.09%)</title><rect x="1014" y="276" width="1" height="15" fill="rgb(243,187,51)"/><text x="1017.00" y="286.50"></text></g><g><title>maybe_promote (pandas/core/dtypes/cast.py:316) (85 samples, 0.22%)</title><rect x="1017" y="276" width="2" height="15" fill="rgb(250,229,1)"/><text x="1020.00" y="286.50"></text></g><g><title>is_datetime64tz_dtype (pandas/core/dtypes/common.py:469) (79 samples, 0.20%)</title><rect x="1017" y="292" width="2" height="15" fill="rgb(251,83,41)"/><text x="1020.00" y="302.50"></text></g><g><title>maybe_promote (pandas/core/dtypes/cast.py:318) (34 samples, 0.09%)</title><rect x="1019" y="276" width="1" height="15" fill="rgb(238,120,28)"/><text x="1022.00" y="286.50"></text></g><g><title>take_nd (pandas/core/algorithms.py:1609) (331 samples, 0.85%)</title><rect x="1010" y="260" width="10" height="15" fill="rgb(222,27,46)"/><text x="1013.00" y="270.50"></text></g><g><title>take_nd (pandas/core/algorithms.py:1615) (44 samples, 0.11%)</title><rect x="1020" y="260" width="2" height="15" fill="rgb(208,87,42)"/><text x="1023.00" y="270.50"></text></g><g><title>take_nd (pandas/core/algorithms.py:1616) (55 samples, 0.14%)</title><rect x="1022" y="260" width="1" height="15" fill="rgb(238,86,19)"/><text x="1025.00" y="270.50"></text></g><g><title>_any (numpy/core/_methods.py:43) (45 samples, 0.12%)</title><rect x="1022" y="276" width="1" height="15" fill="rgb(234,4,30)"/><text x="1025.00" y="286.50"></text></g><g><title>take_nd (pandas/core/algorithms.py:1651) (48 samples, 0.12%)</title><rect x="1026" y="260" width="1" height="15" fill="rgb(233,43,20)"/><text x="1029.00" y="270.50"></text></g><g><title>issubclass_ (numpy/core/numerictypes.py:328) (54 samples, 0.14%)</title><rect x="1036" y="324" width="1" height="15" fill="rgb(231,166,34)"/><text x="1039.00" y="334.50"></text></g><g><title>issubdtype (numpy/core/numerictypes.py:392) (75 samples, 0.19%)</title><rect x="1036" y="308" width="2" height="15" fill="rgb(245,214,48)"/><text x="1039.00" y="318.50"></text></g><g><title>_name_get (numpy/core/_dtype.py:334) (148 samples, 0.38%)</title><rect x="1035" y="292" width="4" height="15" fill="rgb(239,189,41)"/><text x="1038.00" y="302.50"></text></g><g><title>_get_take_nd_function (pandas/core/algorithms.py:1419) (367 samples, 0.94%)</title><rect x="1028" y="276" width="12" height="15" fill="rgb(244,224,50)"/><text x="1031.00" y="286.50"></text></g><g><title>take_nd (pandas/core/algorithms.py:1654) (406 samples, 1.04%)</title><rect x="1028" y="260" width="12" height="15" fill="rgb(251,192,53)"/><text x="1031.00" y="270.50"></text></g><g><title>take_nd (pandas/core/algorithms.py:1655) (285 samples, 0.73%)</title><rect x="1040" y="260" width="9" height="15" fill="rgb(205,141,32)"/><text x="1043.00" y="270.50"></text></g><g><title>take_nd (pandas/core/internals/blocks.py:1238) (1,668 samples, 4.29%)</title><rect x="998" y="244" width="51" height="15" fill="rgb(229,155,23)"/><text x="1001.00" y="254.50">take_..</text></g><g><title>take_nd (pandas/core/internals/blocks.py:1250) (55 samples, 0.14%)</title><rect x="1050" y="244" width="1" height="15" fill="rgb(224,43,23)"/><text x="1053.00" y="254.50"></text></g><g><title>__init__ (pandas/core/internals/blocks.py:2631) (38 samples, 0.10%)</title><rect x="1054" y="292" width="1" height="15" fill="rgb(249,167,19)"/><text x="1057.00" y="302.50"></text></g><g><title>reindex_indexer (pandas/core/internals/managers.py:1235) (2,011 samples, 5.17%)</title><rect x="996" y="212" width="61" height="15" fill="rgb(248,221,6)"/><text x="999.00" y="222.50">reinde..</text></g><g><title>&lt;listcomp&gt; (pandas/core/internals/managers.py:1235) (2,000 samples, 5.14%)</title><rect x="996" y="228" width="61" height="15" fill="rgb(218,68,7)"/><text x="999.00" y="238.50">&lt;listc..</text></g><g><title>take_nd (pandas/core/internals/blocks.py:1253) (193 samples, 0.50%)</title><rect x="1051" y="244" width="6" height="15" fill="rgb(229,196,47)"/><text x="1054.00" y="254.50"></text></g><g><title>make_block_same_class (pandas/core/internals/blocks.py:235) (167 samples, 0.43%)</title><rect x="1052" y="260" width="5" height="15" fill="rgb(209,203,7)"/><text x="1055.00" y="270.50"></text></g><g><title>make_block (pandas/core/internals/blocks.py:3095) (142 samples, 0.36%)</title><rect x="1053" y="276" width="4" height="15" fill="rgb(222,73,10)"/><text x="1056.00" y="286.50"></text></g><g><title>_verify_integrity (pandas/core/internals/managers.py:307) (43 samples, 0.11%)</title><rect x="1059" y="244" width="1" height="15" fill="rgb(226,208,23)"/><text x="1062.00" y="254.50"></text></g><g><title>shape (pandas/core/internals/managers.py:141) (38 samples, 0.10%)</title><rect x="1059" y="260" width="1" height="15" fill="rgb(238,115,1)"/><text x="1062.00" y="270.50"></text></g><g><title>_verify_integrity (pandas/core/internals/managers.py:308) (33 samples, 0.08%)</title><rect x="1060" y="244" width="1" height="15" fill="rgb(212,132,42)"/><text x="1063.00" y="254.50"></text></g><g><title>__init__ (pandas/core/internals/managers.py:114) (128 samples, 0.33%)</title><rect x="1058" y="228" width="4" height="15" fill="rgb(209,61,19)"/><text x="1061.00" y="238.50"></text></g><g><title>_name_get (numpy/core/_dtype.py:334) (57 samples, 0.15%)</title><rect x="1069" y="308" width="2" height="15" fill="rgb(254,26,29)"/><text x="1072.00" y="318.50"></text></g><g><title>_consolidate_check (pandas/core/internals/managers.py:600) (297 samples, 0.76%)</title><rect x="1062" y="244" width="9" height="15" fill="rgb(249,23,1)"/><text x="1065.00" y="254.50"></text></g><g><title>&lt;listcomp&gt; (pandas/core/internals/managers.py:600) (290 samples, 0.75%)</title><rect x="1063" y="260" width="8" height="15" fill="rgb(248,72,18)"/><text x="1066.00" y="270.50"></text></g><g><title>ftype (pandas/core/internals/blocks.py:318) (264 samples, 0.68%)</title><rect x="1063" y="276" width="8" height="15" fill="rgb(205,124,33)"/><text x="1066.00" y="286.50"></text></g><g><title>__str__ (numpy/core/_dtype.py:54) (119 samples, 0.31%)</title><rect x="1068" y="292" width="3" height="15" fill="rgb(212,1,26)"/><text x="1071.00" y="302.50"></text></g><g><title>__init__ (pandas/core/internals/managers.py:116) (324 samples, 0.83%)</title><rect x="1062" y="228" width="10" height="15" fill="rgb(247,10,23)"/><text x="1065.00" y="238.50"></text></g><g><title>_rebuild_blknos_and_blklocs (pandas/core/internals/managers.py:190) (70 samples, 0.18%)</title><rect x="1072" y="244" width="2" height="15" fill="rgb(253,121,3)"/><text x="1075.00" y="254.50"></text></g><g><title>_rebuild_blknos_and_blklocs (pandas/core/internals/managers.py:191) (37 samples, 0.10%)</title><rect x="1074" y="244" width="2" height="15" fill="rgb(228,3,17)"/><text x="1077.00" y="254.50"></text></g><g><title>_rebuild_blknos_and_blklocs (pandas/core/internals/managers.py:197) (60 samples, 0.15%)</title><rect x="1077" y="244" width="2" height="15" fill="rgb(206,97,4)"/><text x="1080.00" y="254.50"></text></g><g><title>_rebuild_blknos_and_blklocs (pandas/core/internals/managers.py:198) (101 samples, 0.26%)</title><rect x="1079" y="244" width="3" height="15" fill="rgb(216,154,17)"/><text x="1082.00" y="254.50"></text></g><g><title>_rebuild_blknos_and_blklocs (pandas/core/internals/managers.py:200) (84 samples, 0.22%)</title><rect x="1082" y="244" width="2" height="15" fill="rgb(254,72,36)"/><text x="1085.00" y="254.50"></text></g><g><title>_any (numpy/core/_methods.py:43) (47 samples, 0.12%)</title><rect x="1083" y="260" width="1" height="15" fill="rgb(224,146,22)"/><text x="1086.00" y="270.50"></text></g><g><title>__init__ (pandas/core/internals/managers.py:118) (407 samples, 1.05%)</title><rect x="1072" y="228" width="12" height="15" fill="rgb(249,4,45)"/><text x="1075.00" y="238.50"></text></g><g><title>_take (pandas/core/generic.py:3359) (4,700 samples, 12.08%)</title><rect x="943" y="180" width="142" height="15" fill="rgb(241,83,10)"/><text x="946.00" y="190.50">_take (pandas/core..</text></g><g><title>take (pandas/core/internals/managers.py:1350) (2,990 samples, 7.68%)</title><rect x="995" y="196" width="90" height="15" fill="rgb(223,130,16)"/><text x="998.00" y="206.50">take (pand..</text></g><g><title>reindex_indexer (pandas/core/internals/managers.py:1239) (923 samples, 2.37%)</title><rect x="1057" y="212" width="28" height="15" fill="rgb(221,82,30)"/><text x="1060.00" y="222.50">r..</text></g><g><title>__init__ (pandas/core/frame.py:470) (45 samples, 0.12%)</title><rect x="1089" y="196" width="1" height="15" fill="rgb(233,81,33)"/><text x="1092.00" y="206.50"></text></g><g><title>_take (pandas/core/generic.py:3360) (169 samples, 0.43%)</title><rect x="1085" y="180" width="5" height="15" fill="rgb(214,36,26)"/><text x="1088.00" y="190.50"></text></g><g><title>_get_axis (pandas/core/generic.py:378) (42 samples, 0.11%)</title><rect x="1091" y="196" width="1" height="15" fill="rgb(231,35,30)"/><text x="1094.00" y="206.50"></text></g><g><title>equals (pandas/core/indexes/base.py:4061) (80 samples, 0.21%)</title><rect x="1093" y="196" width="2" height="15" fill="rgb(251,51,44)"/><text x="1096.00" y="206.50"></text></g><g><title>is_object_dtype (pandas/core/dtypes/common.py:157) (74 samples, 0.19%)</title><rect x="1093" y="212" width="2" height="15" fill="rgb(225,99,35)"/><text x="1096.00" y="222.50"></text></g><g><title>equals (pandas/core/indexes/base.py:4066) (48 samples, 0.12%)</title><rect x="1095" y="196" width="2" height="15" fill="rgb(244,199,31)"/><text x="1098.00" y="206.50"></text></g><g><title>_take (pandas/core/generic.py:3364) (260 samples, 0.67%)</title><rect x="1090" y="180" width="8" height="15" fill="rgb(218,73,15)"/><text x="1093.00" y="190.50"></text></g><g><title>equals (pandas/core/indexes/base.py:4067) (51 samples, 0.13%)</title><rect x="1097" y="196" width="1" height="15" fill="rgb(205,20,13)"/><text x="1100.00" y="206.50"></text></g><g><title>_take (pandas/core/generic.py:3365) (45 samples, 0.12%)</title><rect x="1098" y="180" width="2" height="15" fill="rgb(239,136,49)"/><text x="1101.00" y="190.50"></text></g><g><title>approximate_dependencies (dfd.py:377) (7,619 samples, 19.58%)</title><rect x="869" y="132" width="231" height="15" fill="rgb(231,181,15)"/><text x="872.00" y="142.50">approximate_dependencies (dfd...</text></g><g><title>__getitem__ (pandas/core/frame.py:2918) (7,074 samples, 18.18%)</title><rect x="885" y="148" width="215" height="15" fill="rgb(206,47,0)"/><text x="888.00" y="158.50">__getitem__ (pandas/core/fra..</text></g><g><title>_getitem_bool_array (pandas/core/frame.py:2969) (5,414 samples, 13.91%)</title><rect x="936" y="164" width="164" height="15" fill="rgb(229,145,23)"/><text x="939.00" y="174.50">_getitem_bool_array (..</text></g><g><title>__getitem__ (pandas/core/frame.py:2898) (72 samples, 0.19%)</title><rect x="1101" y="148" width="2" height="15" fill="rgb(244,136,48)"/><text x="1104.00" y="158.50"></text></g><g><title>__contains__ (pandas/core/indexes/base.py:3922) (41 samples, 0.11%)</title><rect x="1102" y="164" width="1" height="15" fill="rgb(233,44,13)"/><text x="1105.00" y="174.50"></text></g><g><title>get (pandas/core/internals/managers.py:940) (41 samples, 0.11%)</title><rect x="1105" y="180" width="1" height="15" fill="rgb(220,211,5)"/><text x="1108.00" y="190.50"></text></g><g><title>isna (pandas/core/dtypes/missing.py:99) (35 samples, 0.09%)</title><rect x="1105" y="196" width="1" height="15" fill="rgb(225,1,47)"/><text x="1108.00" y="206.50"></text></g><g><title>get (pandas/core/internals/managers.py:941) (60 samples, 0.15%)</title><rect x="1106" y="180" width="2" height="15" fill="rgb(217,12,21)"/><text x="1109.00" y="190.50"></text></g><g><title>get_loc (pandas/core/indexes/base.py:2657) (45 samples, 0.12%)</title><rect x="1107" y="196" width="1" height="15" fill="rgb(217,215,33)"/><text x="1110.00" y="206.50"></text></g><g><title>iget (pandas/core/internals/managers.py:978) (99 samples, 0.25%)</title><rect x="1110" y="196" width="3" height="15" fill="rgb(226,30,35)"/><text x="1113.00" y="206.50"></text></g><g><title>make_block_same_class (pandas/core/internals/blocks.py:235) (89 samples, 0.23%)</title><rect x="1110" y="212" width="3" height="15" fill="rgb(224,58,9)"/><text x="1113.00" y="222.50"></text></g><g><title>make_block (pandas/core/internals/blocks.py:3095) (82 samples, 0.21%)</title><rect x="1111" y="228" width="2" height="15" fill="rgb(245,219,1)"/><text x="1114.00" y="238.50"></text></g><g><title>_get_item_cache (pandas/core/generic.py:3061) (329 samples, 0.85%)</title><rect x="1105" y="164" width="10" height="15" fill="rgb(237,39,51)"/><text x="1108.00" y="174.50"></text></g><g><title>get (pandas/core/internals/managers.py:952) (211 samples, 0.54%)</title><rect x="1108" y="180" width="7" height="15" fill="rgb(230,56,10)"/><text x="1111.00" y="190.50"></text></g><g><title>iget (pandas/core/internals/managers.py:979) (49 samples, 0.13%)</title><rect x="1113" y="196" width="2" height="15" fill="rgb(224,137,4)"/><text x="1116.00" y="206.50"></text></g><g><title>_box_item_values (pandas/core/frame.py:3343) (68 samples, 0.17%)</title><rect x="1115" y="180" width="2" height="15" fill="rgb(219,13,38)"/><text x="1118.00" y="190.50"></text></g><g><title>__init__ (pandas/core/series.py:266) (36 samples, 0.09%)</title><rect x="1118" y="212" width="1" height="15" fill="rgb(253,80,21)"/><text x="1121.00" y="222.50"></text></g><g><title>__setattr__ (pandas/core/generic.py:5079) (67 samples, 0.17%)</title><rect x="1119" y="228" width="2" height="15" fill="rgb(209,203,48)"/><text x="1122.00" y="238.50"></text></g><g><title>name (pandas/core/series.py:397) (50 samples, 0.13%)</title><rect x="1120" y="244" width="1" height="15" fill="rgb(220,154,34)"/><text x="1123.00" y="254.50"></text></g><g><title>__init__ (pandas/core/series.py:268) (112 samples, 0.29%)</title><rect x="1119" y="212" width="4" height="15" fill="rgb(206,36,15)"/><text x="1122.00" y="222.50"></text></g><g><title>_get_item_cache (pandas/core/generic.py:3062) (299 samples, 0.77%)</title><rect x="1115" y="164" width="9" height="15" fill="rgb(253,150,9)"/><text x="1118.00" y="174.50"></text></g><g><title>_box_item_values (pandas/core/frame.py:3347) (220 samples, 0.57%)</title><rect x="1117" y="180" width="7" height="15" fill="rgb(247,56,12)"/><text x="1120.00" y="190.50"></text></g><g><title>_box_col_values (pandas/core/frame.py:3354) (211 samples, 0.54%)</title><rect x="1117" y="196" width="7" height="15" fill="rgb(236,212,33)"/><text x="1120.00" y="206.50"></text></g><g><title>_get_item_cache (pandas/core/generic.py:3064) (48 samples, 0.12%)</title><rect x="1124" y="164" width="1" height="15" fill="rgb(208,27,33)"/><text x="1127.00" y="174.50"></text></g><g><title>_set_as_cached (pandas/core/generic.py:3074) (45 samples, 0.12%)</title><rect x="1124" y="180" width="1" height="15" fill="rgb(215,155,2)"/><text x="1127.00" y="190.50"></text></g><g><title>__getitem__ (pandas/core/frame.py:2901) (710 samples, 1.82%)</title><rect x="1104" y="148" width="21" height="15" fill="rgb(217,168,16)"/><text x="1107.00" y="158.50"></text></g><g><title>to_numpy (pandas/core/base.py:951) (77 samples, 0.20%)</title><rect x="1125" y="148" width="3" height="15" fill="rgb(233,223,49)"/><text x="1128.00" y="158.50"></text></g><g><title>is_datetime64tz_dtype (pandas/core/dtypes/common.py:469) (41 samples, 0.11%)</title><rect x="1126" y="164" width="2" height="15" fill="rgb(251,211,19)"/><text x="1129.00" y="174.50"></text></g><g><title>_unique1d (numpy/lib/arraysetops.py:304) (40 samples, 0.10%)</title><rect x="1129" y="164" width="2" height="15" fill="rgb(229,85,41)"/><text x="1132.00" y="174.50"></text></g><g><title>_unique1d (numpy/lib/arraysetops.py:312) (128 samples, 0.33%)</title><rect x="1131" y="164" width="4" height="15" fill="rgb(229,143,15)"/><text x="1134.00" y="174.50"></text></g><g><title>_unique1d (numpy/lib/arraysetops.py:316) (75 samples, 0.19%)</title><rect x="1136" y="164" width="2" height="15" fill="rgb(207,89,18)"/><text x="1139.00" y="174.50"></text></g><g><title>_unique1d (numpy/lib/arraysetops.py:327) (120 samples, 0.31%)</title><rect x="1139" y="164" width="4" height="15" fill="rgb(239,221,10)"/><text x="1142.00" y="174.50"></text></g><g><title>unique (numpy/lib/arraysetops.py:264) (619 samples, 1.59%)</title><rect x="1129" y="148" width="19" height="15" fill="rgb(252,85,36)"/><text x="1132.00" y="158.50"></text></g><g><title>_unique1d (numpy/lib/arraysetops.py:328) (168 samples, 0.43%)</title><rect x="1143" y="164" width="5" height="15" fill="rgb(241,6,48)"/><text x="1146.00" y="174.50"></text></g><g><title>diff (numpy/lib/function_base.py:1273) (38 samples, 0.10%)</title><rect x="1147" y="180" width="1" height="15" fill="rgb(250,30,26)"/><text x="1150.00" y="190.50"></text></g><g><title>approximate_dependencies (dfd.py:378) (1,591 samples, 4.09%)</title><rect x="1100" y="132" width="48" height="15" fill="rgb(212,215,12)"/><text x="1103.00" y="142.50">appr..</text></g><g><title>_amax (numpy/core/_methods.py:28) (58 samples, 0.15%)</title><rect x="1149" y="148" width="2" height="15" fill="rgb(205,138,33)"/><text x="1152.00" y="158.50"></text></g><g><title>approximate_dependencies (dfd.py:379) (195 samples, 0.50%)</title><rect x="1148" y="132" width="6" height="15" fill="rgb(230,90,2)"/><text x="1151.00" y="142.50"></text></g><g><title>_sum (numpy/core/_methods.py:36) (104 samples, 0.27%)</title><rect x="1151" y="148" width="3" height="15" fill="rgb(238,17,49)"/><text x="1154.00" y="158.50"></text></g><g><title>find_LHSs (dfd.py:106) (37,688 samples, 96.85%)</title><rect x="13" y="100" width="1143" height="15" fill="rgb(215,165,35)"/><text x="16.00" y="110.50">find_LHSs (dfd.py:106)</text></g><g><title>compute_partitions (dfd.py:323) (37,687 samples, 96.85%)</title><rect x="13" y="116" width="1143" height="15" fill="rgb(245,173,2)"/><text x="16.00" y="126.50">compute_partitions (dfd.py:323)</text></g><g><title>approximate_dependencies (dfd.py:380) (76 samples, 0.20%)</title><rect x="1154" y="132" width="2" height="15" fill="rgb(251,186,28)"/><text x="1157.00" y="142.50"></text></g><g><title>&lt;module&gt; (pyspy.py:10) (37,822 samples, 97.19%)</title><rect x="10" y="52" width="1146" height="15" fill="rgb(241,225,35)"/><text x="13.00" y="62.50">&lt;module&gt; (pyspy.py:10)</text></g><g><title>find_dependencies (user_interaction.py:29) (37,822 samples, 97.19%)</title><rect x="10" y="68" width="1146" height="15" fill="rgb(223,68,5)"/><text x="13.00" y="78.50">find_dependencies (user_interaction.py:29)</text></g><g><title>dfd (dfd.py:50) (37,697 samples, 96.87%)</title><rect x="13" y="84" width="1143" height="15" fill="rgb(250,157,48)"/><text x="16.00" y="94.50">dfd (dfd.py:50)</text></g><g><title>&lt;module&gt; (dfd.py:2) (38 samples, 0.10%)</title><rect x="1156" y="244" width="2" height="15" fill="rgb(222,133,7)"/><text x="1159.00" y="254.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (38 samples, 0.10%)</title><rect x="1156" y="260" width="2" height="15" fill="rgb(216,177,1)"/><text x="1159.00" y="270.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (38 samples, 0.10%)</title><rect x="1156" y="276" width="2" height="15" fill="rgb(230,207,52)"/><text x="1159.00" y="286.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (38 samples, 0.10%)</title><rect x="1156" y="292" width="2" height="15" fill="rgb(252,116,35)"/><text x="1159.00" y="302.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (37 samples, 0.10%)</title><rect x="1156" y="308" width="2" height="15" fill="rgb(207,173,43)"/><text x="1159.00" y="318.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (37 samples, 0.10%)</title><rect x="1156" y="324" width="2" height="15" fill="rgb(234,126,26)"/><text x="1159.00" y="334.50"></text></g><g><title>&lt;module&gt; (pyspy.py:2) (40 samples, 0.10%)</title><rect x="1156" y="52" width="2" height="15" fill="rgb(212,137,14)"/><text x="1159.00" y="62.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (40 samples, 0.10%)</title><rect x="1156" y="68" width="2" height="15" fill="rgb(237,118,27)"/><text x="1159.00" y="78.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (40 samples, 0.10%)</title><rect x="1156" y="84" width="2" height="15" fill="rgb(231,68,49)"/><text x="1159.00" y="94.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (40 samples, 0.10%)</title><rect x="1156" y="100" width="2" height="15" fill="rgb(252,0,49)"/><text x="1159.00" y="110.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (40 samples, 0.10%)</title><rect x="1156" y="116" width="2" height="15" fill="rgb(246,72,15)"/><text x="1159.00" y="126.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (40 samples, 0.10%)</title><rect x="1156" y="132" width="2" height="15" fill="rgb(238,148,51)"/><text x="1159.00" y="142.50"></text></g><g><title>&lt;module&gt; (user_interaction.py:1) (40 samples, 0.10%)</title><rect x="1156" y="148" width="2" height="15" fill="rgb(217,132,21)"/><text x="1159.00" y="158.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (40 samples, 0.10%)</title><rect x="1156" y="164" width="2" height="15" fill="rgb(241,90,35)"/><text x="1159.00" y="174.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (40 samples, 0.10%)</title><rect x="1156" y="180" width="2" height="15" fill="rgb(212,196,35)"/><text x="1159.00" y="190.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (40 samples, 0.10%)</title><rect x="1156" y="196" width="2" height="15" fill="rgb(230,99,42)"/><text x="1159.00" y="206.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (39 samples, 0.10%)</title><rect x="1156" y="212" width="2" height="15" fill="rgb(224,89,21)"/><text x="1159.00" y="222.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (39 samples, 0.10%)</title><rect x="1156" y="228" width="2" height="15" fill="rgb(228,208,52)"/><text x="1159.00" y="238.50"></text></g><g><title>&lt;module&gt; (pandas/__init__.py:42) (47 samples, 0.12%)</title><rect x="1158" y="148" width="2" height="15" fill="rgb(220,39,48)"/><text x="1161.00" y="158.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (47 samples, 0.12%)</title><rect x="1158" y="164" width="2" height="15" fill="rgb(215,178,29)"/><text x="1161.00" y="174.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (47 samples, 0.12%)</title><rect x="1158" y="180" width="2" height="15" fill="rgb(247,5,12)"/><text x="1161.00" y="190.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (47 samples, 0.12%)</title><rect x="1158" y="196" width="2" height="15" fill="rgb(254,229,38)"/><text x="1161.00" y="206.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (47 samples, 0.12%)</title><rect x="1158" y="212" width="2" height="15" fill="rgb(238,153,16)"/><text x="1161.00" y="222.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (47 samples, 0.12%)</title><rect x="1158" y="228" width="2" height="15" fill="rgb(242,13,33)"/><text x="1161.00" y="238.50"></text></g><g><title>&lt;module&gt; (pyspy.py:3) (87 samples, 0.22%)</title><rect x="1158" y="52" width="2" height="15" fill="rgb(247,167,22)"/><text x="1161.00" y="62.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (87 samples, 0.22%)</title><rect x="1158" y="68" width="2" height="15" fill="rgb(234,75,23)"/><text x="1161.00" y="78.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (87 samples, 0.22%)</title><rect x="1158" y="84" width="2" height="15" fill="rgb(231,219,23)"/><text x="1161.00" y="94.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (87 samples, 0.22%)</title><rect x="1158" y="100" width="2" height="15" fill="rgb(228,228,40)"/><text x="1161.00" y="110.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (87 samples, 0.22%)</title><rect x="1158" y="116" width="2" height="15" fill="rgb(250,163,31)"/><text x="1161.00" y="126.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (87 samples, 0.22%)</title><rect x="1158" y="132" width="2" height="15" fill="rgb(252,161,1)"/><text x="1161.00" y="142.50"></text></g><g><title>read (pandas/io/parsers.py:1139) (827 samples, 2.13%)</title><rect x="1161" y="100" width="25" height="15" fill="rgb(221,184,28)"/><text x="1164.00" y="110.50">r..</text></g><g><title>read (pandas/io/parsers.py:1995) (827 samples, 2.13%)</title><rect x="1161" y="116" width="25" height="15" fill="rgb(217,148,47)"/><text x="1164.00" y="126.50">r..</text></g><g><title>&lt;module&gt; (pyspy.py:6) (892 samples, 2.29%)</title><rect x="1160" y="52" width="27" height="15" fill="rgb(220,49,33)"/><text x="1163.00" y="62.50">&lt;..</text></g><g><title>parser_f (pandas/io/parsers.py:702) (892 samples, 2.29%)</title><rect x="1160" y="68" width="27" height="15" fill="rgb(249,200,40)"/><text x="1163.00" y="78.50">p..</text></g><g><title>_read (pandas/io/parsers.py:435) (887 samples, 2.28%)</title><rect x="1160" y="84" width="27" height="15" fill="rgb(209,45,22)"/><text x="1163.00" y="94.50">_..</text></g><g><title>read (pandas/io/parsers.py:1154) (51 samples, 0.13%)</title><rect x="1186" y="100" width="1" height="15" fill="rgb(247,55,5)"/><text x="1189.00" y="110.50"></text></g><g><title>__init__ (pandas/core/frame.py:392) (51 samples, 0.13%)</title><rect x="1186" y="116" width="1" height="15" fill="rgb(252,149,20)"/><text x="1189.00" y="126.50"></text></g><g><title>init_dict (pandas/core/internals/construction.py:212) (51 samples, 0.13%)</title><rect x="1186" y="132" width="1" height="15" fill="rgb(205,144,44)"/><text x="1189.00" y="142.50"></text></g><g><title>_drop_axis (pandas/core/generic.py:3812) (37 samples, 0.10%)</title><rect x="1188" y="100" width="1" height="15" fill="rgb(238,115,31)"/><text x="1191.00" y="110.50"></text></g><g><title>&lt;module&gt; (pyspy.py:8) (43 samples, 0.11%)</title><rect x="1188" y="52" width="1" height="15" fill="rgb(206,199,35)"/><text x="1191.00" y="62.50"></text></g><g><title>drop (pandas/core/frame.py:3940) (43 samples, 0.11%)</title><rect x="1188" y="68" width="1" height="15" fill="rgb(234,102,9)"/><text x="1191.00" y="78.50"></text></g><g><title>drop (pandas/core/generic.py:3780) (43 samples, 0.11%)</title><rect x="1188" y="84" width="1" height="15" fill="rgb(236,15,15)"/><text x="1191.00" y="94.50"></text></g><g><title>all (38,914 samples, 100%)</title><rect x="10" y="36" width="1180" height="15" fill="rgb(254,29,43)"/><text x="13.00" y="46.50"></text></g></g></svg>
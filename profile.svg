<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="502" onload="init(evt)" viewBox="0 0 1200 502" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    searching = 0;
}

window.addEventListener("click", function(e) {
	var target = find_group(e.target);
	if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);
    }
    else if (e.target.id == "unzoom") unzoom();
    else if (e.target.id == "search") search_prompt();
}, false)

// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
	var target = find_group(e.target);
	if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
	var target = find_group(e.target);
	if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function find_child(node, selector) {
	var children = node.querySelectorAll(selector);
	if (children.length) return children[0];
	return;
}
function find_group(node) {
	var parent = node.parentElement;
	if (!parent) return;
	if (parent.id == "frames") return node;
	return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) -3;
    var txt = find_child(e, "title").textContent.replace(/\\([^(]*\\)\$/,"");
    t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
        return;
    for (var x = txt.length - 2; x > 0; x--) {
        if (t.getSubStringLength(0, x + 2) <= w) {
            t.textContent = txt.substring(0, x) + "..";
            return;
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - xpad) * ratio + xpad;
            if(e.tagName == "text")
                e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x - xpad, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = xpad;
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = parseInt(svg.width.baseVal.value) - (xpad*2);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = parseFloat(xmin + width);
    var ymin = parseFloat(attr.y.value);
    var ratio = (svg.width.baseVal.value - 2 * xpad) / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.0001;
    unzoombtn.classList.remove("hide");
    var el = document.getElementById("frames").children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = document.getElementById("frames").children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = document.getElementById("frames").children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;	// JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
]]></script><rect x="0" y="0" width="1200" height="502" fill="url(#background)"/><text id="title" x="600.00" y="24.00">py-spy</text><text id="details" x="10.00" y="485.00"> </text><text id="unzoom" class="hide" x="10.00" y="24.00">Reset Zoom</text><text id="search" x="1090.00" y="24.00">Search</text><text id="matched" x="1090.00" y="485.00"> </text><g id="frames"><g><title>main (site.py:579) (1 samples, 20.00%)</title><rect x="10" y="148" width="236" height="15" fill="rgb(217,173,51)"/><text x="13.00" y="158.50">main (site.py:579)</text></g><g><title>execsitecustomize (site.py:518) (1 samples, 20.00%)</title><rect x="10" y="164" width="236" height="15" fill="rgb(216,72,48)"/><text x="13.00" y="174.50">execsitecustomize (site.py:518)</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 20.00%)</title><rect x="10" y="180" width="236" height="15" fill="rgb(244,2,30)"/><text x="13.00" y="190.50">_find_and_load (&lt;frozen importl..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 20.00%)</title><rect x="10" y="196" width="236" height="15" fill="rgb(245,179,48)"/><text x="13.00" y="206.50">_find_and_load_unlocked (&lt;froze..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 20.00%)</title><rect x="10" y="212" width="236" height="15" fill="rgb(218,197,21)"/><text x="13.00" y="222.50">_load_unlocked (&lt;frozen importl..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 20.00%)</title><rect x="10" y="228" width="236" height="15" fill="rgb(209,97,8)"/><text x="13.00" y="238.50">exec_module (&lt;frozen importlib...</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 20.00%)</title><rect x="10" y="244" width="236" height="15" fill="rgb(236,126,31)"/><text x="13.00" y="254.50">_call_with_frames_removed (&lt;fro..</text></g><g><title>&lt;module&gt; (sitecustomize.py:4) (1 samples, 20.00%)</title><rect x="10" y="260" width="236" height="15" fill="rgb(250,131,38)"/><text x="13.00" y="270.50">&lt;module&gt; (sitecustomize.py:4)</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 20.00%)</title><rect x="10" y="276" width="236" height="15" fill="rgb(218,1,16)"/><text x="13.00" y="286.50">_find_and_load (&lt;frozen importl..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 20.00%)</title><rect x="10" y="292" width="236" height="15" fill="rgb(245,39,33)"/><text x="13.00" y="302.50">_find_and_load_unlocked (&lt;froze..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 20.00%)</title><rect x="10" y="308" width="236" height="15" fill="rgb(250,128,44)"/><text x="13.00" y="318.50">_load_unlocked (&lt;frozen importl..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 20.00%)</title><rect x="10" y="324" width="236" height="15" fill="rgb(208,80,18)"/><text x="13.00" y="334.50">exec_module (&lt;frozen importlib...</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 20.00%)</title><rect x="10" y="340" width="236" height="15" fill="rgb(225,172,44)"/><text x="13.00" y="350.50">_call_with_frames_removed (&lt;fro..</text></g><g><title>&lt;module&gt; (re.py:319) (1 samples, 20.00%)</title><rect x="10" y="356" width="236" height="15" fill="rgb(211,106,35)"/><text x="13.00" y="366.50">&lt;module&gt; (re.py:319)</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 20.00%)</title><rect x="10" y="372" width="236" height="15" fill="rgb(220,79,18)"/><text x="13.00" y="382.50">_find_and_load (&lt;frozen importl..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 20.00%)</title><rect x="10" y="388" width="236" height="15" fill="rgb(211,6,36)"/><text x="13.00" y="398.50">_find_and_load_unlocked (&lt;froze..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 20.00%)</title><rect x="10" y="404" width="236" height="15" fill="rgb(224,84,7)"/><text x="13.00" y="414.50">_load_unlocked (&lt;frozen importl..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:724) (1 samples, 20.00%)</title><rect x="10" y="420" width="236" height="15" fill="rgb(241,86,5)"/><text x="13.00" y="430.50">exec_module (&lt;frozen importlib...</text></g><g><title>get_code (&lt;frozen importlib._bootstrap_external&gt;:818) (1 samples, 20.00%)</title><rect x="10" y="436" width="236" height="15" fill="rgb(210,144,0)"/><text x="13.00" y="446.50">get_code (&lt;frozen importlib._bo..</text></g><g><title>get_data (&lt;frozen importlib._bootstrap_external&gt;:917) (1 samples, 20.00%)</title><rect x="10" y="452" width="236" height="15" fill="rgb(219,77,35)"/><text x="13.00" y="462.50">get_data (&lt;frozen importlib._bo..</text></g><g><title>all (5 samples, 100%)</title><rect x="10" y="36" width="1180" height="15" fill="rgb(221,125,16)"/><text x="13.00" y="46.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 100.00%)</title><rect x="10" y="52" width="1180" height="15" fill="rgb(237,8,42)"/><text x="13.00" y="62.50">_find_and_load (&lt;frozen importlib._bootstrap&gt;:983)</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (5 samples, 100.00%)</title><rect x="10" y="68" width="1180" height="15" fill="rgb(248,73,1)"/><text x="13.00" y="78.50">_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967)</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (5 samples, 100.00%)</title><rect x="10" y="84" width="1180" height="15" fill="rgb(205,187,35)"/><text x="13.00" y="94.50">_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677)</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (5 samples, 100.00%)</title><rect x="10" y="100" width="1180" height="15" fill="rgb(242,44,45)"/><text x="13.00" y="110.50">exec_module (&lt;frozen importlib._bootstrap_external&gt;:728)</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 100.00%)</title><rect x="10" y="116" width="1180" height="15" fill="rgb(242,191,38)"/><text x="13.00" y="126.50">_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219)</text></g><g><title>&lt;module&gt; (site.py:586) (5 samples, 100.00%)</title><rect x="10" y="132" width="1180" height="15" fill="rgb(235,227,45)"/><text x="13.00" y="142.50">&lt;module&gt; (site.py:586)</text></g><g><title>main (site.py:581) (4 samples, 80.00%)</title><rect x="246" y="148" width="944" height="15" fill="rgb(221,162,9)"/><text x="249.00" y="158.50">main (site.py:581)</text></g><g><title>execusercustomize (site.py:538) (4 samples, 80.00%)</title><rect x="246" y="164" width="944" height="15" fill="rgb(244,24,5)"/><text x="249.00" y="174.50">execusercustomize (site.py:538)</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 80.00%)</title><rect x="246" y="180" width="944" height="15" fill="rgb(243,59,26)"/><text x="249.00" y="190.50">_find_and_load (&lt;frozen importlib._bootstrap&gt;:983)</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:963) (4 samples, 80.00%)</title><rect x="246" y="196" width="944" height="15" fill="rgb(235,11,39)"/><text x="249.00" y="206.50">_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:963)</text></g><g><title>_find_spec (&lt;frozen importlib._bootstrap&gt;:906) (4 samples, 80.00%)</title><rect x="246" y="212" width="944" height="15" fill="rgb(242,122,46)"/><text x="249.00" y="222.50">_find_spec (&lt;frozen importlib._bootstrap&gt;:906)</text></g><g><title>find_spec (&lt;frozen importlib._bootstrap_external&gt;:1280) (4 samples, 80.00%)</title><rect x="246" y="228" width="944" height="15" fill="rgb(214,225,13)"/><text x="249.00" y="238.50">find_spec (&lt;frozen importlib._bootstrap_external&gt;:1280)</text></g><g><title>_get_spec (&lt;frozen importlib._bootstrap_external&gt;:1252) (4 samples, 80.00%)</title><rect x="246" y="244" width="944" height="15" fill="rgb(245,159,43)"/><text x="249.00" y="254.50">_get_spec (&lt;frozen importlib._bootstrap_external&gt;:1252)</text></g><g><title>find_spec (&lt;frozen importlib._bootstrap_external&gt;:1368) (4 samples, 80.00%)</title><rect x="246" y="260" width="944" height="15" fill="rgb(227,161,4)"/><text x="249.00" y="270.50">find_spec (&lt;frozen importlib._bootstrap_external&gt;:1368)</text></g><g><title>_fill_cache (&lt;frozen importlib._bootstrap_external&gt;:1408) (4 samples, 80.00%)</title><rect x="246" y="276" width="944" height="15" fill="rgb(253,66,18)"/><text x="249.00" y="286.50">_fill_cache (&lt;frozen importlib._bootstrap_external&gt;:1408)</text></g></g></svg>
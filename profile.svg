<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="454" onload="init(evt)" viewBox="0 0 1200 454" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    searching = 0;
}

window.addEventListener("click", function(e) {
	var target = find_group(e.target);
	if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);
    }
    else if (e.target.id == "unzoom") unzoom();
    else if (e.target.id == "search") search_prompt();
}, false)

// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
	var target = find_group(e.target);
	if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
	var target = find_group(e.target);
	if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function find_child(node, selector) {
	var children = node.querySelectorAll(selector);
	if (children.length) return children[0];
	return;
}
function find_group(node) {
	var parent = node.parentElement;
	if (!parent) return;
	if (parent.id == "frames") return node;
	return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) -3;
    var txt = find_child(e, "title").textContent.replace(/\\([^(]*\\)\$/,"");
    t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
        return;
    for (var x = txt.length - 2; x > 0; x--) {
        if (t.getSubStringLength(0, x + 2) <= w) {
            t.textContent = txt.substring(0, x) + "..";
            return;
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - xpad) * ratio + xpad;
            if(e.tagName == "text")
                e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x - xpad, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = xpad;
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = parseInt(svg.width.baseVal.value) - (xpad*2);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = parseFloat(xmin + width);
    var ymin = parseFloat(attr.y.value);
    var ratio = (svg.width.baseVal.value - 2 * xpad) / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.0001;
    unzoombtn.classList.remove("hide");
    var el = document.getElementById("frames").children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = document.getElementById("frames").children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = document.getElementById("frames").children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;	// JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
]]></script><rect x="0" y="0" width="1200" height="454" fill="url(#background)"/><text id="title" x="600.00" y="24.00">py-spy</text><text id="details" x="10.00" y="437.00"> </text><text id="unzoom" class="hide" x="10.00" y="24.00">Reset Zoom</text><text id="search" x="1090.00" y="24.00">Search</text><text id="matched" x="1090.00" y="437.00"> </text><g id="frames"><g><title>_factorize_array (pandas/core/algorithms.py:456) (309 samples, 1.08%)</title><rect x="22" y="228" width="13" height="15" fill="rgb(234,207,17)"/><text x="25.00" y="238.50"></text></g><g><title>_get_data_algo (pandas/core/algorithms.py:228) (309 samples, 1.08%)</title><rect x="22" y="244" width="13" height="15" fill="rgb(224,208,26)"/><text x="25.00" y="254.50"></text></g><g><title>_factorize_array (pandas/core/algorithms.py:458) (45 samples, 0.16%)</title><rect x="35" y="228" width="1" height="15" fill="rgb(219,155,16)"/><text x="38.00" y="238.50"></text></g><g><title>_factorize_array (pandas/core/algorithms.py:460) (923 samples, 3.23%)</title><rect x="36" y="228" width="39" height="15" fill="rgb(254,97,0)"/><text x="39.00" y="238.50">_fa..</text></g><g><title>factorize (pandas/core/algorithms.py:613) (1,348 samples, 4.72%)</title><rect x="19" y="212" width="56" height="15" fill="rgb(250,30,35)"/><text x="22.00" y="222.50">facto..</text></g><g><title>duplicated (pandas/core/frame.py:4687) (1,374 samples, 4.81%)</title><rect x="19" y="164" width="56" height="15" fill="rgb(206,42,15)"/><text x="22.00" y="174.50">dupli..</text></g><g><title>f (pandas/core/frame.py:4668) (1,372 samples, 4.81%)</title><rect x="19" y="180" width="56" height="15" fill="rgb(253,22,16)"/><text x="22.00" y="190.50">f (pa..</text></g><g><title>wrapper (pandas/util/_decorators.py:188) (1,371 samples, 4.80%)</title><rect x="19" y="196" width="56" height="15" fill="rgb(207,6,40)"/><text x="22.00" y="206.50">wrapp..</text></g><g><title>get_group_index (pandas/core/sorting.py:62) (51 samples, 0.18%)</title><rect x="75" y="180" width="3" height="15" fill="rgb(228,16,3)"/><text x="78.00" y="190.50"></text></g><g><title>maybe_lift (pandas/core/sorting.py:58) (51 samples, 0.18%)</title><rect x="75" y="196" width="3" height="15" fill="rgb(210,9,48)"/><text x="78.00" y="206.50"></text></g><g><title>get_group_index (pandas/core/sorting.py:75) (25 samples, 0.09%)</title><rect x="78" y="180" width="1" height="15" fill="rgb(211,146,34)"/><text x="81.00" y="190.50"></text></g><g><title>get_group_index (pandas/core/sorting.py:82) (111 samples, 0.39%)</title><rect x="79" y="180" width="4" height="15" fill="rgb(253,200,22)"/><text x="82.00" y="190.50"></text></g><g><title>duplicated (pandas/core/frame.py:4689) (215 samples, 0.75%)</title><rect x="75" y="164" width="9" height="15" fill="rgb(227,89,45)"/><text x="78.00" y="174.50"></text></g><g><title>drop_duplicates (pandas/core/frame.py:4630) (1,837 samples, 6.43%)</title><rect x="17" y="148" width="76" height="15" fill="rgb(221,105,8)"/><text x="20.00" y="158.50">drop_dup..</text></g><g><title>duplicated (pandas/core/frame.py:4690) (208 samples, 0.73%)</title><rect x="84" y="164" width="9" height="15" fill="rgb(231,103,51)"/><text x="87.00" y="174.50"></text></g><g><title>take_nd (pandas/core/algorithms.py:1651) (58 samples, 0.20%)</title><rect x="94" y="276" width="3" height="15" fill="rgb(245,144,25)"/><text x="97.00" y="286.50"></text></g><g><title>take_nd (pandas/core/internals/blocks.py:1238) (170 samples, 0.60%)</title><rect x="94" y="260" width="7" height="15" fill="rgb(218,100,30)"/><text x="97.00" y="270.50"></text></g><g><title>take_nd (pandas/core/algorithms.py:1655) (111 samples, 0.39%)</title><rect x="97" y="276" width="4" height="15" fill="rgb(229,104,50)"/><text x="100.00" y="286.50"></text></g><g><title>_take (pandas/core/generic.py:3359) (192 samples, 0.67%)</title><rect x="93" y="196" width="8" height="15" fill="rgb(214,115,17)"/><text x="96.00" y="206.50"></text></g><g><title>take (pandas/core/internals/managers.py:1350) (172 samples, 0.60%)</title><rect x="94" y="212" width="7" height="15" fill="rgb(222,3,36)"/><text x="97.00" y="222.50"></text></g><g><title>reindex_indexer (pandas/core/internals/managers.py:1235) (172 samples, 0.60%)</title><rect x="94" y="228" width="7" height="15" fill="rgb(243,15,39)"/><text x="97.00" y="238.50"></text></g><g><title>&lt;listcomp&gt; (pandas/core/internals/managers.py:1235) (172 samples, 0.60%)</title><rect x="94" y="244" width="7" height="15" fill="rgb(250,56,23)"/><text x="97.00" y="254.50"></text></g><g><title>__getitem__ (pandas/core/frame.py:2918) (203 samples, 0.71%)</title><rect x="93" y="164" width="8" height="15" fill="rgb(246,103,27)"/><text x="96.00" y="174.50"></text></g><g><title>_getitem_bool_array (pandas/core/frame.py:2969) (195 samples, 0.68%)</title><rect x="93" y="180" width="8" height="15" fill="rgb(220,200,5)"/><text x="96.00" y="190.50"></text></g><g><title>approximate_dependencies (dfd.py:361) (2,056 samples, 7.20%)</title><rect x="17" y="132" width="85" height="15" fill="rgb(234,217,53)"/><text x="20.00" y="142.50">approximat..</text></g><g><title>drop_duplicates (pandas/core/frame.py:4637) (213 samples, 0.75%)</title><rect x="93" y="148" width="9" height="15" fill="rgb(220,56,34)"/><text x="96.00" y="158.50"></text></g><g><title>_factorize_array (pandas/core/algorithms.py:456) (76 samples, 0.27%)</title><rect x="104" y="228" width="3" height="15" fill="rgb(246,82,30)"/><text x="107.00" y="238.50"></text></g><g><title>_get_data_algo (pandas/core/algorithms.py:228) (75 samples, 0.26%)</title><rect x="104" y="244" width="3" height="15" fill="rgb(242,110,12)"/><text x="107.00" y="254.50"></text></g><g><title>factorize (pandas/core/algorithms.py:613) (406 samples, 1.42%)</title><rect x="103" y="212" width="17" height="15" fill="rgb(243,6,16)"/><text x="106.00" y="222.50"></text></g><g><title>_factorize_array (pandas/core/algorithms.py:460) (292 samples, 1.02%)</title><rect x="108" y="228" width="12" height="15" fill="rgb(223,82,29)"/><text x="111.00" y="238.50"></text></g><g><title>duplicated (pandas/core/frame.py:4687) (430 samples, 1.51%)</title><rect x="103" y="164" width="17" height="15" fill="rgb(209,128,43)"/><text x="106.00" y="174.50"></text></g><g><title>f (pandas/core/frame.py:4668) (422 samples, 1.48%)</title><rect x="103" y="180" width="17" height="15" fill="rgb(206,213,47)"/><text x="106.00" y="190.50"></text></g><g><title>wrapper (pandas/util/_decorators.py:188) (421 samples, 1.47%)</title><rect x="103" y="196" width="17" height="15" fill="rgb(227,154,41)"/><text x="106.00" y="206.50"></text></g><g><title>duplicated (pandas/core/frame.py:4689) (60 samples, 0.21%)</title><rect x="120" y="164" width="3" height="15" fill="rgb(237,212,27)"/><text x="123.00" y="174.50"></text></g><g><title>get_group_index (pandas/core/sorting.py:82) (43 samples, 0.15%)</title><rect x="121" y="180" width="2" height="15" fill="rgb(210,111,25)"/><text x="124.00" y="190.50"></text></g><g><title>drop_duplicates (pandas/core/frame.py:4630) (627 samples, 2.20%)</title><rect x="102" y="148" width="26" height="15" fill="rgb(238,76,5)"/><text x="105.00" y="158.50">d..</text></g><g><title>duplicated (pandas/core/frame.py:4690) (115 samples, 0.40%)</title><rect x="123" y="164" width="5" height="15" fill="rgb(209,42,46)"/><text x="126.00" y="174.50"></text></g><g><title>take_nd (pandas/core/algorithms.py:1651) (56 samples, 0.20%)</title><rect x="128" y="276" width="3" height="15" fill="rgb(210,104,48)"/><text x="131.00" y="286.50"></text></g><g><title>take_nd (pandas/core/internals/blocks.py:1238) (134 samples, 0.47%)</title><rect x="128" y="260" width="6" height="15" fill="rgb(226,168,5)"/><text x="131.00" y="270.50"></text></g><g><title>take_nd (pandas/core/algorithms.py:1655) (76 samples, 0.27%)</title><rect x="131" y="276" width="3" height="15" fill="rgb(225,15,4)"/><text x="134.00" y="286.50"></text></g><g><title>reindex_indexer (pandas/core/internals/managers.py:1235) (135 samples, 0.47%)</title><rect x="128" y="228" width="6" height="15" fill="rgb(231,183,40)"/><text x="131.00" y="238.50"></text></g><g><title>&lt;listcomp&gt; (pandas/core/internals/managers.py:1235) (135 samples, 0.47%)</title><rect x="128" y="244" width="6" height="15" fill="rgb(211,41,11)"/><text x="131.00" y="254.50"></text></g><g><title>_take (pandas/core/generic.py:3359) (153 samples, 0.54%)</title><rect x="128" y="196" width="6" height="15" fill="rgb(214,21,14)"/><text x="131.00" y="206.50"></text></g><g><title>take (pandas/core/internals/managers.py:1350) (138 samples, 0.48%)</title><rect x="128" y="212" width="6" height="15" fill="rgb(205,121,21)"/><text x="131.00" y="222.50"></text></g><g><title>__getitem__ (pandas/core/frame.py:2918) (158 samples, 0.55%)</title><rect x="128" y="164" width="6" height="15" fill="rgb(223,137,52)"/><text x="131.00" y="174.50"></text></g><g><title>_getitem_bool_array (pandas/core/frame.py:2969) (156 samples, 0.55%)</title><rect x="128" y="180" width="6" height="15" fill="rgb(227,65,40)"/><text x="131.00" y="190.50"></text></g><g><title>approximate_dependencies (dfd.py:362) (795 samples, 2.78%)</title><rect x="102" y="132" width="33" height="15" fill="rgb(248,218,34)"/><text x="105.00" y="142.50">ap..</text></g><g><title>drop_duplicates (pandas/core/frame.py:4637) (166 samples, 0.58%)</title><rect x="128" y="148" width="7" height="15" fill="rgb(210,141,44)"/><text x="131.00" y="158.50"></text></g><g><title>apply (pandas/core/internals/managers.py:395) (27 samples, 0.09%)</title><rect x="136" y="260" width="1" height="15" fill="rgb(242,147,16)"/><text x="139.00" y="270.50"></text></g><g><title>copy (pandas/core/internals/blocks.py:753) (27 samples, 0.09%)</title><rect x="136" y="276" width="1" height="15" fill="rgb(231,200,46)"/><text x="139.00" y="286.50"></text></g><g><title>_drop_labels_or_levels (pandas/core/generic.py:1784) (29 samples, 0.10%)</title><rect x="136" y="212" width="1" height="15" fill="rgb(206,24,23)"/><text x="139.00" y="222.50"></text></g><g><title>copy (pandas/core/generic.py:5804) (29 samples, 0.10%)</title><rect x="136" y="228" width="1" height="15" fill="rgb(240,6,47)"/><text x="139.00" y="238.50"></text></g><g><title>copy (pandas/core/internals/managers.py:734) (29 samples, 0.10%)</title><rect x="136" y="244" width="1" height="15" fill="rgb(243,109,15)"/><text x="139.00" y="254.50"></text></g><g><title>__init__ (pandas/core/reshape/merge.py:529) (58 samples, 0.20%)</title><rect x="135" y="180" width="3" height="15" fill="rgb(246,176,16)"/><text x="138.00" y="190.50"></text></g><g><title>_get_merge_keys (pandas/core/reshape/merge.py:885) (51 samples, 0.18%)</title><rect x="135" y="196" width="3" height="15" fill="rgb(231,228,6)"/><text x="138.00" y="206.50"></text></g><g><title>merge (pandas/core/reshape/merge.py:47) (61 samples, 0.21%)</title><rect x="135" y="164" width="3" height="15" fill="rgb(218,8,40)"/><text x="138.00" y="174.50"></text></g><g><title>get_result (pandas/core/reshape/merge.py:544) (45 samples, 0.16%)</title><rect x="139" y="180" width="2" height="15" fill="rgb(224,10,8)"/><text x="142.00" y="190.50"></text></g><g><title>_factorize_keys (pandas/core/reshape/merge.py:1661) (227 samples, 0.80%)</title><rect x="142" y="244" width="9" height="15" fill="rgb(224,85,47)"/><text x="145.00" y="254.50"></text></g><g><title>_factorize_keys (pandas/core/reshape/merge.py:1662) (204 samples, 0.71%)</title><rect x="151" y="244" width="9" height="15" fill="rgb(234,139,19)"/><text x="154.00" y="254.50"></text></g><g><title>_get_join_indexers (pandas/core/reshape/merge.py:1130) (450 samples, 1.58%)</title><rect x="141" y="228" width="19" height="15" fill="rgb(217,101,11)"/><text x="144.00" y="238.50"></text></g><g><title>_factorize_keys (pandas/core/reshape/merge.py:1661) (59 samples, 0.21%)</title><rect x="162" y="260" width="2" height="15" fill="rgb(228,171,29)"/><text x="165.00" y="270.50"></text></g><g><title>_factorize_keys (pandas/core/reshape/merge.py:1662) (55 samples, 0.19%)</title><rect x="164" y="260" width="3" height="15" fill="rgb(223,32,39)"/><text x="167.00" y="270.50"></text></g><g><title>_get_join_keys (pandas/core/reshape/merge.py:1722) (120 samples, 0.42%)</title><rect x="162" y="244" width="5" height="15" fill="rgb(214,51,21)"/><text x="165.00" y="254.50"></text></g><g><title>_get_join_indexers (pandas/core/reshape/merge.py:1133) (169 samples, 0.59%)</title><rect x="160" y="228" width="7" height="15" fill="rgb(250,7,12)"/><text x="163.00" y="238.50"></text></g><g><title>_factorize_keys (pandas/core/reshape/merge.py:1661) (58 samples, 0.20%)</title><rect x="167" y="244" width="3" height="15" fill="rgb(205,132,34)"/><text x="170.00" y="254.50"></text></g><g><title>_factorize_keys (pandas/core/reshape/merge.py:1662) (51 samples, 0.18%)</title><rect x="170" y="244" width="2" height="15" fill="rgb(208,176,17)"/><text x="173.00" y="254.50"></text></g><g><title>_get_join_indexers (pandas/core/reshape/merge.py:1138) (117 samples, 0.41%)</title><rect x="167" y="228" width="5" height="15" fill="rgb(247,128,40)"/><text x="170.00" y="238.50"></text></g><g><title>_get_join_info (pandas/core/reshape/merge.py:756) (799 samples, 2.80%)</title><rect x="141" y="196" width="33" height="15" fill="rgb(241,96,6)"/><text x="144.00" y="206.50">_g..</text></g><g><title>_get_join_indexers (pandas/core/reshape/merge.py:735) (799 samples, 2.80%)</title><rect x="141" y="212" width="33" height="15" fill="rgb(250,208,39)"/><text x="144.00" y="222.50">_g..</text></g><g><title>_get_join_indexers (pandas/core/reshape/merge.py:1146) (42 samples, 0.15%)</title><rect x="172" y="228" width="2" height="15" fill="rgb(234,58,2)"/><text x="175.00" y="238.50"></text></g><g><title>get_result (pandas/core/reshape/merge.py:546) (803 samples, 2.81%)</title><rect x="141" y="180" width="33" height="15" fill="rgb(243,142,27)"/><text x="144.00" y="190.50">ge..</text></g><g><title>concatenate_join_units (pandas/core/internals/concat.py:242) (61 samples, 0.21%)</title><rect x="174" y="212" width="3" height="15" fill="rgb(210,74,14)"/><text x="177.00" y="222.50"></text></g><g><title>&lt;listcomp&gt; (pandas/core/internals/concat.py:242) (61 samples, 0.21%)</title><rect x="174" y="228" width="3" height="15" fill="rgb(222,9,4)"/><text x="177.00" y="238.50"></text></g><g><title>get_reindexed_values (pandas/core/internals/concat.py:225) (61 samples, 0.21%)</title><rect x="174" y="244" width="3" height="15" fill="rgb(231,35,25)"/><text x="177.00" y="254.50"></text></g><g><title>take_nd (pandas/core/algorithms.py:1655) (36 samples, 0.13%)</title><rect x="175" y="260" width="2" height="15" fill="rgb(230,173,25)"/><text x="178.00" y="270.50"></text></g><g><title>concatenate_block_managers (pandas/core/internals/managers.py:2061) (68 samples, 0.24%)</title><rect x="174" y="196" width="3" height="15" fill="rgb(207,139,15)"/><text x="177.00" y="206.50"></text></g><g><title>get_result (pandas/core/reshape/merge.py:560) (77 samples, 0.27%)</title><rect x="174" y="180" width="3" height="15" fill="rgb(235,178,1)"/><text x="177.00" y="190.50"></text></g><g><title>__init__ (pandas/core/arrays/categorical.py:383) (75 samples, 0.26%)</title><rect x="178" y="212" width="3" height="15" fill="rgb(213,130,25)"/><text x="181.00" y="222.50"></text></g><g><title>_get_codes_for_values (pandas/core/arrays/categorical.py:2593) (42 samples, 0.15%)</title><rect x="179" y="228" width="2" height="15" fill="rgb(228,129,17)"/><text x="182.00" y="238.50"></text></g><g><title>_indicator_post_merge (pandas/core/reshape/merge.py:605) (86 samples, 0.30%)</title><rect x="178" y="196" width="3" height="15" fill="rgb(216,36,50)"/><text x="181.00" y="206.50"></text></g><g><title>_consolidate (pandas/core/internals/managers.py:1899) (30 samples, 0.11%)</title><rect x="182" y="388" width="1" height="15" fill="rgb(210,158,28)"/><text x="185.00" y="398.50"></text></g><g><title>reindex (pandas/core/generic.py:4337) (32 samples, 0.11%)</title><rect x="182" y="292" width="1" height="15" fill="rgb(254,115,54)"/><text x="185.00" y="302.50"></text></g><g><title>_consolidate_inplace (pandas/core/generic.py:5138) (32 samples, 0.11%)</title><rect x="182" y="308" width="1" height="15" fill="rgb(226,110,49)"/><text x="185.00" y="318.50"></text></g><g><title>_protect_consolidate (pandas/core/generic.py:5127) (32 samples, 0.11%)</title><rect x="182" y="324" width="1" height="15" fill="rgb(242,224,46)"/><text x="185.00" y="334.50"></text></g><g><title>f (pandas/core/generic.py:5136) (32 samples, 0.11%)</title><rect x="182" y="340" width="1" height="15" fill="rgb(243,150,16)"/><text x="185.00" y="350.50"></text></g><g><title>consolidate (pandas/core/internals/managers.py:924) (31 samples, 0.11%)</title><rect x="182" y="356" width="1" height="15" fill="rgb(210,60,4)"/><text x="185.00" y="366.50"></text></g><g><title>_consolidate_inplace (pandas/core/internals/managers.py:929) (31 samples, 0.11%)</title><rect x="182" y="372" width="1" height="15" fill="rgb(240,156,41)"/><text x="185.00" y="382.50"></text></g><g><title>take_nd (pandas/core/algorithms.py:1651) (30 samples, 0.11%)</title><rect x="183" y="404" width="2" height="15" fill="rgb(237,171,4)"/><text x="186.00" y="414.50"></text></g><g><title>reindex_indexer (pandas/core/internals/managers.py:1231) (63 samples, 0.22%)</title><rect x="183" y="356" width="3" height="15" fill="rgb(236,138,1)"/><text x="186.00" y="366.50"></text></g><g><title>_slice_take_blocks_ax0 (pandas/core/internals/managers.py:1312) (59 samples, 0.21%)</title><rect x="183" y="372" width="3" height="15" fill="rgb(226,43,1)"/><text x="186.00" y="382.50"></text></g><g><title>take_nd (pandas/core/internals/blocks.py:1234) (59 samples, 0.21%)</title><rect x="183" y="388" width="3" height="15" fill="rgb(205,95,22)"/><text x="186.00" y="398.50"></text></g><g><title>take_nd (pandas/core/algorithms.py:1655) (28 samples, 0.10%)</title><rect x="185" y="404" width="1" height="15" fill="rgb(213,195,50)"/><text x="188.00" y="414.50"></text></g><g><title>get_result (pandas/core/reshape/merge.py:566) (212 samples, 0.74%)</title><rect x="177" y="180" width="9" height="15" fill="rgb(220,32,15)"/><text x="180.00" y="190.50"></text></g><g><title>_indicator_post_merge (pandas/core/reshape/merge.py:611) (100 samples, 0.35%)</title><rect x="182" y="196" width="4" height="15" fill="rgb(247,133,32)"/><text x="185.00" y="206.50"></text></g><g><title>drop (pandas/core/frame.py:3940) (100 samples, 0.35%)</title><rect x="182" y="212" width="4" height="15" fill="rgb(246,37,10)"/><text x="185.00" y="222.50"></text></g><g><title>drop (pandas/core/generic.py:3780) (100 samples, 0.35%)</title><rect x="182" y="228" width="4" height="15" fill="rgb(208,190,40)"/><text x="185.00" y="238.50"></text></g><g><title>_drop_axis (pandas/core/generic.py:3813) (97 samples, 0.34%)</title><rect x="182" y="244" width="4" height="15" fill="rgb(245,55,33)"/><text x="185.00" y="254.50"></text></g><g><title>wrapper (pandas/util/_decorators.py:197) (97 samples, 0.34%)</title><rect x="182" y="260" width="4" height="15" fill="rgb(217,109,24)"/><text x="185.00" y="270.50"></text></g><g><title>reindex (pandas/core/frame.py:3809) (97 samples, 0.34%)</title><rect x="182" y="276" width="4" height="15" fill="rgb(227,187,36)"/><text x="185.00" y="286.50"></text></g><g><title>reindex (pandas/core/generic.py:4356) (65 samples, 0.23%)</title><rect x="183" y="292" width="3" height="15" fill="rgb(233,9,41)"/><text x="186.00" y="302.50"></text></g><g><title>_reindex_axes (pandas/core/frame.py:3736) (65 samples, 0.23%)</title><rect x="183" y="308" width="3" height="15" fill="rgb(254,68,24)"/><text x="186.00" y="318.50"></text></g><g><title>_reindex_columns (pandas/core/frame.py:3761) (64 samples, 0.22%)</title><rect x="183" y="324" width="3" height="15" fill="rgb(217,201,45)"/><text x="186.00" y="334.50"></text></g><g><title>_reindex_with_indexers (pandas/core/generic.py:4490) (64 samples, 0.22%)</title><rect x="183" y="340" width="3" height="15" fill="rgb(230,154,1)"/><text x="186.00" y="350.50"></text></g><g><title>_maybe_add_join_keys (pandas/core/reshape/merge.py:705) (29 samples, 0.10%)</title><rect x="187" y="196" width="1" height="15" fill="rgb(249,96,49)"/><text x="190.00" y="206.50"></text></g><g><title>__new__ (pandas/core/indexes/base.py:422) (75 samples, 0.26%)</title><rect x="189" y="212" width="3" height="15" fill="rgb(207,6,23)"/><text x="192.00" y="222.50"></text></g><g><title>_maybe_add_join_keys (pandas/core/reshape/merge.py:713) (107 samples, 0.37%)</title><rect x="188" y="196" width="5" height="15" fill="rgb(230,218,20)"/><text x="191.00" y="206.50"></text></g><g><title>_set_item (pandas/core/frame.py:3445) (25 samples, 0.09%)</title><rect x="193" y="228" width="1" height="15" fill="rgb(210,228,27)"/><text x="196.00" y="238.50"></text></g><g><title>_set_item (pandas/core/generic.py:3172) (39 samples, 0.14%)</title><rect x="194" y="244" width="1" height="15" fill="rgb(245,44,11)"/><text x="197.00" y="254.50"></text></g><g><title>get_result (pandas/core/reshape/merge.py:568) (232 samples, 0.81%)</title><rect x="186" y="180" width="9" height="15" fill="rgb(238,127,2)"/><text x="189.00" y="190.50"></text></g><g><title>_maybe_add_join_keys (pandas/core/reshape/merge.py:716) (69 samples, 0.24%)</title><rect x="193" y="196" width="2" height="15" fill="rgb(243,74,43)"/><text x="196.00" y="206.50"></text></g><g><title>__setitem__ (pandas/core/frame.py:3370) (68 samples, 0.24%)</title><rect x="193" y="212" width="2" height="15" fill="rgb(237,193,24)"/><text x="196.00" y="222.50"></text></g><g><title>_set_item (pandas/core/frame.py:3446) (41 samples, 0.14%)</title><rect x="194" y="228" width="1" height="15" fill="rgb(245,114,28)"/><text x="197.00" y="238.50"></text></g><g><title>approximate_dependencies (dfd.py:370) (1,476 samples, 5.17%)</title><rect x="135" y="132" width="61" height="15" fill="rgb(236,29,31)"/><text x="138.00" y="142.50">approx..</text></g><g><title>merge (pandas/core/frame.py:6868) (1,476 samples, 5.17%)</title><rect x="135" y="148" width="61" height="15" fill="rgb(237,80,17)"/><text x="138.00" y="158.50">merge ..</text></g><g><title>merge (pandas/core/reshape/merge.py:48) (1,401 samples, 4.91%)</title><rect x="138" y="164" width="58" height="15" fill="rgb(227,162,0)"/><text x="141.00" y="174.50">merge ..</text></g><g><title>approximate_dependencies (dfd.py:371) (26 samples, 0.09%)</title><rect x="196" y="132" width="1" height="15" fill="rgb(211,175,40)"/><text x="199.00" y="142.50"></text></g><g><title>approximate_dependencies (dfd.py:372) (31 samples, 0.11%)</title><rect x="197" y="132" width="1" height="15" fill="rgb(248,114,11)"/><text x="200.00" y="142.50"></text></g><g><title>iterrows (pandas/core/frame.py:845) (33 samples, 0.12%)</title><rect x="199" y="148" width="1" height="15" fill="rgb(230,150,46)"/><text x="202.00" y="158.50"></text></g><g><title>is_list_like (pandas/core/dtypes/inference.py:293) (38 samples, 0.13%)</title><rect x="203" y="180" width="1" height="15" fill="rgb(226,181,42)"/><text x="206.00" y="190.50"></text></g><g><title>__init__ (pandas/core/series.py:240) (66 samples, 0.23%)</title><rect x="202" y="164" width="3" height="15" fill="rgb(216,46,48)"/><text x="205.00" y="174.50"></text></g><g><title>sanitize_array (pandas/core/internals/construction.py:555) (43 samples, 0.15%)</title><rect x="208" y="180" width="1" height="15" fill="rgb(251,215,41)"/><text x="211.00" y="190.50"></text></g><g><title>_name_get (numpy/core/_dtype.py:334) (32 samples, 0.11%)</title><rect x="213" y="228" width="2" height="15" fill="rgb(241,186,51)"/><text x="216.00" y="238.50"></text></g><g><title>_try_cast (pandas/core/internals/construction.py:688) (123 samples, 0.43%)</title><rect x="210" y="196" width="5" height="15" fill="rgb(217,175,34)"/><text x="213.00" y="206.50"></text></g><g><title>maybe_castable (pandas/core/dtypes/cast.py:843) (106 samples, 0.37%)</title><rect x="210" y="212" width="5" height="15" fill="rgb(241,49,34)"/><text x="213.00" y="222.50"></text></g><g><title>maybe_infer_to_datetimelike (pandas/core/dtypes/cast.py:866) (47 samples, 0.16%)</title><rect x="218" y="228" width="2" height="15" fill="rgb(221,154,42)"/><text x="221.00" y="238.50"></text></g><g><title>maybe_infer_to_datetimelike (pandas/core/dtypes/cast.py:879) (30 samples, 0.11%)</title><rect x="221" y="228" width="2" height="15" fill="rgb(211,75,27)"/><text x="224.00" y="238.50"></text></g><g><title>is_object_dtype (pandas/core/dtypes/common.py:157) (26 samples, 0.09%)</title><rect x="221" y="244" width="2" height="15" fill="rgb(234,61,25)"/><text x="224.00" y="254.50"></text></g><g><title>maybe_infer_to_datetimelike (pandas/core/dtypes/cast.py:926) (27 samples, 0.09%)</title><rect x="223" y="228" width="1" height="15" fill="rgb(241,145,42)"/><text x="226.00" y="238.50"></text></g><g><title>maybe_cast_to_datetime (pandas/core/dtypes/cast.py:1067) (179 samples, 0.63%)</title><rect x="217" y="212" width="7" height="15" fill="rgb(244,128,7)"/><text x="220.00" y="222.50"></text></g><g><title>maybe_cast_to_datetime (pandas/core/dtypes/cast.py:957) (42 samples, 0.15%)</title><rect x="224" y="212" width="2" height="15" fill="rgb(224,162,43)"/><text x="227.00" y="222.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;:1019) (26 samples, 0.09%)</title><rect x="225" y="228" width="1" height="15" fill="rgb(238,32,18)"/><text x="228.00" y="238.50"></text></g><g><title>_try_cast (pandas/core/internals/construction.py:697) (269 samples, 0.94%)</title><rect x="216" y="196" width="11" height="15" fill="rgb(239,171,42)"/><text x="219.00" y="206.50"></text></g><g><title>is_extension_type (pandas/core/dtypes/common.py:1693) (42 samples, 0.15%)</title><rect x="228" y="212" width="2" height="15" fill="rgb(229,181,11)"/><text x="231.00" y="222.50"></text></g><g><title>is_categorical (pandas/core/dtypes/common.py:291) (38 samples, 0.13%)</title><rect x="228" y="228" width="2" height="15" fill="rgb(243,139,5)"/><text x="231.00" y="238.50"></text></g><g><title>is_sparse (pandas/core/dtypes/common.py:216) (27 samples, 0.09%)</title><rect x="230" y="228" width="1" height="15" fill="rgb(247,224,38)"/><text x="233.00" y="238.50"></text></g><g><title>is_extension_type (pandas/core/dtypes/common.py:1695) (39 samples, 0.14%)</title><rect x="230" y="212" width="1" height="15" fill="rgb(246,11,15)"/><text x="233.00" y="222.50"></text></g><g><title>_try_cast (pandas/core/internals/construction.py:704) (110 samples, 0.39%)</title><rect x="228" y="196" width="4" height="15" fill="rgb(220,147,19)"/><text x="231.00" y="206.50"></text></g><g><title>is_extension_type (pandas/core/dtypes/common.py:1697) (27 samples, 0.09%)</title><rect x="231" y="212" width="1" height="15" fill="rgb(252,10,29)"/><text x="234.00" y="222.50"></text></g><g><title>sanitize_array (pandas/core/internals/construction.py:582) (568 samples, 1.99%)</title><rect x="209" y="180" width="24" height="15" fill="rgb(247,124,11)"/><text x="212.00" y="190.50">s..</text></g><g><title>_name_get (numpy/core/_dtype.py:334) (42 samples, 0.15%)</title><rect x="243" y="196" width="2" height="15" fill="rgb(254,135,0)"/><text x="246.00" y="206.50"></text></g><g><title>sanitize_array (pandas/core/internals/construction.py:674) (257 samples, 0.90%)</title><rect x="234" y="180" width="11" height="15" fill="rgb(217,156,48)"/><text x="237.00" y="190.50"></text></g><g><title>__init__ (pandas/core/series.py:262) (945 samples, 3.31%)</title><rect x="206" y="164" width="39" height="15" fill="rgb(244,124,47)"/><text x="209.00" y="174.50">__i..</text></g><g><title>get_block_type (pandas/core/internals/blocks.py:3050) (33 samples, 0.12%)</title><rect x="248" y="212" width="2" height="15" fill="rgb(240,176,19)"/><text x="251.00" y="222.50"></text></g><g><title>get_block_type (pandas/core/internals/blocks.py:3053) (45 samples, 0.16%)</title><rect x="250" y="212" width="1" height="15" fill="rgb(216,119,17)"/><text x="253.00" y="222.50"></text></g><g><title>is_categorical (pandas/core/dtypes/common.py:291) (39 samples, 0.14%)</title><rect x="250" y="228" width="1" height="15" fill="rgb(244,28,24)"/><text x="253.00" y="238.50"></text></g><g><title>is_categorical_dtype (pandas/core/dtypes/common.py:602) (27 samples, 0.09%)</title><rect x="250" y="244" width="1" height="15" fill="rgb(212,117,43)"/><text x="253.00" y="254.50"></text></g><g><title>is_interval_dtype (pandas/core/dtypes/common.py:569) (35 samples, 0.12%)</title><rect x="253" y="228" width="1" height="15" fill="rgb(228,38,21)"/><text x="256.00" y="238.50"></text></g><g><title>is_dtype (pandas/core/dtypes/dtypes.py:991) (29 samples, 0.10%)</title><rect x="253" y="244" width="1" height="15" fill="rgb(250,161,20)"/><text x="256.00" y="254.50"></text></g><g><title>get_block_type (pandas/core/internals/blocks.py:3060) (72 samples, 0.25%)</title><rect x="252" y="212" width="3" height="15" fill="rgb(251,144,42)"/><text x="255.00" y="222.50"></text></g><g><title>is_period_dtype (pandas/core/dtypes/common.py:533) (32 samples, 0.11%)</title><rect x="254" y="228" width="1" height="15" fill="rgb(217,20,46)"/><text x="257.00" y="238.50"></text></g><g><title>make_block (pandas/core/internals/blocks.py:3088) (232 samples, 0.81%)</title><rect x="248" y="196" width="9" height="15" fill="rgb(237,185,7)"/><text x="251.00" y="206.50"></text></g><g><title>__init__ (pandas/core/internals/managers.py:1481) (326 samples, 1.14%)</title><rect x="247" y="180" width="13" height="15" fill="rgb(229,212,27)"/><text x="250.00" y="190.50"></text></g><g><title>make_block (pandas/core/internals/blocks.py:3095) (71 samples, 0.25%)</title><rect x="257" y="196" width="3" height="15" fill="rgb(216,65,52)"/><text x="260.00" y="206.50"></text></g><g><title>__init__ (pandas/core/internals/blocks.py:2631) (48 samples, 0.17%)</title><rect x="258" y="212" width="2" height="15" fill="rgb(235,39,5)"/><text x="261.00" y="222.50"></text></g><g><title>__init__ (pandas/core/series.py:264) (370 samples, 1.30%)</title><rect x="245" y="164" width="15" height="15" fill="rgb(245,11,6)"/><text x="248.00" y="174.50"></text></g><g><title>__init__ (pandas/core/series.py:266) (30 samples, 0.11%)</title><rect x="260" y="164" width="2" height="15" fill="rgb(220,142,12)"/><text x="263.00" y="174.50"></text></g><g><title>__setattr__ (pandas/core/generic.py:5079) (52 samples, 0.18%)</title><rect x="262" y="180" width="2" height="15" fill="rgb(223,141,9)"/><text x="265.00" y="190.50"></text></g><g><title>name (pandas/core/series.py:397) (38 samples, 0.13%)</title><rect x="262" y="196" width="2" height="15" fill="rgb(237,13,0)"/><text x="265.00" y="206.50"></text></g><g><title>__init__ (pandas/core/series.py:268) (91 samples, 0.32%)</title><rect x="262" y="164" width="3" height="15" fill="rgb(230,127,1)"/><text x="265.00" y="174.50"></text></g><g><title>approximate_dependencies (dfd.py:375) (1,674 samples, 5.86%)</title><rect x="198" y="132" width="69" height="15" fill="rgb(248,192,40)"/><text x="201.00" y="142.50">approxi..</text></g><g><title>iterrows (pandas/core/frame.py:846) (1,615 samples, 5.66%)</title><rect x="200" y="148" width="67" height="15" fill="rgb(207,176,13)"/><text x="203.00" y="158.50">iterrow..</text></g><g><title>__init__ (pandas/core/series.py:269) (40 samples, 0.14%)</title><rect x="265" y="164" width="2" height="15" fill="rgb(212,119,15)"/><text x="268.00" y="174.50"></text></g><g><title>approximate_dependencies (dfd.py:377) (720 samples, 2.52%)</title><rect x="267" y="132" width="30" height="15" fill="rgb(232,133,51)"/><text x="270.00" y="142.50">ap..</text></g><g><title>__getitem__ (pandas/core/series.py:866) (59 samples, 0.21%)</title><rect x="301" y="148" width="2" height="15" fill="rgb(235,177,11)"/><text x="304.00" y="158.50"></text></g><g><title>get_value (pandas/core/indexes/base.py:4351) (83 samples, 0.29%)</title><rect x="307" y="164" width="4" height="15" fill="rgb(229,31,13)"/><text x="310.00" y="174.50"></text></g><g><title>_values (pandas/core/series.py:481) (56 samples, 0.20%)</title><rect x="308" y="180" width="3" height="15" fill="rgb(222,136,41)"/><text x="311.00" y="190.50"></text></g><g><title>internal_values (pandas/core/internals/managers.py:1550) (37 samples, 0.13%)</title><rect x="309" y="196" width="2" height="15" fill="rgb(252,218,11)"/><text x="312.00" y="206.50"></text></g><g><title>get_value (pandas/core/indexes/base.py:4352) (36 samples, 0.13%)</title><rect x="311" y="164" width="1" height="15" fill="rgb(210,52,38)"/><text x="314.00" y="174.50"></text></g><g><title>get_value (pandas/core/indexes/base.py:4369) (163 samples, 0.57%)</title><rect x="312" y="164" width="7" height="15" fill="rgb(213,108,26)"/><text x="315.00" y="174.50"></text></g><g><title>get_values (pandas/core/series.py:494) (128 samples, 0.45%)</title><rect x="313" y="180" width="6" height="15" fill="rgb(221,98,34)"/><text x="316.00" y="190.50"></text></g><g><title>get_values (pandas/core/internals/managers.py:1558) (109 samples, 0.38%)</title><rect x="314" y="196" width="5" height="15" fill="rgb(229,190,33)"/><text x="317.00" y="206.50"></text></g><g><title>to_dense (pandas/core/internals/blocks.py:185) (53 samples, 0.19%)</title><rect x="317" y="212" width="2" height="15" fill="rgb(236,76,18)"/><text x="320.00" y="222.50"></text></g><g><title>get_value (pandas/core/indexes/base.py:4370) (66 samples, 0.23%)</title><rect x="319" y="164" width="2" height="15" fill="rgb(215,145,24)"/><text x="322.00" y="174.50"></text></g><g><title>_convert_scalar_indexer (pandas/core/indexes/base.py:2856) (93 samples, 0.33%)</title><rect x="324" y="180" width="4" height="15" fill="rgb(252,84,44)"/><text x="327.00" y="190.50"></text></g><g><title>get_value (pandas/core/indexes/base.py:4372) (191 samples, 0.67%)</title><rect x="321" y="164" width="8" height="15" fill="rgb(251,105,45)"/><text x="324.00" y="174.50"></text></g><g><title>get_value (pandas/core/indexes/base.py:4374) (33 samples, 0.12%)</title><rect x="329" y="164" width="2" height="15" fill="rgb(227,226,11)"/><text x="332.00" y="174.50"></text></g><g><title>__getitem__ (pandas/core/series.py:868) (947 samples, 3.32%)</title><rect x="303" y="148" width="39" height="15" fill="rgb(212,41,1)"/><text x="306.00" y="158.50">__g..</text></g><g><title>get_value (pandas/core/indexes/base.py:4375) (274 samples, 0.96%)</title><rect x="331" y="164" width="11" height="15" fill="rgb(208,202,1)"/><text x="334.00" y="174.50"></text></g><g><title>dtype (pandas/core/series.py:411) (81 samples, 0.28%)</title><rect x="339" y="180" width="3" height="15" fill="rgb(221,63,22)"/><text x="342.00" y="190.50"></text></g><g><title>dtype (pandas/core/internals/managers.py:1524) (45 samples, 0.16%)</title><rect x="340" y="196" width="2" height="15" fill="rgb(253,14,4)"/><text x="343.00" y="206.50"></text></g><g><title>get_mask (classes.py:592) (26 samples, 0.09%)</title><rect x="343" y="148" width="1" height="15" fill="rgb(213,103,46)"/><text x="346.00" y="158.50"></text></g><g><title>approximate_dependencies (dfd.py:379) (1,131 samples, 3.96%)</title><rect x="298" y="132" width="46" height="15" fill="rgb(228,112,45)"/><text x="301.00" y="142.50">appr..</text></g><g><title>approximate_dependencies (dfd.py:381) (4,281 samples, 14.99%)</title><rect x="345" y="132" width="177" height="15" fill="rgb(249,122,14)"/><text x="348.00" y="142.50">approximate_dependencie..</text></g><g><title>__getitem__ (pandas/core/series.py:868) (29 samples, 0.10%)</title><rect x="522" y="148" width="1" height="15" fill="rgb(213,78,36)"/><text x="525.00" y="158.50"></text></g><g><title>approximate_dependencies (dfd.py:382) (35 samples, 0.12%)</title><rect x="522" y="132" width="1" height="15" fill="rgb(228,7,51)"/><text x="525.00" y="142.50"></text></g><g><title>approximate_dependencies (dfd.py:386) (5,360 samples, 18.77%)</title><rect x="523" y="132" width="222" height="15" fill="rgb(209,120,14)"/><text x="526.00" y="142.50">approximate_dependencies (dfd..</text></g><g><title>__getitem__ (pandas/core/frame.py:2898) (100 samples, 0.35%)</title><rect x="749" y="148" width="5" height="15" fill="rgb(244,172,8)"/><text x="752.00" y="158.50"></text></g><g><title>__contains__ (pandas/core/indexes/base.py:3920) (40 samples, 0.14%)</title><rect x="752" y="164" width="2" height="15" fill="rgb(211,84,52)"/><text x="755.00" y="174.50"></text></g><g><title>__getitem__ (pandas/core/frame.py:2908) (56 samples, 0.20%)</title><rect x="754" y="148" width="3" height="15" fill="rgb(229,198,27)"/><text x="757.00" y="158.50"></text></g><g><title>is_bool_indexer (pandas/core/common.py:117) (37 samples, 0.13%)</title><rect x="757" y="164" width="2" height="15" fill="rgb(211,125,46)"/><text x="760.00" y="174.50"></text></g><g><title>is_bool_indexer (pandas/core/common.py:119) (27 samples, 0.09%)</title><rect x="759" y="164" width="1" height="15" fill="rgb(242,65,17)"/><text x="762.00" y="174.50"></text></g><g><title>is_bool_dtype (pandas/core/dtypes/common.py:1628) (26 samples, 0.09%)</title><rect x="762" y="180" width="1" height="15" fill="rgb(214,219,37)"/><text x="765.00" y="190.50"></text></g><g><title>is_bool_dtype (pandas/core/dtypes/common.py:1636) (42 samples, 0.15%)</title><rect x="763" y="180" width="2" height="15" fill="rgb(244,205,32)"/><text x="766.00" y="190.50"></text></g><g><title>is_extension_array_dtype (pandas/core/dtypes/common.py:1749) (31 samples, 0.11%)</title><rect x="764" y="196" width="1" height="15" fill="rgb(225,224,45)"/><text x="767.00" y="206.50"></text></g><g><title>is_bool_indexer (pandas/core/common.py:127) (134 samples, 0.47%)</title><rect x="760" y="164" width="6" height="15" fill="rgb(210,18,13)"/><text x="763.00" y="174.50"></text></g><g><title>__getitem__ (pandas/core/frame.py:2917) (231 samples, 0.81%)</title><rect x="757" y="148" width="9" height="15" fill="rgb(231,117,46)"/><text x="760.00" y="158.50"></text></g><g><title>_getitem_bool_array (pandas/core/frame.py:2961) (43 samples, 0.15%)</title><rect x="768" y="164" width="2" height="15" fill="rgb(222,188,15)"/><text x="771.00" y="174.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;:1019) (29 samples, 0.10%)</title><rect x="772" y="212" width="1" height="15" fill="rgb(205,197,10)"/><text x="775.00" y="222.50"></text></g><g><title>is_sparse (pandas/core/dtypes/common.py:216) (62 samples, 0.22%)</title><rect x="771" y="196" width="3" height="15" fill="rgb(222,101,14)"/><text x="774.00" y="206.50"></text></g><g><title>check_bool_indexer (pandas/core/indexing.py:2490) (76 samples, 0.27%)</title><rect x="771" y="180" width="3" height="15" fill="rgb(208,166,26)"/><text x="774.00" y="190.50"></text></g><g><title>_getitem_bool_array (pandas/core/frame.py:2967) (149 samples, 0.52%)</title><rect x="770" y="164" width="6" height="15" fill="rgb(223,38,25)"/><text x="773.00" y="174.50"></text></g><g><title>check_bool_indexer (pandas/core/indexing.py:2496) (53 samples, 0.19%)</title><rect x="774" y="180" width="2" height="15" fill="rgb(207,170,17)"/><text x="777.00" y="190.50"></text></g><g><title>asarray (numpy/core/numeric.py:538) (35 samples, 0.12%)</title><rect x="775" y="196" width="1" height="15" fill="rgb(209,108,5)"/><text x="778.00" y="206.50"></text></g><g><title>_getitem_bool_array (pandas/core/frame.py:2968) (1,415 samples, 4.96%)</title><rect x="776" y="164" width="59" height="15" fill="rgb(206,157,15)"/><text x="779.00" y="174.50">_getit..</text></g><g><title>_protect_consolidate (pandas/core/generic.py:5127) (56 samples, 0.20%)</title><rect x="837" y="212" width="2" height="15" fill="rgb(250,108,39)"/><text x="840.00" y="222.50"></text></g><g><title>f (pandas/core/generic.py:5136) (50 samples, 0.18%)</title><rect x="837" y="228" width="2" height="15" fill="rgb(253,42,15)"/><text x="840.00" y="238.50"></text></g><g><title>_take (pandas/core/generic.py:3355) (99 samples, 0.35%)</title><rect x="835" y="180" width="4" height="15" fill="rgb(232,215,44)"/><text x="838.00" y="190.50"></text></g><g><title>_consolidate_inplace (pandas/core/generic.py:5138) (75 samples, 0.26%)</title><rect x="836" y="196" width="3" height="15" fill="rgb(221,188,39)"/><text x="839.00" y="206.50"></text></g><g><title>_get_block_manager_axis (pandas/core/generic.py:384) (37 samples, 0.13%)</title><rect x="840" y="196" width="2" height="15" fill="rgb(245,198,9)"/><text x="843.00" y="206.50"></text></g><g><title>_take (pandas/core/generic.py:3358) (58 samples, 0.20%)</title><rect x="840" y="180" width="2" height="15" fill="rgb(207,32,5)"/><text x="843.00" y="190.50"></text></g><g><title>take (pandas/core/internals/managers.py:1337) (83 samples, 0.29%)</title><rect x="844" y="196" width="3" height="15" fill="rgb(230,101,5)"/><text x="847.00" y="206.50"></text></g><g><title>asanyarray (numpy/core/numeric.py:591) (78 samples, 0.27%)</title><rect x="844" y="212" width="3" height="15" fill="rgb(213,5,31)"/><text x="847.00" y="222.50"></text></g><g><title>take (pandas/core/internals/managers.py:1339) (78 samples, 0.27%)</title><rect x="847" y="196" width="3" height="15" fill="rgb(242,124,11)"/><text x="850.00" y="206.50"></text></g><g><title>shape (pandas/core/internals/managers.py:141) (75 samples, 0.26%)</title><rect x="847" y="212" width="3" height="15" fill="rgb(207,136,51)"/><text x="850.00" y="222.50"></text></g><g><title>&lt;genexpr&gt; (pandas/core/internals/managers.py:141) (41 samples, 0.14%)</title><rect x="849" y="228" width="1" height="15" fill="rgb(233,127,2)"/><text x="852.00" y="238.50"></text></g><g><title>maybe_convert_indices (pandas/core/indexing.py:2608) (82 samples, 0.29%)</title><rect x="851" y="212" width="4" height="15" fill="rgb(230,185,1)"/><text x="854.00" y="222.50"></text></g><g><title>maybe_convert_indices (pandas/core/indexing.py:2609) (142 samples, 0.50%)</title><rect x="855" y="212" width="5" height="15" fill="rgb(209,199,51)"/><text x="858.00" y="222.50"></text></g><g><title>_any (numpy/core/_methods.py:43) (121 samples, 0.42%)</title><rect x="855" y="228" width="5" height="15" fill="rgb(233,34,29)"/><text x="858.00" y="238.50"></text></g><g><title>maybe_convert_indices (pandas/core/indexing.py:2613) (66 samples, 0.23%)</title><rect x="860" y="212" width="3" height="15" fill="rgb(229,55,42)"/><text x="863.00" y="222.50"></text></g><g><title>take (pandas/core/internals/managers.py:1341) (343 samples, 1.20%)</title><rect x="850" y="196" width="15" height="15" fill="rgb(248,225,38)"/><text x="853.00" y="206.50"></text></g><g><title>maybe_convert_indices (pandas/core/indexing.py:2614) (34 samples, 0.12%)</title><rect x="863" y="212" width="2" height="15" fill="rgb(219,112,16)"/><text x="866.00" y="222.50"></text></g><g><title>_any (numpy/core/_methods.py:43) (28 samples, 0.10%)</title><rect x="863" y="228" width="2" height="15" fill="rgb(209,15,14)"/><text x="866.00" y="238.50"></text></g><g><title>take (pandas/core/internals/managers.py:1344) (57 samples, 0.20%)</title><rect x="865" y="196" width="2" height="15" fill="rgb(232,224,32)"/><text x="868.00" y="206.50"></text></g><g><title>take (pandas/core/indexes/base.py:799) (48 samples, 0.17%)</title><rect x="868" y="212" width="2" height="15" fill="rgb(233,206,0)"/><text x="871.00" y="222.50"></text></g><g><title>_shallow_copy_with_infer (pandas/core/indexes/base.py:597) (36 samples, 0.13%)</title><rect x="873" y="244" width="1" height="15" fill="rgb(218,121,24)"/><text x="876.00" y="254.50"></text></g><g><title>__new__ (pandas/core/indexes/base.py:266) (84 samples, 0.29%)</title><rect x="876" y="260" width="4" height="15" fill="rgb(254,86,44)"/><text x="879.00" y="270.50"></text></g><g><title>is_dtype (pandas/core/dtypes/base.py:101) (33 samples, 0.12%)</title><rect x="882" y="292" width="1" height="15" fill="rgb(238,145,46)"/><text x="885.00" y="302.50"></text></g><g><title>__new__ (pandas/core/indexes/base.py:279) (57 samples, 0.20%)</title><rect x="881" y="260" width="2" height="15" fill="rgb(252,107,30)"/><text x="884.00" y="270.50"></text></g><g><title>is_categorical_dtype (pandas/core/dtypes/common.py:602) (48 samples, 0.17%)</title><rect x="881" y="276" width="2" height="15" fill="rgb(221,3,47)"/><text x="884.00" y="286.50"></text></g><g><title>__new__ (pandas/core/indexes/base.py:285) (76 samples, 0.27%)</title><rect x="883" y="260" width="3" height="15" fill="rgb(239,88,3)"/><text x="886.00" y="270.50"></text></g><g><title>is_interval_dtype (pandas/core/dtypes/common.py:569) (67 samples, 0.23%)</title><rect x="884" y="276" width="2" height="15" fill="rgb(250,26,37)"/><text x="887.00" y="286.50"></text></g><g><title>is_dtype (pandas/core/dtypes/dtypes.py:991) (49 samples, 0.17%)</title><rect x="884" y="292" width="2" height="15" fill="rgb(242,54,25)"/><text x="887.00" y="302.50"></text></g><g><title>is_datetime64_any_dtype (pandas/core/dtypes/common.py:1114) (68 samples, 0.24%)</title><rect x="887" y="276" width="3" height="15" fill="rgb(253,168,40)"/><text x="890.00" y="286.50"></text></g><g><title>is_datetime64_dtype (pandas/core/dtypes/common.py:431) (60 samples, 0.21%)</title><rect x="887" y="292" width="3" height="15" fill="rgb(223,97,21)"/><text x="890.00" y="302.50"></text></g><g><title>__new__ (pandas/core/indexes/base.py:292) (104 samples, 0.36%)</title><rect x="886" y="260" width="5" height="15" fill="rgb(215,171,46)"/><text x="889.00" y="270.50"></text></g><g><title>is_datetime64_any_dtype (pandas/core/dtypes/common.py:1115) (27 samples, 0.09%)</title><rect x="890" y="276" width="1" height="15" fill="rgb(243,170,38)"/><text x="893.00" y="286.50"></text></g><g><title>__new__ (pandas/core/indexes/base.py:311) (29 samples, 0.10%)</title><rect x="891" y="260" width="1" height="15" fill="rgb(241,221,52)"/><text x="894.00" y="270.50"></text></g><g><title>__new__ (pandas/core/indexes/base.py:324) (35 samples, 0.12%)</title><rect x="892" y="260" width="1" height="15" fill="rgb(246,32,52)"/><text x="895.00" y="270.50"></text></g><g><title>is_period_dtype (pandas/core/dtypes/common.py:533) (28 samples, 0.10%)</title><rect x="892" y="276" width="1" height="15" fill="rgb(219,150,7)"/><text x="895.00" y="286.50"></text></g><g><title>__new__ (pandas/core/indexes/base.py:330) (43 samples, 0.15%)</title><rect x="893" y="260" width="2" height="15" fill="rgb(240,51,53)"/><text x="896.00" y="270.50"></text></g><g><title>is_extension_array_dtype (pandas/core/dtypes/common.py:1749) (34 samples, 0.12%)</title><rect x="894" y="276" width="1" height="15" fill="rgb(207,108,30)"/><text x="897.00" y="286.50"></text></g><g><title>__new__ (pandas/core/indexes/base.py:399) (34 samples, 0.12%)</title><rect x="895" y="260" width="2" height="15" fill="rgb(212,139,46)"/><text x="898.00" y="270.50"></text></g><g><title>__new__ (pandas/core/indexes/base.py:402) (40 samples, 0.14%)</title><rect x="897" y="260" width="1" height="15" fill="rgb(247,83,26)"/><text x="900.00" y="270.50"></text></g><g><title>is_signed_integer_dtype (pandas/core/dtypes/common.py:977) (35 samples, 0.12%)</title><rect x="897" y="276" width="1" height="15" fill="rgb(224,172,26)"/><text x="900.00" y="286.50"></text></g><g><title>__new__ (pandas/core/indexes/base.py:403) (54 samples, 0.19%)</title><rect x="898" y="260" width="3" height="15" fill="rgb(249,0,44)"/><text x="901.00" y="270.50"></text></g><g><title>__new__ (pandas/core/indexes/numeric.py:50) (40 samples, 0.14%)</title><rect x="903" y="276" width="1" height="15" fill="rgb(221,7,13)"/><text x="906.00" y="286.50"></text></g><g><title>_simple_new (pandas/core/indexes/base.py:536) (38 samples, 0.13%)</title><rect x="906" y="292" width="2" height="15" fill="rgb(209,122,14)"/><text x="909.00" y="302.50"></text></g><g><title>iteritems (pandas/compat/__init__.py:222) (26 samples, 0.09%)</title><rect x="907" y="308" width="1" height="15" fill="rgb(239,189,40)"/><text x="910.00" y="318.50"></text></g><g><title>take (pandas/core/internals/managers.py:1348) (1,015 samples, 3.56%)</title><rect x="867" y="196" width="42" height="15" fill="rgb(219,7,45)"/><text x="870.00" y="206.50">tak..</text></g><g><title>take (pandas/core/indexes/base.py:800) (934 samples, 3.27%)</title><rect x="870" y="212" width="39" height="15" fill="rgb(215,122,50)"/><text x="873.00" y="222.50">tak..</text></g><g><title>_shallow_copy (pandas/core/indexes/numeric.py:71) (906 samples, 3.17%)</title><rect x="871" y="228" width="38" height="15" fill="rgb(211,35,24)"/><text x="874.00" y="238.50">_sh..</text></g><g><title>_shallow_copy_with_infer (pandas/core/indexes/base.py:607) (819 samples, 2.87%)</title><rect x="875" y="244" width="34" height="15" fill="rgb(210,24,40)"/><text x="878.00" y="254.50">_s..</text></g><g><title>__new__ (pandas/core/indexes/base.py:404) (200 samples, 0.70%)</title><rect x="901" y="260" width="8" height="15" fill="rgb(216,88,35)"/><text x="904.00" y="270.50"></text></g><g><title>__new__ (pandas/core/indexes/numeric.py:58) (108 samples, 0.38%)</title><rect x="904" y="276" width="5" height="15" fill="rgb(228,58,20)"/><text x="907.00" y="286.50"></text></g><g><title>take_nd (pandas/core/algorithms.py:1584) (47 samples, 0.16%)</title><rect x="915" y="260" width="2" height="15" fill="rgb(214,55,7)"/><text x="918.00" y="270.50"></text></g><g><title>is_extension_array_dtype (pandas/core/dtypes/common.py:1749) (30 samples, 0.11%)</title><rect x="915" y="276" width="2" height="15" fill="rgb(205,220,42)"/><text x="918.00" y="286.50"></text></g><g><title>is_dtype (pandas/core/dtypes/base.py:101) (42 samples, 0.15%)</title><rect x="917" y="292" width="2" height="15" fill="rgb(240,106,5)"/><text x="920.00" y="302.50"></text></g><g><title>take_nd (pandas/core/algorithms.py:1586) (58 samples, 0.20%)</title><rect x="917" y="260" width="2" height="15" fill="rgb(238,226,27)"/><text x="920.00" y="270.50"></text></g><g><title>is_datetime64tz_dtype (pandas/core/dtypes/common.py:469) (55 samples, 0.19%)</title><rect x="917" y="276" width="2" height="15" fill="rgb(220,90,27)"/><text x="920.00" y="286.50"></text></g><g><title>is_dtype (pandas/core/dtypes/base.py:101) (30 samples, 0.11%)</title><rect x="921" y="308" width="1" height="15" fill="rgb(250,193,46)"/><text x="924.00" y="318.50"></text></g><g><title>take_nd (pandas/core/algorithms.py:1588) (73 samples, 0.26%)</title><rect x="919" y="260" width="3" height="15" fill="rgb(239,153,6)"/><text x="922.00" y="270.50"></text></g><g><title>is_interval_dtype (pandas/core/dtypes/common.py:569) (67 samples, 0.23%)</title><rect x="919" y="276" width="3" height="15" fill="rgb(241,193,42)"/><text x="922.00" y="286.50"></text></g><g><title>is_dtype (pandas/core/dtypes/dtypes.py:991) (60 samples, 0.21%)</title><rect x="920" y="292" width="2" height="15" fill="rgb(226,160,9)"/><text x="923.00" y="302.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;:1019) (49 samples, 0.17%)</title><rect x="924" y="292" width="2" height="15" fill="rgb(248,168,45)"/><text x="927.00" y="302.50"></text></g><g><title>is_sparse (pandas/core/dtypes/common.py:216) (86 samples, 0.30%)</title><rect x="922" y="276" width="4" height="15" fill="rgb(253,170,51)"/><text x="925.00" y="286.50"></text></g><g><title>take_nd (pandas/core/algorithms.py:1591) (101 samples, 0.35%)</title><rect x="922" y="260" width="4" height="15" fill="rgb(234,154,25)"/><text x="925.00" y="270.50"></text></g><g><title>take_nd (pandas/core/algorithms.py:1593) (31 samples, 0.11%)</title><rect x="926" y="260" width="2" height="15" fill="rgb(246,149,42)"/><text x="929.00" y="270.50"></text></g><g><title>take_nd (pandas/core/algorithms.py:1596) (27 samples, 0.09%)</title><rect x="928" y="260" width="1" height="15" fill="rgb(206,63,5)"/><text x="931.00" y="270.50"></text></g><g><title>take_nd (pandas/core/algorithms.py:1602) (25 samples, 0.09%)</title><rect x="929" y="260" width="1" height="15" fill="rgb(254,60,16)"/><text x="932.00" y="270.50"></text></g><g><title>is_dtype (pandas/core/dtypes/base.py:101) (42 samples, 0.15%)</title><rect x="933" y="308" width="1" height="15" fill="rgb(222,97,31)"/><text x="936.00" y="318.50"></text></g><g><title>maybe_promote (pandas/core/dtypes/cast.py:273) (62 samples, 0.22%)</title><rect x="932" y="276" width="3" height="15" fill="rgb(223,120,36)"/><text x="935.00" y="286.50"></text></g><g><title>is_datetime64tz_dtype (pandas/core/dtypes/common.py:469) (57 samples, 0.20%)</title><rect x="932" y="292" width="3" height="15" fill="rgb(208,207,43)"/><text x="935.00" y="302.50"></text></g><g><title>maybe_promote (pandas/core/dtypes/cast.py:276) (33 samples, 0.12%)</title><rect x="935" y="276" width="1" height="15" fill="rgb(205,213,0)"/><text x="938.00" y="286.50"></text></g><g><title>maybe_promote (pandas/core/dtypes/cast.py:314) (49 samples, 0.17%)</title><rect x="937" y="276" width="2" height="15" fill="rgb(253,29,46)"/><text x="940.00" y="286.50"></text></g><g><title>is_dtype (pandas/core/dtypes/base.py:101) (39 samples, 0.14%)</title><rect x="940" y="308" width="1" height="15" fill="rgb(218,188,2)"/><text x="943.00" y="318.50"></text></g><g><title>is_dtype (pandas/core/dtypes/base.py:112) (29 samples, 0.10%)</title><rect x="942" y="308" width="1" height="15" fill="rgb(232,214,15)"/><text x="945.00" y="318.50"></text></g><g><title>maybe_promote (pandas/core/dtypes/cast.py:316) (82 samples, 0.29%)</title><rect x="939" y="276" width="4" height="15" fill="rgb(225,228,35)"/><text x="942.00" y="286.50"></text></g><g><title>is_datetime64tz_dtype (pandas/core/dtypes/common.py:469) (77 samples, 0.27%)</title><rect x="940" y="292" width="3" height="15" fill="rgb(240,212,37)"/><text x="943.00" y="302.50"></text></g><g><title>take_nd (pandas/core/algorithms.py:1609) (339 samples, 1.19%)</title><rect x="930" y="260" width="14" height="15" fill="rgb(242,227,25)"/><text x="933.00" y="270.50"></text></g><g><title>take_nd (pandas/core/algorithms.py:1615) (46 samples, 0.16%)</title><rect x="944" y="260" width="2" height="15" fill="rgb(244,178,24)"/><text x="947.00" y="270.50"></text></g><g><title>take_nd (pandas/core/algorithms.py:1616) (77 samples, 0.27%)</title><rect x="946" y="260" width="3" height="15" fill="rgb(218,204,21)"/><text x="949.00" y="270.50"></text></g><g><title>_any (numpy/core/_methods.py:43) (69 samples, 0.24%)</title><rect x="946" y="276" width="3" height="15" fill="rgb(222,74,53)"/><text x="949.00" y="286.50"></text></g><g><title>take_nd (pandas/core/algorithms.py:1641) (29 samples, 0.10%)</title><rect x="951" y="260" width="1" height="15" fill="rgb(243,142,10)"/><text x="954.00" y="270.50"></text></g><g><title>take_nd (pandas/core/algorithms.py:1651) (63 samples, 0.22%)</title><rect x="953" y="260" width="2" height="15" fill="rgb(236,26,54)"/><text x="956.00" y="270.50"></text></g><g><title>issubclass_ (numpy/core/numerictypes.py:328) (43 samples, 0.15%)</title><rect x="967" y="324" width="2" height="15" fill="rgb(207,212,35)"/><text x="970.00" y="334.50"></text></g><g><title>issubdtype (numpy/core/numerictypes.py:392) (85 samples, 0.30%)</title><rect x="966" y="308" width="3" height="15" fill="rgb(220,36,22)"/><text x="969.00" y="318.50"></text></g><g><title>_name_get (numpy/core/_dtype.py:334) (146 samples, 0.51%)</title><rect x="965" y="292" width="6" height="15" fill="rgb(230,203,21)"/><text x="968.00" y="302.50"></text></g><g><title>_get_take_nd_function (pandas/core/algorithms.py:1419) (367 samples, 1.29%)</title><rect x="957" y="276" width="15" height="15" fill="rgb(230,88,21)"/><text x="960.00" y="286.50"></text></g><g><title>take_nd (pandas/core/algorithms.py:1654) (416 samples, 1.46%)</title><rect x="956" y="260" width="17" height="15" fill="rgb(215,201,42)"/><text x="959.00" y="270.50"></text></g><g><title>take_nd (pandas/core/algorithms.py:1655) (250 samples, 0.88%)</title><rect x="973" y="260" width="10" height="15" fill="rgb(243,159,39)"/><text x="976.00" y="270.50"></text></g><g><title>take_nd (pandas/core/internals/blocks.py:1238) (1,682 samples, 5.89%)</title><rect x="914" y="244" width="69" height="15" fill="rgb(207,22,42)"/><text x="917.00" y="254.50">take_nd..</text></g><g><title>take_nd (pandas/core/internals/blocks.py:1248) (26 samples, 0.09%)</title><rect x="983" y="244" width="2" height="15" fill="rgb(218,97,39)"/><text x="986.00" y="254.50"></text></g><g><title>take_nd (pandas/core/internals/blocks.py:1250) (46 samples, 0.16%)</title><rect x="985" y="244" width="1" height="15" fill="rgb(217,68,12)"/><text x="988.00" y="254.50"></text></g><g><title>__init__ (pandas/core/internals/blocks.py:2631) (55 samples, 0.19%)</title><rect x="990" y="292" width="3" height="15" fill="rgb(209,147,38)"/><text x="993.00" y="302.50"></text></g><g><title>__init__ (pandas/core/internals/blocks.py:79) (30 samples, 0.11%)</title><rect x="993" y="292" width="1" height="15" fill="rgb(211,210,14)"/><text x="996.00" y="302.50"></text></g><g><title>reindex_indexer (pandas/core/internals/managers.py:1235) (2,042 samples, 7.15%)</title><rect x="911" y="212" width="84" height="15" fill="rgb(235,7,20)"/><text x="914.00" y="222.50">reindex_i..</text></g><g><title>&lt;listcomp&gt; (pandas/core/internals/managers.py:1235) (2,031 samples, 7.11%)</title><rect x="911" y="228" width="84" height="15" fill="rgb(243,227,14)"/><text x="914.00" y="238.50">&lt;listcomp..</text></g><g><title>take_nd (pandas/core/internals/blocks.py:1253) (212 samples, 0.74%)</title><rect x="986" y="244" width="9" height="15" fill="rgb(242,5,35)"/><text x="989.00" y="254.50"></text></g><g><title>make_block_same_class (pandas/core/internals/blocks.py:235) (189 samples, 0.66%)</title><rect x="987" y="260" width="8" height="15" fill="rgb(224,21,29)"/><text x="990.00" y="270.50"></text></g><g><title>make_block (pandas/core/internals/blocks.py:3095) (164 samples, 0.57%)</title><rect x="988" y="276" width="7" height="15" fill="rgb(206,87,41)"/><text x="991.00" y="286.50"></text></g><g><title>_verify_integrity (pandas/core/internals/managers.py:307) (49 samples, 0.17%)</title><rect x="998" y="244" width="2" height="15" fill="rgb(224,28,19)"/><text x="1001.00" y="254.50"></text></g><g><title>shape (pandas/core/internals/managers.py:141) (44 samples, 0.15%)</title><rect x="998" y="260" width="2" height="15" fill="rgb(226,214,3)"/><text x="1001.00" y="270.50"></text></g><g><title>_verify_integrity (pandas/core/internals/managers.py:308) (29 samples, 0.10%)</title><rect x="1000" y="244" width="1" height="15" fill="rgb(242,204,39)"/><text x="1003.00" y="254.50"></text></g><g><title>_verify_integrity (pandas/core/internals/managers.py:310) (26 samples, 0.09%)</title><rect x="1002" y="244" width="1" height="15" fill="rgb(241,187,33)"/><text x="1005.00" y="254.50"></text></g><g><title>__init__ (pandas/core/internals/managers.py:114) (141 samples, 0.49%)</title><rect x="998" y="228" width="5" height="15" fill="rgb(231,185,46)"/><text x="1001.00" y="238.50"></text></g><g><title>issubdtype (numpy/core/numerictypes.py:392) (29 samples, 0.10%)</title><rect x="1016" y="324" width="1" height="15" fill="rgb(226,200,46)"/><text x="1019.00" y="334.50"></text></g><g><title>_name_get (numpy/core/_dtype.py:334) (59 samples, 0.21%)</title><rect x="1015" y="308" width="3" height="15" fill="rgb(244,156,20)"/><text x="1018.00" y="318.50"></text></g><g><title>_consolidate_check (pandas/core/internals/managers.py:600) (355 samples, 1.24%)</title><rect x="1004" y="244" width="14" height="15" fill="rgb(217,85,50)"/><text x="1007.00" y="254.50"></text></g><g><title>&lt;listcomp&gt; (pandas/core/internals/managers.py:600) (350 samples, 1.23%)</title><rect x="1004" y="260" width="14" height="15" fill="rgb(236,199,18)"/><text x="1007.00" y="270.50"></text></g><g><title>ftype (pandas/core/internals/blocks.py:318) (306 samples, 1.07%)</title><rect x="1006" y="276" width="12" height="15" fill="rgb(228,150,14)"/><text x="1009.00" y="286.50"></text></g><g><title>__str__ (numpy/core/_dtype.py:54) (128 samples, 0.45%)</title><rect x="1013" y="292" width="5" height="15" fill="rgb(206,208,27)"/><text x="1016.00" y="302.50"></text></g><g><title>_consolidate_check (pandas/core/internals/managers.py:601) (27 samples, 0.09%)</title><rect x="1018" y="244" width="1" height="15" fill="rgb(229,103,0)"/><text x="1021.00" y="254.50"></text></g><g><title>__init__ (pandas/core/internals/managers.py:116) (388 samples, 1.36%)</title><rect x="1003" y="228" width="16" height="15" fill="rgb(206,206,54)"/><text x="1006.00" y="238.50"></text></g><g><title>_rebuild_blknos_and_blklocs (pandas/core/internals/managers.py:190) (87 samples, 0.30%)</title><rect x="1020" y="244" width="3" height="15" fill="rgb(225,74,30)"/><text x="1023.00" y="254.50"></text></g><g><title>shape (pandas/core/internals/managers.py:141) (33 samples, 0.12%)</title><rect x="1022" y="260" width="1" height="15" fill="rgb(225,191,6)"/><text x="1025.00" y="270.50"></text></g><g><title>_rebuild_blknos_and_blklocs (pandas/core/internals/managers.py:191) (34 samples, 0.12%)</title><rect x="1023" y="244" width="2" height="15" fill="rgb(234,184,36)"/><text x="1026.00" y="254.50"></text></g><g><title>_rebuild_blknos_and_blklocs (pandas/core/internals/managers.py:197) (52 samples, 0.18%)</title><rect x="1026" y="244" width="3" height="15" fill="rgb(207,195,48)"/><text x="1029.00" y="254.50"></text></g><g><title>_rebuild_blknos_and_blklocs (pandas/core/internals/managers.py:198) (85 samples, 0.30%)</title><rect x="1029" y="244" width="3" height="15" fill="rgb(206,168,32)"/><text x="1032.00" y="254.50"></text></g><g><title>_rebuild_blknos_and_blklocs (pandas/core/internals/managers.py:200) (112 samples, 0.39%)</title><rect x="1032" y="244" width="5" height="15" fill="rgb(232,5,7)"/><text x="1035.00" y="254.50"></text></g><g><title>_any (numpy/core/_methods.py:43) (66 samples, 0.23%)</title><rect x="1034" y="260" width="3" height="15" fill="rgb(206,207,24)"/><text x="1037.00" y="270.50"></text></g><g><title>__init__ (pandas/core/internals/managers.py:118) (422 samples, 1.48%)</title><rect x="1019" y="228" width="18" height="15" fill="rgb(220,61,7)"/><text x="1022.00" y="238.50"></text></g><g><title>__init__ (pandas/core/internals/managers.py:98) (29 samples, 0.10%)</title><rect x="1037" y="228" width="1" height="15" fill="rgb(252,78,13)"/><text x="1040.00" y="238.50"></text></g><g><title>_take (pandas/core/generic.py:3359) (4,744 samples, 16.62%)</title><rect x="842" y="180" width="196" height="15" fill="rgb(222,140,48)"/><text x="845.00" y="190.50">_take (pandas/core/generi..</text></g><g><title>take (pandas/core/internals/managers.py:1350) (3,130 samples, 10.96%)</title><rect x="909" y="196" width="129" height="15" fill="rgb(251,108,19)"/><text x="912.00" y="206.50">take (pandas/cor..</text></g><g><title>reindex_indexer (pandas/core/internals/managers.py:1239) (1,032 samples, 3.61%)</title><rect x="996" y="212" width="42" height="15" fill="rgb(206,98,41)"/><text x="999.00" y="222.50">rei..</text></g><g><title>__init__ (pandas/core/frame.py:390) (26 samples, 0.09%)</title><rect x="1041" y="196" width="1" height="15" fill="rgb(242,45,20)"/><text x="1044.00" y="206.50"></text></g><g><title>__init__ (pandas/core/frame.py:470) (46 samples, 0.16%)</title><rect x="1042" y="196" width="2" height="15" fill="rgb(221,144,54)"/><text x="1045.00" y="206.50"></text></g><g><title>_take (pandas/core/generic.py:3360) (146 samples, 0.51%)</title><rect x="1038" y="180" width="6" height="15" fill="rgb(232,104,21)"/><text x="1041.00" y="190.50"></text></g><g><title>_get_axis (pandas/core/generic.py:378) (42 samples, 0.15%)</title><rect x="1045" y="196" width="2" height="15" fill="rgb(246,22,1)"/><text x="1048.00" y="206.50"></text></g><g><title>_is_dtype_type (pandas/core/dtypes/common.py:1874) (37 samples, 0.13%)</title><rect x="1049" y="228" width="2" height="15" fill="rgb(215,202,51)"/><text x="1052.00" y="238.50"></text></g><g><title>equals (pandas/core/indexes/base.py:4061) (89 samples, 0.31%)</title><rect x="1048" y="196" width="4" height="15" fill="rgb(250,157,53)"/><text x="1051.00" y="206.50"></text></g><g><title>is_object_dtype (pandas/core/dtypes/common.py:157) (86 samples, 0.30%)</title><rect x="1048" y="212" width="4" height="15" fill="rgb(241,165,17)"/><text x="1051.00" y="222.50"></text></g><g><title>equals (pandas/core/indexes/base.py:4066) (39 samples, 0.14%)</title><rect x="1052" y="196" width="1" height="15" fill="rgb(223,33,19)"/><text x="1055.00" y="206.50"></text></g><g><title>_take (pandas/core/generic.py:3364) (256 samples, 0.90%)</title><rect x="1044" y="180" width="11" height="15" fill="rgb(229,156,54)"/><text x="1047.00" y="190.50"></text></g><g><title>equals (pandas/core/indexes/base.py:4067) (39 samples, 0.14%)</title><rect x="1053" y="196" width="2" height="15" fill="rgb(219,54,16)"/><text x="1056.00" y="206.50"></text></g><g><title>approximate_dependencies (dfd.py:388) (7,571 samples, 26.52%)</title><rect x="745" y="132" width="312" height="15" fill="rgb(225,61,39)"/><text x="748.00" y="142.50">approximate_dependencies (dfd.py:388)</text></g><g><title>__getitem__ (pandas/core/frame.py:2918) (7,042 samples, 24.66%)</title><rect x="766" y="148" width="291" height="15" fill="rgb(210,89,41)"/><text x="769.00" y="158.50">__getitem__ (pandas/core/frame.py:2918)</text></g><g><title>_getitem_bool_array (pandas/core/frame.py:2969) (5,395 samples, 18.90%)</title><rect x="835" y="164" width="222" height="15" fill="rgb(242,204,25)"/><text x="838.00" y="174.50">_getitem_bool_array (pandas/c..</text></g><g><title>_take (pandas/core/generic.py:3365) (60 samples, 0.21%)</title><rect x="1055" y="180" width="2" height="15" fill="rgb(253,61,52)"/><text x="1058.00" y="190.50"></text></g><g><title>_set_is_copy (pandas/core/generic.py:3180) (48 samples, 0.17%)</title><rect x="1056" y="196" width="1" height="15" fill="rgb(237,188,43)"/><text x="1059.00" y="206.50"></text></g><g><title>__getitem__ (pandas/core/frame.py:2898) (56 samples, 0.20%)</title><rect x="1060" y="148" width="3" height="15" fill="rgb(220,51,52)"/><text x="1063.00" y="158.50"></text></g><g><title>get (pandas/core/internals/managers.py:940) (33 samples, 0.12%)</title><rect x="1065" y="180" width="1" height="15" fill="rgb(248,52,28)"/><text x="1068.00" y="190.50"></text></g><g><title>isna (pandas/core/dtypes/missing.py:99) (30 samples, 0.11%)</title><rect x="1065" y="196" width="1" height="15" fill="rgb(216,0,2)"/><text x="1068.00" y="206.50"></text></g><g><title>get_loc (pandas/core/indexes/base.py:2657) (35 samples, 0.12%)</title><rect x="1067" y="196" width="1" height="15" fill="rgb(209,127,41)"/><text x="1070.00" y="206.50"></text></g><g><title>get (pandas/core/internals/managers.py:941) (54 samples, 0.19%)</title><rect x="1066" y="180" width="2" height="15" fill="rgb(210,7,38)"/><text x="1069.00" y="190.50"></text></g><g><title>iget (pandas/core/internals/managers.py:978) (100 samples, 0.35%)</title><rect x="1071" y="196" width="4" height="15" fill="rgb(225,165,15)"/><text x="1074.00" y="206.50"></text></g><g><title>make_block_same_class (pandas/core/internals/blocks.py:235) (91 samples, 0.32%)</title><rect x="1071" y="212" width="4" height="15" fill="rgb(207,102,34)"/><text x="1074.00" y="222.50"></text></g><g><title>make_block (pandas/core/internals/blocks.py:3095) (87 samples, 0.30%)</title><rect x="1071" y="228" width="4" height="15" fill="rgb(216,224,50)"/><text x="1074.00" y="238.50"></text></g><g><title>_get_item_cache (pandas/core/generic.py:3061) (308 samples, 1.08%)</title><rect x="1064" y="164" width="13" height="15" fill="rgb(223,42,23)"/><text x="1067.00" y="174.50"></text></g><g><title>get (pandas/core/internals/managers.py:952) (206 samples, 0.72%)</title><rect x="1068" y="180" width="9" height="15" fill="rgb(234,115,16)"/><text x="1071.00" y="190.50"></text></g><g><title>iget (pandas/core/internals/managers.py:979) (43 samples, 0.15%)</title><rect x="1075" y="196" width="2" height="15" fill="rgb(221,103,42)"/><text x="1078.00" y="206.50"></text></g><g><title>_box_item_values (pandas/core/frame.py:3343) (90 samples, 0.32%)</title><rect x="1077" y="180" width="4" height="15" fill="rgb(218,30,43)"/><text x="1080.00" y="190.50"></text></g><g><title>get_loc (pandas/core/indexes/base.py:2657) (27 samples, 0.09%)</title><rect x="1080" y="196" width="1" height="15" fill="rgb(229,132,20)"/><text x="1083.00" y="206.50"></text></g><g><title>__init__ (pandas/core/series.py:266) (31 samples, 0.11%)</title><rect x="1083" y="212" width="2" height="15" fill="rgb(212,132,26)"/><text x="1086.00" y="222.50"></text></g><g><title>__setattr__ (pandas/core/generic.py:5079) (65 samples, 0.23%)</title><rect x="1085" y="228" width="2" height="15" fill="rgb(233,203,21)"/><text x="1088.00" y="238.50"></text></g><g><title>name (pandas/core/series.py:397) (44 samples, 0.15%)</title><rect x="1086" y="244" width="1" height="15" fill="rgb(253,142,0)"/><text x="1089.00" y="254.50"></text></g><g><title>__setattr__ (pandas/core/generic.py:5089) (38 samples, 0.13%)</title><rect x="1088" y="228" width="1" height="15" fill="rgb(232,153,29)"/><text x="1091.00" y="238.50"></text></g><g><title>__init__ (pandas/core/series.py:268) (117 samples, 0.41%)</title><rect x="1085" y="212" width="4" height="15" fill="rgb(217,140,21)"/><text x="1088.00" y="222.50"></text></g><g><title>_get_item_cache (pandas/core/generic.py:3062) (355 samples, 1.24%)</title><rect x="1077" y="164" width="14" height="15" fill="rgb(250,178,3)"/><text x="1080.00" y="174.50"></text></g><g><title>_box_item_values (pandas/core/frame.py:3347) (257 samples, 0.90%)</title><rect x="1081" y="180" width="10" height="15" fill="rgb(212,226,37)"/><text x="1084.00" y="190.50"></text></g><g><title>_box_col_values (pandas/core/frame.py:3354) (245 samples, 0.86%)</title><rect x="1081" y="196" width="10" height="15" fill="rgb(208,32,40)"/><text x="1084.00" y="206.50"></text></g><g><title>__init__ (pandas/core/series.py:269) (48 samples, 0.17%)</title><rect x="1089" y="212" width="2" height="15" fill="rgb(248,67,51)"/><text x="1092.00" y="222.50"></text></g><g><title>_get_item_cache (pandas/core/generic.py:3064) (51 samples, 0.18%)</title><rect x="1092" y="164" width="2" height="15" fill="rgb(233,190,17)"/><text x="1095.00" y="174.50"></text></g><g><title>_set_as_cached (pandas/core/generic.py:3074) (43 samples, 0.15%)</title><rect x="1092" y="180" width="2" height="15" fill="rgb(252,132,48)"/><text x="1095.00" y="190.50"></text></g><g><title>__getitem__ (pandas/core/frame.py:2901) (744 samples, 2.61%)</title><rect x="1063" y="148" width="31" height="15" fill="rgb(222,123,54)"/><text x="1066.00" y="158.50">__..</text></g><g><title>dtype (pandas/core/series.py:411) (27 samples, 0.09%)</title><rect x="1095" y="164" width="1" height="15" fill="rgb(210,53,26)"/><text x="1098.00" y="174.50"></text></g><g><title>is_dtype (pandas/core/dtypes/base.py:101) (40 samples, 0.14%)</title><rect x="1096" y="180" width="2" height="15" fill="rgb(232,219,10)"/><text x="1099.00" y="190.50"></text></g><g><title>to_numpy (pandas/core/base.py:951) (91 samples, 0.32%)</title><rect x="1094" y="148" width="4" height="15" fill="rgb(238,144,37)"/><text x="1097.00" y="158.50"></text></g><g><title>is_datetime64tz_dtype (pandas/core/dtypes/common.py:469) (53 samples, 0.19%)</title><rect x="1096" y="164" width="2" height="15" fill="rgb(241,92,48)"/><text x="1099.00" y="174.50"></text></g><g><title>_values (pandas/core/series.py:481) (25 samples, 0.09%)</title><rect x="1099" y="164" width="1" height="15" fill="rgb(253,11,15)"/><text x="1102.00" y="174.50"></text></g><g><title>to_numpy (pandas/core/base.py:957) (46 samples, 0.16%)</title><rect x="1098" y="148" width="2" height="15" fill="rgb(216,51,4)"/><text x="1101.00" y="158.50"></text></g><g><title>_unique1d (numpy/lib/arraysetops.py:304) (35 samples, 0.12%)</title><rect x="1101" y="164" width="2" height="15" fill="rgb(231,216,49)"/><text x="1104.00" y="174.50"></text></g><g><title>_unique1d (numpy/lib/arraysetops.py:312) (121 samples, 0.42%)</title><rect x="1103" y="164" width="5" height="15" fill="rgb(234,20,23)"/><text x="1106.00" y="174.50"></text></g><g><title>_unique1d (numpy/lib/arraysetops.py:316) (67 samples, 0.23%)</title><rect x="1109" y="164" width="3" height="15" fill="rgb(218,98,19)"/><text x="1112.00" y="174.50"></text></g><g><title>_unique1d (numpy/lib/arraysetops.py:318) (29 samples, 0.10%)</title><rect x="1112" y="164" width="1" height="15" fill="rgb(209,89,10)"/><text x="1115.00" y="174.50"></text></g><g><title>_unique1d (numpy/lib/arraysetops.py:327) (141 samples, 0.49%)</title><rect x="1113" y="164" width="6" height="15" fill="rgb(234,92,36)"/><text x="1116.00" y="174.50"></text></g><g><title>nonzero (numpy/core/fromnumeric.py:1778) (33 samples, 0.12%)</title><rect x="1118" y="180" width="1" height="15" fill="rgb(247,194,26)"/><text x="1121.00" y="190.50"></text></g><g><title>diff (numpy/lib/function_base.py:1273) (41 samples, 0.14%)</title><rect x="1125" y="180" width="2" height="15" fill="rgb(242,44,35)"/><text x="1128.00" y="190.50"></text></g><g><title>unique (numpy/lib/arraysetops.py:264) (631 samples, 2.21%)</title><rect x="1101" y="148" width="26" height="15" fill="rgb(217,156,50)"/><text x="1104.00" y="158.50">u..</text></g><g><title>_unique1d (numpy/lib/arraysetops.py:328) (180 samples, 0.63%)</title><rect x="1119" y="164" width="8" height="15" fill="rgb(250,99,14)"/><text x="1122.00" y="174.50"></text></g><g><title>approximate_dependencies (dfd.py:389) (1,683 samples, 5.89%)</title><rect x="1057" y="132" width="70" height="15" fill="rgb(233,121,27)"/><text x="1060.00" y="142.50">approxi..</text></g><g><title>_amax (numpy/core/_methods.py:28) (69 samples, 0.24%)</title><rect x="1129" y="148" width="3" height="15" fill="rgb(251,57,35)"/><text x="1132.00" y="158.50"></text></g><g><title>approximate_dependencies (dfd.py:390) (220 samples, 0.77%)</title><rect x="1127" y="132" width="9" height="15" fill="rgb(225,60,46)"/><text x="1130.00" y="142.50"></text></g><g><title>_sum (numpy/core/_methods.py:36) (111 samples, 0.39%)</title><rect x="1132" y="148" width="4" height="15" fill="rgb(247,35,6)"/><text x="1135.00" y="158.50"></text></g><g><title>find_LHSs (dfd.py:106) (27,298 samples, 95.61%)</title><rect x="12" y="100" width="1128" height="15" fill="rgb(247,37,21)"/><text x="15.00" y="110.50">find_LHSs (dfd.py:106)</text></g><g><title>compute_partitions (dfd.py:330) (27,297 samples, 95.61%)</title><rect x="12" y="116" width="1128" height="15" fill="rgb(216,166,18)"/><text x="15.00" y="126.50">compute_partitions (dfd.py:330)</text></g><g><title>approximate_dependencies (dfd.py:391) (97 samples, 0.34%)</title><rect x="1136" y="132" width="4" height="15" fill="rgb(225,195,29)"/><text x="1139.00" y="142.50"></text></g><g><title>&lt;module&gt; (pyspy.py:10) (27,368 samples, 95.86%)</title><rect x="10" y="52" width="1131" height="15" fill="rgb(226,210,23)"/><text x="13.00" y="62.50">&lt;module&gt; (pyspy.py:10)</text></g><g><title>find_dependencies (user_interaction.py:29) (27,367 samples, 95.85%)</title><rect x="10" y="68" width="1131" height="15" fill="rgb(232,221,18)"/><text x="13.00" y="78.50">find_dependencies (user_interaction.py:29)</text></g><g><title>dfd (dfd.py:50) (27,316 samples, 95.67%)</title><rect x="12" y="84" width="1129" height="15" fill="rgb(245,131,2)"/><text x="15.00" y="94.50">dfd (dfd.py:50)</text></g><g><title>&lt;module&gt; (dfd.py:2) (33 samples, 0.12%)</title><rect x="1141" y="244" width="1" height="15" fill="rgb(239,191,9)"/><text x="1144.00" y="254.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (33 samples, 0.12%)</title><rect x="1141" y="260" width="1" height="15" fill="rgb(249,209,8)"/><text x="1144.00" y="270.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (33 samples, 0.12%)</title><rect x="1141" y="276" width="1" height="15" fill="rgb(213,86,5)"/><text x="1144.00" y="286.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (33 samples, 0.12%)</title><rect x="1141" y="292" width="1" height="15" fill="rgb(219,208,1)"/><text x="1144.00" y="302.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (33 samples, 0.12%)</title><rect x="1141" y="308" width="1" height="15" fill="rgb(227,123,2)"/><text x="1144.00" y="318.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (33 samples, 0.12%)</title><rect x="1141" y="324" width="1" height="15" fill="rgb(237,169,6)"/><text x="1144.00" y="334.50"></text></g><g><title>&lt;module&gt; (pyspy.py:2) (40 samples, 0.14%)</title><rect x="1141" y="52" width="1" height="15" fill="rgb(246,60,54)"/><text x="1144.00" y="62.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (40 samples, 0.14%)</title><rect x="1141" y="68" width="1" height="15" fill="rgb(224,131,49)"/><text x="1144.00" y="78.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (40 samples, 0.14%)</title><rect x="1141" y="84" width="1" height="15" fill="rgb(228,201,11)"/><text x="1144.00" y="94.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (40 samples, 0.14%)</title><rect x="1141" y="100" width="1" height="15" fill="rgb(252,201,47)"/><text x="1144.00" y="110.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (39 samples, 0.14%)</title><rect x="1141" y="116" width="1" height="15" fill="rgb(247,229,7)"/><text x="1144.00" y="126.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (39 samples, 0.14%)</title><rect x="1141" y="132" width="1" height="15" fill="rgb(214,174,17)"/><text x="1144.00" y="142.50"></text></g><g><title>&lt;module&gt; (user_interaction.py:1) (39 samples, 0.14%)</title><rect x="1141" y="148" width="1" height="15" fill="rgb(230,91,45)"/><text x="1144.00" y="158.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (38 samples, 0.13%)</title><rect x="1141" y="164" width="1" height="15" fill="rgb(232,17,22)"/><text x="1144.00" y="174.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (38 samples, 0.13%)</title><rect x="1141" y="180" width="1" height="15" fill="rgb(212,114,37)"/><text x="1144.00" y="190.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (38 samples, 0.13%)</title><rect x="1141" y="196" width="1" height="15" fill="rgb(212,112,8)"/><text x="1144.00" y="206.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (38 samples, 0.13%)</title><rect x="1141" y="212" width="1" height="15" fill="rgb(222,224,40)"/><text x="1144.00" y="222.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (38 samples, 0.13%)</title><rect x="1141" y="228" width="1" height="15" fill="rgb(234,99,22)"/><text x="1144.00" y="238.50"></text></g><g><title>&lt;module&gt; (pandas/core/api.py:26) (27 samples, 0.09%)</title><rect x="1144" y="244" width="1" height="15" fill="rgb(231,51,18)"/><text x="1147.00" y="254.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (27 samples, 0.09%)</title><rect x="1144" y="260" width="1" height="15" fill="rgb(209,142,27)"/><text x="1147.00" y="270.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (27 samples, 0.09%)</title><rect x="1144" y="276" width="1" height="15" fill="rgb(237,6,22)"/><text x="1147.00" y="286.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (27 samples, 0.09%)</title><rect x="1144" y="292" width="1" height="15" fill="rgb(253,156,0)"/><text x="1147.00" y="302.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (27 samples, 0.09%)</title><rect x="1144" y="308" width="1" height="15" fill="rgb(248,53,53)"/><text x="1147.00" y="318.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (27 samples, 0.09%)</title><rect x="1144" y="324" width="1" height="15" fill="rgb(221,45,50)"/><text x="1147.00" y="334.50"></text></g><g><title>&lt;module&gt; (pandas/__init__.py:42) (49 samples, 0.17%)</title><rect x="1144" y="148" width="2" height="15" fill="rgb(206,163,50)"/><text x="1147.00" y="158.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (49 samples, 0.17%)</title><rect x="1144" y="164" width="2" height="15" fill="rgb(250,169,50)"/><text x="1147.00" y="174.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (49 samples, 0.17%)</title><rect x="1144" y="180" width="2" height="15" fill="rgb(227,223,36)"/><text x="1147.00" y="190.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (49 samples, 0.17%)</title><rect x="1144" y="196" width="2" height="15" fill="rgb(213,138,37)"/><text x="1147.00" y="206.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (49 samples, 0.17%)</title><rect x="1144" y="212" width="2" height="15" fill="rgb(224,220,38)"/><text x="1147.00" y="222.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (49 samples, 0.17%)</title><rect x="1144" y="228" width="2" height="15" fill="rgb(228,50,47)"/><text x="1147.00" y="238.50"></text></g><g><title>&lt;module&gt; (pyspy.py:3) (104 samples, 0.36%)</title><rect x="1142" y="52" width="5" height="15" fill="rgb(222,153,28)"/><text x="1145.00" y="62.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (104 samples, 0.36%)</title><rect x="1142" y="68" width="5" height="15" fill="rgb(234,136,20)"/><text x="1145.00" y="78.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (104 samples, 0.36%)</title><rect x="1142" y="84" width="5" height="15" fill="rgb(210,167,23)"/><text x="1145.00" y="94.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (104 samples, 0.36%)</title><rect x="1142" y="100" width="5" height="15" fill="rgb(227,27,19)"/><text x="1145.00" y="110.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (104 samples, 0.36%)</title><rect x="1142" y="116" width="5" height="15" fill="rgb(247,18,46)"/><text x="1145.00" y="126.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (104 samples, 0.36%)</title><rect x="1142" y="132" width="5" height="15" fill="rgb(245,71,32)"/><text x="1145.00" y="142.50"></text></g><g><title>read (pandas/io/parsers.py:1139) (881 samples, 3.09%)</title><rect x="1147" y="100" width="37" height="15" fill="rgb(250,31,43)"/><text x="1150.00" y="110.50">rea..</text></g><g><title>read (pandas/io/parsers.py:1995) (881 samples, 3.09%)</title><rect x="1147" y="116" width="37" height="15" fill="rgb(245,21,14)"/><text x="1150.00" y="126.50">rea..</text></g><g><title>arrays_to_mgr (pandas/core/internals/construction.py:56) (28 samples, 0.10%)</title><rect x="1184" y="148" width="1" height="15" fill="rgb(243,106,50)"/><text x="1187.00" y="158.50"></text></g><g><title>_homogenize (pandas/core/internals/construction.py:277) (28 samples, 0.10%)</title><rect x="1184" y="164" width="1" height="15" fill="rgb(228,102,53)"/><text x="1187.00" y="174.50"></text></g><g><title>sanitize_array (pandas/core/internals/construction.py:674) (28 samples, 0.10%)</title><rect x="1184" y="180" width="1" height="15" fill="rgb(246,40,16)"/><text x="1187.00" y="190.50"></text></g><g><title>&lt;module&gt; (pyspy.py:6) (979 samples, 3.43%)</title><rect x="1147" y="52" width="40" height="15" fill="rgb(220,108,22)"/><text x="1150.00" y="62.50">&lt;mo..</text></g><g><title>parser_f (pandas/io/parsers.py:702) (979 samples, 3.43%)</title><rect x="1147" y="68" width="40" height="15" fill="rgb(219,165,49)"/><text x="1150.00" y="78.50">par..</text></g><g><title>_read (pandas/io/parsers.py:435) (976 samples, 3.42%)</title><rect x="1147" y="84" width="40" height="15" fill="rgb(211,2,19)"/><text x="1150.00" y="94.50">_re..</text></g><g><title>read (pandas/io/parsers.py:1154) (82 samples, 0.29%)</title><rect x="1184" y="100" width="3" height="15" fill="rgb(240,218,54)"/><text x="1187.00" y="110.50"></text></g><g><title>__init__ (pandas/core/frame.py:392) (82 samples, 0.29%)</title><rect x="1184" y="116" width="3" height="15" fill="rgb(239,172,53)"/><text x="1187.00" y="126.50"></text></g><g><title>init_dict (pandas/core/internals/construction.py:212) (81 samples, 0.28%)</title><rect x="1184" y="132" width="3" height="15" fill="rgb(250,126,17)"/><text x="1187.00" y="142.50"></text></g><g><title>arrays_to_mgr (pandas/core/internals/construction.py:61) (53 samples, 0.19%)</title><rect x="1185" y="148" width="2" height="15" fill="rgb(248,223,30)"/><text x="1188.00" y="158.50"></text></g><g><title>create_block_manager_from_arrays (pandas/core/internals/managers.py:1666) (53 samples, 0.19%)</title><rect x="1185" y="164" width="2" height="15" fill="rgb(240,113,51)"/><text x="1188.00" y="174.50"></text></g><g><title>form_blocks (pandas/core/internals/managers.py:1754) (28 samples, 0.10%)</title><rect x="1186" y="180" width="1" height="15" fill="rgb(217,87,10)"/><text x="1189.00" y="190.50"></text></g><g><title>_simple_blockify (pandas/core/internals/managers.py:1800) (28 samples, 0.10%)</title><rect x="1186" y="196" width="1" height="15" fill="rgb(212,184,36)"/><text x="1189.00" y="206.50"></text></g><g><title>_drop_axis (pandas/core/generic.py:3812) (27 samples, 0.09%)</title><rect x="1188" y="100" width="1" height="15" fill="rgb(230,180,30)"/><text x="1191.00" y="110.50"></text></g><g><title>&lt;module&gt; (pyspy.py:8) (34 samples, 0.12%)</title><rect x="1188" y="52" width="1" height="15" fill="rgb(212,167,11)"/><text x="1191.00" y="62.50"></text></g><g><title>drop (pandas/core/frame.py:3940) (33 samples, 0.12%)</title><rect x="1188" y="68" width="1" height="15" fill="rgb(224,49,29)"/><text x="1191.00" y="78.50"></text></g><g><title>drop (pandas/core/generic.py:3780) (33 samples, 0.12%)</title><rect x="1188" y="84" width="1" height="15" fill="rgb(230,26,45)"/><text x="1191.00" y="94.50"></text></g><g><title>all (28,551 samples, 100%)</title><rect x="10" y="36" width="1180" height="15" fill="rgb(243,183,37)"/><text x="13.00" y="46.50"></text></g></g></svg>
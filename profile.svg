<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="566" onload="init(evt)" viewBox="0 0 1200 566" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    searching = 0;
}

window.addEventListener("click", function(e) {
	var target = find_group(e.target);
	if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);
    }
    else if (e.target.id == "unzoom") unzoom();
    else if (e.target.id == "search") search_prompt();
}, false)

// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
	var target = find_group(e.target);
	if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
	var target = find_group(e.target);
	if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function find_child(node, selector) {
	var children = node.querySelectorAll(selector);
	if (children.length) return children[0];
	return;
}
function find_group(node) {
	var parent = node.parentElement;
	if (!parent) return;
	if (parent.id == "frames") return node;
	return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) -3;
    var txt = find_child(e, "title").textContent.replace(/\\([^(]*\\)\$/,"");
    t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
        return;
    for (var x = txt.length - 2; x > 0; x--) {
        if (t.getSubStringLength(0, x + 2) <= w) {
            t.textContent = txt.substring(0, x) + "..";
            return;
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - xpad) * ratio + xpad;
            if(e.tagName == "text")
                e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x - xpad, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = xpad;
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = parseInt(svg.width.baseVal.value) - (xpad*2);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = parseFloat(xmin + width);
    var ymin = parseFloat(attr.y.value);
    var ratio = (svg.width.baseVal.value - 2 * xpad) / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.0001;
    unzoombtn.classList.remove("hide");
    var el = document.getElementById("frames").children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = document.getElementById("frames").children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = document.getElementById("frames").children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;	// JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
]]></script><rect x="0" y="0" width="1200" height="566" fill="url(#background)"/><text id="title" x="600.00" y="24.00">py-spy</text><text id="details" x="10.00" y="549.00"> </text><text id="unzoom" class="hide" x="10.00" y="24.00">Reset Zoom</text><text id="search" x="1090.00" y="24.00">Search</text><text id="matched" x="1090.00" y="549.00"> </text><g id="frames"><g><title>_factorize_array (pandas/core/algorithms.py:456) (174 samples, 0.67%)</title><rect x="18" y="228" width="8" height="15" fill="rgb(222,114,33)"/><text x="21.00" y="238.50"></text></g><g><title>_get_data_algo (pandas/core/algorithms.py:228) (172 samples, 0.66%)</title><rect x="18" y="244" width="8" height="15" fill="rgb(243,222,33)"/><text x="21.00" y="254.50"></text></g><g><title>_factorize_array (pandas/core/algorithms.py:458) (27 samples, 0.10%)</title><rect x="26" y="228" width="1" height="15" fill="rgb(249,213,1)"/><text x="29.00" y="238.50"></text></g><g><title>factorize (pandas/core/algorithms.py:613) (743 samples, 2.86%)</title><rect x="16" y="212" width="34" height="15" fill="rgb(229,216,25)"/><text x="19.00" y="222.50">fa..</text></g><g><title>_factorize_array (pandas/core/algorithms.py:460) (494 samples, 1.90%)</title><rect x="27" y="228" width="23" height="15" fill="rgb(205,142,16)"/><text x="30.00" y="238.50">_..</text></g><g><title>duplicated (pandas/core/frame.py:4687) (761 samples, 2.93%)</title><rect x="16" y="164" width="34" height="15" fill="rgb(206,164,8)"/><text x="19.00" y="174.50">du..</text></g><g><title>f (pandas/core/frame.py:4668) (760 samples, 2.93%)</title><rect x="16" y="180" width="34" height="15" fill="rgb(218,152,0)"/><text x="19.00" y="190.50">f ..</text></g><g><title>wrapper (pandas/util/_decorators.py:188) (760 samples, 2.93%)</title><rect x="16" y="196" width="34" height="15" fill="rgb(242,188,17)"/><text x="19.00" y="206.50">wr..</text></g><g><title>get_group_index (pandas/core/sorting.py:82) (57 samples, 0.22%)</title><rect x="51" y="180" width="3" height="15" fill="rgb(232,220,41)"/><text x="54.00" y="190.50"></text></g><g><title>duplicated (pandas/core/frame.py:4689) (82 samples, 0.32%)</title><rect x="50" y="164" width="4" height="15" fill="rgb(236,166,48)"/><text x="53.00" y="174.50"></text></g><g><title>drop_duplicates (pandas/core/frame.py:4630) (974 samples, 3.75%)</title><rect x="15" y="148" width="44" height="15" fill="rgb(240,110,35)"/><text x="18.00" y="158.50">drop..</text></g><g><title>duplicated (pandas/core/frame.py:4690) (109 samples, 0.42%)</title><rect x="54" y="164" width="5" height="15" fill="rgb(235,217,18)"/><text x="57.00" y="174.50"></text></g><g><title>take_nd (pandas/core/algorithms.py:1651) (52 samples, 0.20%)</title><rect x="60" y="276" width="3" height="15" fill="rgb(251,74,11)"/><text x="63.00" y="286.50"></text></g><g><title>take_nd (pandas/core/internals/blocks.py:1238) (117 samples, 0.45%)</title><rect x="60" y="260" width="6" height="15" fill="rgb(233,55,38)"/><text x="63.00" y="270.50"></text></g><g><title>take_nd (pandas/core/algorithms.py:1655) (58 samples, 0.22%)</title><rect x="63" y="276" width="3" height="15" fill="rgb(231,12,33)"/><text x="66.00" y="286.50"></text></g><g><title>reindex_indexer (pandas/core/internals/managers.py:1235) (119 samples, 0.46%)</title><rect x="60" y="228" width="6" height="15" fill="rgb(224,203,40)"/><text x="63.00" y="238.50"></text></g><g><title>&lt;listcomp&gt; (pandas/core/internals/managers.py:1235) (119 samples, 0.46%)</title><rect x="60" y="244" width="6" height="15" fill="rgb(219,192,13)"/><text x="63.00" y="254.50"></text></g><g><title>__getitem__ (pandas/core/frame.py:2918) (147 samples, 0.57%)</title><rect x="59" y="164" width="7" height="15" fill="rgb(228,148,5)"/><text x="62.00" y="174.50"></text></g><g><title>_getitem_bool_array (pandas/core/frame.py:2969) (140 samples, 0.54%)</title><rect x="59" y="180" width="7" height="15" fill="rgb(242,59,42)"/><text x="62.00" y="190.50"></text></g><g><title>_take (pandas/core/generic.py:3359) (140 samples, 0.54%)</title><rect x="59" y="196" width="7" height="15" fill="rgb(224,38,21)"/><text x="62.00" y="206.50"></text></g><g><title>take (pandas/core/internals/managers.py:1350) (122 samples, 0.47%)</title><rect x="60" y="212" width="6" height="15" fill="rgb(234,98,24)"/><text x="63.00" y="222.50"></text></g><g><title>approximate_dependencies (dfd.py:321) (1,130 samples, 4.35%)</title><rect x="15" y="132" width="51" height="15" fill="rgb(250,25,17)"/><text x="18.00" y="142.50">appro..</text></g><g><title>drop_duplicates (pandas/core/frame.py:4637) (153 samples, 0.59%)</title><rect x="59" y="148" width="7" height="15" fill="rgb(212,185,15)"/><text x="62.00" y="158.50"></text></g><g><title>_factorize_array (pandas/core/algorithms.py:456) (40 samples, 0.15%)</title><rect x="68" y="228" width="2" height="15" fill="rgb(235,49,0)"/><text x="71.00" y="238.50"></text></g><g><title>_get_data_algo (pandas/core/algorithms.py:228) (40 samples, 0.15%)</title><rect x="68" y="244" width="2" height="15" fill="rgb(234,204,49)"/><text x="71.00" y="254.50"></text></g><g><title>factorize (pandas/core/algorithms.py:613) (248 samples, 0.96%)</title><rect x="68" y="212" width="11" height="15" fill="rgb(250,130,22)"/><text x="71.00" y="222.50"></text></g><g><title>_factorize_array (pandas/core/algorithms.py:460) (171 samples, 0.66%)</title><rect x="71" y="228" width="8" height="15" fill="rgb(240,197,36)"/><text x="74.00" y="238.50"></text></g><g><title>duplicated (pandas/core/frame.py:4687) (276 samples, 1.06%)</title><rect x="67" y="164" width="13" height="15" fill="rgb(247,24,14)"/><text x="70.00" y="174.50"></text></g><g><title>f (pandas/core/frame.py:4668) (267 samples, 1.03%)</title><rect x="67" y="180" width="13" height="15" fill="rgb(217,200,22)"/><text x="70.00" y="190.50"></text></g><g><title>wrapper (pandas/util/_decorators.py:188) (267 samples, 1.03%)</title><rect x="67" y="196" width="13" height="15" fill="rgb(237,36,2)"/><text x="70.00" y="206.50"></text></g><g><title>duplicated (pandas/core/frame.py:4689) (22 samples, 0.08%)</title><rect x="80" y="164" width="1" height="15" fill="rgb(211,36,35)"/><text x="83.00" y="174.50"></text></g><g><title>drop_duplicates (pandas/core/frame.py:4630) (404 samples, 1.56%)</title><rect x="66" y="148" width="18" height="15" fill="rgb(214,227,39)"/><text x="69.00" y="158.50"></text></g><g><title>duplicated (pandas/core/frame.py:4690) (85 samples, 0.33%)</title><rect x="81" y="164" width="3" height="15" fill="rgb(235,38,0)"/><text x="84.00" y="174.50"></text></g><g><title>take_nd (pandas/core/algorithms.py:1651) (48 samples, 0.18%)</title><rect x="86" y="276" width="2" height="15" fill="rgb(237,214,42)"/><text x="89.00" y="286.50"></text></g><g><title>reindex_indexer (pandas/core/internals/managers.py:1235) (120 samples, 0.46%)</title><rect x="85" y="228" width="6" height="15" fill="rgb(205,146,31)"/><text x="88.00" y="238.50"></text></g><g><title>&lt;listcomp&gt; (pandas/core/internals/managers.py:1235) (119 samples, 0.46%)</title><rect x="86" y="244" width="5" height="15" fill="rgb(224,76,10)"/><text x="89.00" y="254.50"></text></g><g><title>take_nd (pandas/core/internals/blocks.py:1238) (118 samples, 0.45%)</title><rect x="86" y="260" width="5" height="15" fill="rgb(223,62,35)"/><text x="89.00" y="270.50"></text></g><g><title>take_nd (pandas/core/algorithms.py:1655) (67 samples, 0.26%)</title><rect x="88" y="276" width="3" height="15" fill="rgb(241,86,37)"/><text x="91.00" y="286.50"></text></g><g><title>__getitem__ (pandas/core/frame.py:2918) (143 samples, 0.55%)</title><rect x="85" y="164" width="6" height="15" fill="rgb(220,149,46)"/><text x="88.00" y="174.50"></text></g><g><title>_getitem_bool_array (pandas/core/frame.py:2969) (140 samples, 0.54%)</title><rect x="85" y="180" width="6" height="15" fill="rgb(207,152,52)"/><text x="88.00" y="190.50"></text></g><g><title>_take (pandas/core/generic.py:3359) (140 samples, 0.54%)</title><rect x="85" y="196" width="6" height="15" fill="rgb(240,48,13)"/><text x="88.00" y="206.50"></text></g><g><title>take (pandas/core/internals/managers.py:1350) (123 samples, 0.47%)</title><rect x="85" y="212" width="6" height="15" fill="rgb(221,125,18)"/><text x="88.00" y="222.50"></text></g><g><title>approximate_dependencies (dfd.py:322) (555 samples, 2.14%)</title><rect x="66" y="132" width="25" height="15" fill="rgb(222,138,44)"/><text x="69.00" y="142.50">a..</text></g><g><title>drop_duplicates (pandas/core/frame.py:4637) (149 samples, 0.57%)</title><rect x="84" y="148" width="7" height="15" fill="rgb(233,53,48)"/><text x="87.00" y="158.50"></text></g><g><title>__init__ (pandas/core/reshape/merge.py:529) (32 samples, 0.12%)</title><rect x="92" y="180" width="1" height="15" fill="rgb(213,202,4)"/><text x="95.00" y="190.50"></text></g><g><title>_get_merge_keys (pandas/core/reshape/merge.py:885) (30 samples, 0.12%)</title><rect x="92" y="196" width="1" height="15" fill="rgb(209,147,0)"/><text x="95.00" y="206.50"></text></g><g><title>merge (pandas/core/reshape/merge.py:47) (34 samples, 0.13%)</title><rect x="92" y="164" width="1" height="15" fill="rgb(232,158,33)"/><text x="95.00" y="174.50"></text></g><g><title>get_result (pandas/core/reshape/merge.py:544) (31 samples, 0.12%)</title><rect x="94" y="180" width="1" height="15" fill="rgb(212,165,41)"/><text x="97.00" y="190.50"></text></g><g><title>_factorize_keys (pandas/core/reshape/merge.py:1661) (147 samples, 0.57%)</title><rect x="95" y="244" width="7" height="15" fill="rgb(224,86,0)"/><text x="98.00" y="254.50"></text></g><g><title>_factorize_keys (pandas/core/reshape/merge.py:1662) (128 samples, 0.49%)</title><rect x="102" y="244" width="6" height="15" fill="rgb(205,184,5)"/><text x="105.00" y="254.50"></text></g><g><title>_get_join_indexers (pandas/core/reshape/merge.py:1130) (290 samples, 1.12%)</title><rect x="95" y="228" width="14" height="15" fill="rgb(207,75,54)"/><text x="98.00" y="238.50"></text></g><g><title>_factorize_keys (pandas/core/reshape/merge.py:1661) (44 samples, 0.17%)</title><rect x="110" y="260" width="2" height="15" fill="rgb(250,67,19)"/><text x="113.00" y="270.50"></text></g><g><title>_get_join_keys (pandas/core/reshape/merge.py:1722) (68 samples, 0.26%)</title><rect x="110" y="244" width="3" height="15" fill="rgb(253,40,21)"/><text x="113.00" y="254.50"></text></g><g><title>_get_join_indexers (pandas/core/reshape/merge.py:1133) (103 samples, 0.40%)</title><rect x="109" y="228" width="4" height="15" fill="rgb(206,171,10)"/><text x="112.00" y="238.50"></text></g><g><title>_factorize_keys (pandas/core/reshape/merge.py:1661) (26 samples, 0.10%)</title><rect x="113" y="244" width="1" height="15" fill="rgb(226,75,6)"/><text x="116.00" y="254.50"></text></g><g><title>_factorize_keys (pandas/core/reshape/merge.py:1662) (30 samples, 0.12%)</title><rect x="114" y="244" width="2" height="15" fill="rgb(227,99,50)"/><text x="117.00" y="254.50"></text></g><g><title>_get_join_indexers (pandas/core/reshape/merge.py:1138) (61 samples, 0.24%)</title><rect x="113" y="228" width="3" height="15" fill="rgb(223,115,16)"/><text x="116.00" y="238.50"></text></g><g><title>_get_join_info (pandas/core/reshape/merge.py:756) (484 samples, 1.86%)</title><rect x="95" y="196" width="22" height="15" fill="rgb(245,202,51)"/><text x="98.00" y="206.50">_..</text></g><g><title>_get_join_indexers (pandas/core/reshape/merge.py:735) (484 samples, 1.86%)</title><rect x="95" y="212" width="22" height="15" fill="rgb(237,24,42)"/><text x="98.00" y="222.50">_..</text></g><g><title>_get_join_indexers (pandas/core/reshape/merge.py:1146) (25 samples, 0.10%)</title><rect x="116" y="228" width="1" height="15" fill="rgb(206,133,7)"/><text x="119.00" y="238.50"></text></g><g><title>get_result (pandas/core/reshape/merge.py:546) (485 samples, 1.87%)</title><rect x="95" y="180" width="22" height="15" fill="rgb(242,139,20)"/><text x="98.00" y="190.50">g..</text></g><g><title>concatenate_join_units (pandas/core/internals/concat.py:242) (35 samples, 0.13%)</title><rect x="118" y="212" width="1" height="15" fill="rgb(244,114,52)"/><text x="121.00" y="222.50"></text></g><g><title>&lt;listcomp&gt; (pandas/core/internals/concat.py:242) (35 samples, 0.13%)</title><rect x="118" y="228" width="1" height="15" fill="rgb(249,127,27)"/><text x="121.00" y="238.50"></text></g><g><title>get_reindexed_values (pandas/core/internals/concat.py:225) (35 samples, 0.13%)</title><rect x="118" y="244" width="1" height="15" fill="rgb(224,86,47)"/><text x="121.00" y="254.50"></text></g><g><title>concatenate_block_managers (pandas/core/internals/managers.py:2061) (44 samples, 0.17%)</title><rect x="117" y="196" width="2" height="15" fill="rgb(228,107,45)"/><text x="120.00" y="206.50"></text></g><g><title>get_result (pandas/core/reshape/merge.py:560) (53 samples, 0.20%)</title><rect x="117" y="180" width="3" height="15" fill="rgb(247,98,44)"/><text x="120.00" y="190.50"></text></g><g><title>__init__ (pandas/core/arrays/categorical.py:383) (55 samples, 0.21%)</title><rect x="120" y="212" width="3" height="15" fill="rgb(222,145,10)"/><text x="123.00" y="222.50"></text></g><g><title>_get_codes_for_values (pandas/core/arrays/categorical.py:2593) (27 samples, 0.10%)</title><rect x="122" y="228" width="1" height="15" fill="rgb(235,44,24)"/><text x="125.00" y="238.50"></text></g><g><title>_indicator_post_merge (pandas/core/reshape/merge.py:605) (61 samples, 0.24%)</title><rect x="120" y="196" width="3" height="15" fill="rgb(232,47,44)"/><text x="123.00" y="206.50"></text></g><g><title>_merge_blocks (pandas/core/internals/blocks.py:3149) (22 samples, 0.08%)</title><rect x="124" y="404" width="1" height="15" fill="rgb(235,51,28)"/><text x="127.00" y="414.50"></text></g><g><title>reindex (pandas/core/generic.py:4337) (34 samples, 0.13%)</title><rect x="123" y="292" width="2" height="15" fill="rgb(228,172,27)"/><text x="126.00" y="302.50"></text></g><g><title>_consolidate_inplace (pandas/core/generic.py:5138) (34 samples, 0.13%)</title><rect x="123" y="308" width="2" height="15" fill="rgb(240,162,4)"/><text x="126.00" y="318.50"></text></g><g><title>_protect_consolidate (pandas/core/generic.py:5127) (34 samples, 0.13%)</title><rect x="123" y="324" width="2" height="15" fill="rgb(217,199,23)"/><text x="126.00" y="334.50"></text></g><g><title>f (pandas/core/generic.py:5136) (34 samples, 0.13%)</title><rect x="123" y="340" width="2" height="15" fill="rgb(205,5,51)"/><text x="126.00" y="350.50"></text></g><g><title>consolidate (pandas/core/internals/managers.py:924) (30 samples, 0.12%)</title><rect x="124" y="356" width="1" height="15" fill="rgb(245,125,23)"/><text x="127.00" y="366.50"></text></g><g><title>_consolidate_inplace (pandas/core/internals/managers.py:929) (30 samples, 0.12%)</title><rect x="124" y="372" width="1" height="15" fill="rgb(212,160,51)"/><text x="127.00" y="382.50"></text></g><g><title>_consolidate (pandas/core/internals/managers.py:1899) (29 samples, 0.11%)</title><rect x="124" y="388" width="1" height="15" fill="rgb(224,54,2)"/><text x="127.00" y="398.50"></text></g><g><title>get_result (pandas/core/reshape/merge.py:566) (149 samples, 0.57%)</title><rect x="120" y="180" width="6" height="15" fill="rgb(253,77,46)"/><text x="123.00" y="190.50"></text></g><g><title>_indicator_post_merge (pandas/core/reshape/merge.py:611) (70 samples, 0.27%)</title><rect x="123" y="196" width="3" height="15" fill="rgb(232,147,10)"/><text x="126.00" y="206.50"></text></g><g><title>drop (pandas/core/frame.py:3940) (70 samples, 0.27%)</title><rect x="123" y="212" width="3" height="15" fill="rgb(237,9,17)"/><text x="126.00" y="222.50"></text></g><g><title>drop (pandas/core/generic.py:3780) (70 samples, 0.27%)</title><rect x="123" y="228" width="3" height="15" fill="rgb(254,216,7)"/><text x="126.00" y="238.50"></text></g><g><title>_drop_axis (pandas/core/generic.py:3813) (67 samples, 0.26%)</title><rect x="123" y="244" width="3" height="15" fill="rgb(222,199,4)"/><text x="126.00" y="254.50"></text></g><g><title>wrapper (pandas/util/_decorators.py:197) (67 samples, 0.26%)</title><rect x="123" y="260" width="3" height="15" fill="rgb(214,1,23)"/><text x="126.00" y="270.50"></text></g><g><title>reindex (pandas/core/frame.py:3809) (67 samples, 0.26%)</title><rect x="123" y="276" width="3" height="15" fill="rgb(218,22,30)"/><text x="126.00" y="286.50"></text></g><g><title>reindex (pandas/core/generic.py:4356) (31 samples, 0.12%)</title><rect x="125" y="292" width="1" height="15" fill="rgb(211,16,16)"/><text x="128.00" y="302.50"></text></g><g><title>_reindex_axes (pandas/core/frame.py:3736) (31 samples, 0.12%)</title><rect x="125" y="308" width="1" height="15" fill="rgb(242,17,27)"/><text x="128.00" y="318.50"></text></g><g><title>_reindex_columns (pandas/core/frame.py:3761) (31 samples, 0.12%)</title><rect x="125" y="324" width="1" height="15" fill="rgb(226,216,3)"/><text x="128.00" y="334.50"></text></g><g><title>_reindex_with_indexers (pandas/core/generic.py:4490) (31 samples, 0.12%)</title><rect x="125" y="340" width="1" height="15" fill="rgb(243,95,11)"/><text x="128.00" y="350.50"></text></g><g><title>reindex_indexer (pandas/core/internals/managers.py:1231) (31 samples, 0.12%)</title><rect x="125" y="356" width="1" height="15" fill="rgb(215,125,33)"/><text x="128.00" y="366.50"></text></g><g><title>_slice_take_blocks_ax0 (pandas/core/internals/managers.py:1312) (29 samples, 0.11%)</title><rect x="125" y="372" width="1" height="15" fill="rgb(233,5,12)"/><text x="128.00" y="382.50"></text></g><g><title>take_nd (pandas/core/internals/blocks.py:1234) (29 samples, 0.11%)</title><rect x="125" y="388" width="1" height="15" fill="rgb(229,140,49)"/><text x="128.00" y="398.50"></text></g><g><title>__new__ (pandas/core/indexes/base.py:422) (53 samples, 0.20%)</title><rect x="129" y="212" width="3" height="15" fill="rgb(221,190,54)"/><text x="132.00" y="222.50"></text></g><g><title>_maybe_add_join_keys (pandas/core/reshape/merge.py:713) (82 samples, 0.32%)</title><rect x="129" y="196" width="3" height="15" fill="rgb(211,117,38)"/><text x="132.00" y="206.50"></text></g><g><title>_set_item (pandas/core/generic.py:3172) (26 samples, 0.10%)</title><rect x="134" y="244" width="1" height="15" fill="rgb(228,6,5)"/><text x="137.00" y="254.50"></text></g><g><title>_set_item (pandas/core/frame.py:3446) (29 samples, 0.11%)</title><rect x="134" y="228" width="1" height="15" fill="rgb(206,72,38)"/><text x="137.00" y="238.50"></text></g><g><title>get_result (pandas/core/reshape/merge.py:568) (185 samples, 0.71%)</title><rect x="126" y="180" width="9" height="15" fill="rgb(235,65,36)"/><text x="129.00" y="190.50"></text></g><g><title>_maybe_add_join_keys (pandas/core/reshape/merge.py:716) (50 samples, 0.19%)</title><rect x="133" y="196" width="2" height="15" fill="rgb(250,180,13)"/><text x="136.00" y="206.50"></text></g><g><title>__setitem__ (pandas/core/frame.py:3370) (48 samples, 0.18%)</title><rect x="133" y="212" width="2" height="15" fill="rgb(237,97,6)"/><text x="136.00" y="222.50"></text></g><g><title>approximate_dependencies (dfd.py:330) (960 samples, 3.70%)</title><rect x="91" y="132" width="44" height="15" fill="rgb(210,87,6)"/><text x="94.00" y="142.50">appr..</text></g><g><title>merge (pandas/core/frame.py:6868) (960 samples, 3.70%)</title><rect x="91" y="148" width="44" height="15" fill="rgb(230,185,19)"/><text x="94.00" y="158.50">merg..</text></g><g><title>merge (pandas/core/reshape/merge.py:48) (915 samples, 3.53%)</title><rect x="93" y="164" width="42" height="15" fill="rgb(234,214,29)"/><text x="96.00" y="174.50">mer..</text></g><g><title>approximate_dependencies (dfd.py:331) (27 samples, 0.10%)</title><rect x="135" y="132" width="1" height="15" fill="rgb(205,148,34)"/><text x="138.00" y="142.50"></text></g><g><title>__init__ (pandas/core/series.py:240) (26 samples, 0.10%)</title><rect x="138" y="164" width="2" height="15" fill="rgb(208,87,5)"/><text x="141.00" y="174.50"></text></g><g><title>_try_cast (pandas/core/internals/construction.py:688) (47 samples, 0.18%)</title><rect x="141" y="196" width="2" height="15" fill="rgb(227,125,45)"/><text x="144.00" y="206.50"></text></g><g><title>maybe_castable (pandas/core/dtypes/cast.py:843) (44 samples, 0.17%)</title><rect x="141" y="212" width="2" height="15" fill="rgb(227,66,36)"/><text x="144.00" y="222.50"></text></g><g><title>maybe_cast_to_datetime (pandas/core/dtypes/cast.py:1067) (67 samples, 0.26%)</title><rect x="144" y="212" width="3" height="15" fill="rgb(254,146,38)"/><text x="147.00" y="222.50"></text></g><g><title>_try_cast (pandas/core/internals/construction.py:697) (100 samples, 0.39%)</title><rect x="143" y="196" width="5" height="15" fill="rgb(240,101,45)"/><text x="146.00" y="206.50"></text></g><g><title>_try_cast (pandas/core/internals/construction.py:704) (35 samples, 0.13%)</title><rect x="148" y="196" width="2" height="15" fill="rgb(232,50,29)"/><text x="151.00" y="206.50"></text></g><g><title>sanitize_array (pandas/core/internals/construction.py:582) (206 samples, 0.79%)</title><rect x="141" y="180" width="9" height="15" fill="rgb(218,145,52)"/><text x="144.00" y="190.50"></text></g><g><title>__init__ (pandas/core/series.py:262) (293 samples, 1.13%)</title><rect x="140" y="164" width="13" height="15" fill="rgb(227,61,25)"/><text x="143.00" y="174.50"></text></g><g><title>sanitize_array (pandas/core/internals/construction.py:674) (61 samples, 0.24%)</title><rect x="150" y="180" width="3" height="15" fill="rgb(229,51,49)"/><text x="153.00" y="190.50"></text></g><g><title>get_block_type (pandas/core/internals/blocks.py:3060) (27 samples, 0.10%)</title><rect x="155" y="212" width="2" height="15" fill="rgb(215,42,2)"/><text x="158.00" y="222.50"></text></g><g><title>make_block (pandas/core/internals/blocks.py:3088) (84 samples, 0.32%)</title><rect x="154" y="196" width="3" height="15" fill="rgb(216,34,38)"/><text x="157.00" y="206.50"></text></g><g><title>__init__ (pandas/core/internals/managers.py:1481) (103 samples, 0.40%)</title><rect x="153" y="180" width="5" height="15" fill="rgb(251,63,50)"/><text x="156.00" y="190.50"></text></g><g><title>__init__ (pandas/core/series.py:264) (112 samples, 0.43%)</title><rect x="153" y="164" width="5" height="15" fill="rgb(222,99,35)"/><text x="156.00" y="174.50"></text></g><g><title>__init__ (pandas/core/series.py:268) (27 samples, 0.10%)</title><rect x="159" y="164" width="1" height="15" fill="rgb(206,80,25)"/><text x="162.00" y="174.50"></text></g><g><title>iterrows (pandas/core/frame.py:846) (497 samples, 1.91%)</title><rect x="138" y="148" width="22" height="15" fill="rgb(226,173,34)"/><text x="141.00" y="158.50">i..</text></g><g><title>approximate_dependencies (dfd.py:335) (512 samples, 1.97%)</title><rect x="137" y="132" width="23" height="15" fill="rgb(231,223,27)"/><text x="140.00" y="142.50">a..</text></g><g><title>__getitem__ (pandas/core/series.py:868) (66 samples, 0.25%)</title><rect x="936" y="148" width="3" height="15" fill="rgb(246,162,2)"/><text x="939.00" y="158.50"></text></g><g><title>approximate_dependencies (dfd.py:336) (17,124 samples, 65.97%)</title><rect x="160" y="132" width="779" height="15" fill="rgb(218,29,30)"/><text x="163.00" y="142.50">approximate_dependencies (dfd.py:336)</text></g><g><title>get_value (pandas/core/indexes/base.py:4351) (48 samples, 0.18%)</title><rect x="943" y="164" width="2" height="15" fill="rgb(229,9,52)"/><text x="946.00" y="174.50"></text></g><g><title>_values (pandas/core/series.py:481) (38 samples, 0.15%)</title><rect x="943" y="180" width="2" height="15" fill="rgb(213,22,30)"/><text x="946.00" y="190.50"></text></g><g><title>internal_values (pandas/core/internals/managers.py:1550) (28 samples, 0.11%)</title><rect x="944" y="196" width="1" height="15" fill="rgb(238,103,7)"/><text x="947.00" y="206.50"></text></g><g><title>get_value (pandas/core/indexes/base.py:4369) (56 samples, 0.22%)</title><rect x="945" y="164" width="3" height="15" fill="rgb(228,137,4)"/><text x="948.00" y="174.50"></text></g><g><title>get_values (pandas/core/series.py:494) (43 samples, 0.17%)</title><rect x="946" y="180" width="2" height="15" fill="rgb(230,222,0)"/><text x="949.00" y="190.50"></text></g><g><title>get_values (pandas/core/internals/managers.py:1558) (41 samples, 0.16%)</title><rect x="946" y="196" width="2" height="15" fill="rgb(206,192,21)"/><text x="949.00" y="206.50"></text></g><g><title>_convert_scalar_indexer (pandas/core/indexes/base.py:2856) (31 samples, 0.12%)</title><rect x="949" y="180" width="2" height="15" fill="rgb(207,126,22)"/><text x="952.00" y="190.50"></text></g><g><title>get_value (pandas/core/indexes/base.py:4372) (49 samples, 0.19%)</title><rect x="949" y="164" width="2" height="15" fill="rgb(213,193,30)"/><text x="952.00" y="174.50"></text></g><g><title>__getitem__ (pandas/core/series.py:868) (266 samples, 1.02%)</title><rect x="941" y="148" width="12" height="15" fill="rgb(234,157,7)"/><text x="944.00" y="158.50"></text></g><g><title>get_value (pandas/core/indexes/base.py:4375) (47 samples, 0.18%)</title><rect x="951" y="164" width="2" height="15" fill="rgb(253,45,32)"/><text x="954.00" y="174.50"></text></g><g><title>approximate_dependencies (dfd.py:338) (322 samples, 1.24%)</title><rect x="939" y="132" width="15" height="15" fill="rgb(228,96,25)"/><text x="942.00" y="142.50"></text></g><g><title>approximate_dependencies (dfd.py:340) (891 samples, 3.43%)</title><rect x="954" y="132" width="41" height="15" fill="rgb(239,74,53)"/><text x="957.00" y="142.50">app..</text></g><g><title>approximate_dependencies (dfd.py:342) (492 samples, 1.90%)</title><rect x="995" y="132" width="22" height="15" fill="rgb(226,133,22)"/><text x="998.00" y="142.50">a..</text></g><g><title>__getitem__ (pandas/core/frame.py:2898) (29 samples, 0.11%)</title><rect x="1019" y="148" width="1" height="15" fill="rgb(245,151,23)"/><text x="1022.00" y="158.50"></text></g><g><title>is_bool_indexer (pandas/core/common.py:127) (36 samples, 0.14%)</title><rect x="1022" y="164" width="2" height="15" fill="rgb(221,162,53)"/><text x="1025.00" y="174.50"></text></g><g><title>__getitem__ (pandas/core/frame.py:2917) (62 samples, 0.24%)</title><rect x="1021" y="148" width="3" height="15" fill="rgb(207,44,20)"/><text x="1024.00" y="158.50"></text></g><g><title>is_sparse (pandas/core/dtypes/common.py:216) (25 samples, 0.10%)</title><rect x="1026" y="196" width="1" height="15" fill="rgb(242,164,51)"/><text x="1029.00" y="206.50"></text></g><g><title>check_bool_indexer (pandas/core/indexing.py:2490) (31 samples, 0.12%)</title><rect x="1026" y="180" width="1" height="15" fill="rgb(248,55,52)"/><text x="1029.00" y="190.50"></text></g><g><title>_getitem_bool_array (pandas/core/frame.py:2967) (60 samples, 0.23%)</title><rect x="1025" y="164" width="3" height="15" fill="rgb(220,130,9)"/><text x="1028.00" y="174.50"></text></g><g><title>_getitem_bool_array (pandas/core/frame.py:2968) (211 samples, 0.81%)</title><rect x="1028" y="164" width="10" height="15" fill="rgb(216,120,34)"/><text x="1031.00" y="174.50"></text></g><g><title>_protect_consolidate (pandas/core/generic.py:5127) (29 samples, 0.11%)</title><rect x="1039" y="212" width="1" height="15" fill="rgb(242,11,13)"/><text x="1042.00" y="222.50"></text></g><g><title>f (pandas/core/generic.py:5136) (28 samples, 0.11%)</title><rect x="1039" y="228" width="1" height="15" fill="rgb(238,111,0)"/><text x="1042.00" y="238.50"></text></g><g><title>_take (pandas/core/generic.py:3355) (54 samples, 0.21%)</title><rect x="1038" y="180" width="2" height="15" fill="rgb(210,42,44)"/><text x="1041.00" y="190.50"></text></g><g><title>_consolidate_inplace (pandas/core/generic.py:5138) (46 samples, 0.18%)</title><rect x="1038" y="196" width="2" height="15" fill="rgb(206,200,49)"/><text x="1041.00" y="206.50"></text></g><g><title>take (pandas/core/internals/managers.py:1337) (25 samples, 0.10%)</title><rect x="1041" y="196" width="1" height="15" fill="rgb(246,198,3)"/><text x="1044.00" y="206.50"></text></g><g><title>asanyarray (numpy/core/numeric.py:591) (23 samples, 0.09%)</title><rect x="1041" y="212" width="1" height="15" fill="rgb(228,77,6)"/><text x="1044.00" y="222.50"></text></g><g><title>take (pandas/core/internals/managers.py:1339) (28 samples, 0.11%)</title><rect x="1042" y="196" width="2" height="15" fill="rgb(248,7,4)"/><text x="1045.00" y="206.50"></text></g><g><title>shape (pandas/core/internals/managers.py:141) (27 samples, 0.10%)</title><rect x="1043" y="212" width="1" height="15" fill="rgb(239,112,18)"/><text x="1046.00" y="222.50"></text></g><g><title>maybe_convert_indices (pandas/core/indexing.py:2608) (31 samples, 0.12%)</title><rect x="1044" y="212" width="2" height="15" fill="rgb(214,104,5)"/><text x="1047.00" y="222.50"></text></g><g><title>maybe_convert_indices (pandas/core/indexing.py:2609) (46 samples, 0.18%)</title><rect x="1046" y="212" width="2" height="15" fill="rgb(248,112,47)"/><text x="1049.00" y="222.50"></text></g><g><title>_any (numpy/core/_methods.py:43) (34 samples, 0.13%)</title><rect x="1046" y="228" width="2" height="15" fill="rgb(243,35,35)"/><text x="1049.00" y="238.50"></text></g><g><title>maybe_convert_indices (pandas/core/indexing.py:2613) (23 samples, 0.09%)</title><rect x="1048" y="212" width="1" height="15" fill="rgb(250,122,35)"/><text x="1051.00" y="222.50"></text></g><g><title>take (pandas/core/internals/managers.py:1341) (120 samples, 0.46%)</title><rect x="1044" y="196" width="5" height="15" fill="rgb(217,197,43)"/><text x="1047.00" y="206.50"></text></g><g><title>take (pandas/core/internals/managers.py:1344) (22 samples, 0.08%)</title><rect x="1049" y="196" width="1" height="15" fill="rgb(239,178,12)"/><text x="1052.00" y="206.50"></text></g><g><title>__new__ (pandas/core/indexes/base.py:279) (26 samples, 0.10%)</title><rect x="1054" y="260" width="1" height="15" fill="rgb(223,131,44)"/><text x="1057.00" y="270.50"></text></g><g><title>__new__ (pandas/core/indexes/base.py:292) (35 samples, 0.13%)</title><rect x="1056" y="260" width="2" height="15" fill="rgb(207,217,9)"/><text x="1059.00" y="270.50"></text></g><g><title>take (pandas/core/internals/managers.py:1348) (286 samples, 1.10%)</title><rect x="1050" y="196" width="13" height="15" fill="rgb(234,168,30)"/><text x="1053.00" y="206.50"></text></g><g><title>take (pandas/core/indexes/base.py:800) (266 samples, 1.02%)</title><rect x="1051" y="212" width="12" height="15" fill="rgb(216,154,11)"/><text x="1054.00" y="222.50"></text></g><g><title>_shallow_copy (pandas/core/indexes/numeric.py:71) (260 samples, 1.00%)</title><rect x="1051" y="228" width="12" height="15" fill="rgb(247,136,50)"/><text x="1054.00" y="238.50"></text></g><g><title>_shallow_copy_with_infer (pandas/core/indexes/base.py:607) (230 samples, 0.89%)</title><rect x="1053" y="244" width="10" height="15" fill="rgb(246,10,50)"/><text x="1056.00" y="254.50"></text></g><g><title>__new__ (pandas/core/indexes/base.py:404) (50 samples, 0.19%)</title><rect x="1061" y="260" width="2" height="15" fill="rgb(210,11,23)"/><text x="1064.00" y="270.50"></text></g><g><title>__new__ (pandas/core/indexes/numeric.py:58) (25 samples, 0.10%)</title><rect x="1062" y="276" width="1" height="15" fill="rgb(247,153,32)"/><text x="1065.00" y="286.50"></text></g><g><title>take_nd (pandas/core/algorithms.py:1586) (26 samples, 0.10%)</title><rect x="1067" y="260" width="1" height="15" fill="rgb(225,7,25)"/><text x="1070.00" y="270.50"></text></g><g><title>take_nd (pandas/core/algorithms.py:1588) (23 samples, 0.09%)</title><rect x="1068" y="260" width="1" height="15" fill="rgb(206,12,39)"/><text x="1071.00" y="270.50"></text></g><g><title>is_interval_dtype (pandas/core/dtypes/common.py:569) (22 samples, 0.08%)</title><rect x="1068" y="276" width="1" height="15" fill="rgb(215,33,29)"/><text x="1071.00" y="286.50"></text></g><g><title>maybe_promote (pandas/core/dtypes/cast.py:316) (27 samples, 0.10%)</title><rect x="1073" y="276" width="2" height="15" fill="rgb(249,73,19)"/><text x="1076.00" y="286.50"></text></g><g><title>is_datetime64tz_dtype (pandas/core/dtypes/common.py:469) (27 samples, 0.10%)</title><rect x="1073" y="292" width="2" height="15" fill="rgb(253,56,5)"/><text x="1076.00" y="302.50"></text></g><g><title>take_nd (pandas/core/algorithms.py:1609) (82 samples, 0.32%)</title><rect x="1071" y="260" width="4" height="15" fill="rgb(209,90,54)"/><text x="1074.00" y="270.50"></text></g><g><title>take_nd (pandas/core/algorithms.py:1616) (24 samples, 0.09%)</title><rect x="1075" y="260" width="2" height="15" fill="rgb(254,229,10)"/><text x="1078.00" y="270.50"></text></g><g><title>issubdtype (numpy/core/numerictypes.py:392) (24 samples, 0.09%)</title><rect x="1082" y="308" width="1" height="15" fill="rgb(248,23,23)"/><text x="1085.00" y="318.50"></text></g><g><title>_name_get (numpy/core/_dtype.py:334) (48 samples, 0.18%)</title><rect x="1082" y="292" width="2" height="15" fill="rgb(216,204,7)"/><text x="1085.00" y="302.50"></text></g><g><title>_get_take_nd_function (pandas/core/algorithms.py:1419) (112 samples, 0.43%)</title><rect x="1079" y="276" width="5" height="15" fill="rgb(240,37,32)"/><text x="1082.00" y="286.50"></text></g><g><title>take_nd (pandas/core/algorithms.py:1654) (121 samples, 0.47%)</title><rect x="1079" y="260" width="5" height="15" fill="rgb(231,225,22)"/><text x="1082.00" y="270.50"></text></g><g><title>take_nd (pandas/core/algorithms.py:1655) (82 samples, 0.32%)</title><rect x="1084" y="260" width="4" height="15" fill="rgb(233,214,27)"/><text x="1087.00" y="270.50"></text></g><g><title>take_nd (pandas/core/internals/blocks.py:1238) (502 samples, 1.93%)</title><rect x="1065" y="244" width="23" height="15" fill="rgb(222,11,35)"/><text x="1068.00" y="254.50">t..</text></g><g><title>reindex_indexer (pandas/core/internals/managers.py:1235) (605 samples, 2.33%)</title><rect x="1064" y="212" width="27" height="15" fill="rgb(227,24,27)"/><text x="1067.00" y="222.50">r..</text></g><g><title>&lt;listcomp&gt; (pandas/core/internals/managers.py:1235) (601 samples, 2.32%)</title><rect x="1064" y="228" width="27" height="15" fill="rgb(245,226,43)"/><text x="1067.00" y="238.50">&lt;..</text></g><g><title>take_nd (pandas/core/internals/blocks.py:1253) (53 samples, 0.20%)</title><rect x="1089" y="244" width="2" height="15" fill="rgb(235,85,36)"/><text x="1092.00" y="254.50"></text></g><g><title>make_block_same_class (pandas/core/internals/blocks.py:235) (42 samples, 0.16%)</title><rect x="1089" y="260" width="2" height="15" fill="rgb(226,184,44)"/><text x="1092.00" y="270.50"></text></g><g><title>make_block (pandas/core/internals/blocks.py:3095) (37 samples, 0.14%)</title><rect x="1090" y="276" width="1" height="15" fill="rgb(233,186,23)"/><text x="1093.00" y="286.50"></text></g><g><title>__init__ (pandas/core/internals/managers.py:114) (37 samples, 0.14%)</title><rect x="1092" y="228" width="2" height="15" fill="rgb(224,180,17)"/><text x="1095.00" y="238.50"></text></g><g><title>_consolidate_check (pandas/core/internals/managers.py:600) (107 samples, 0.41%)</title><rect x="1094" y="244" width="5" height="15" fill="rgb(235,36,47)"/><text x="1097.00" y="254.50"></text></g><g><title>&lt;listcomp&gt; (pandas/core/internals/managers.py:600) (104 samples, 0.40%)</title><rect x="1094" y="260" width="5" height="15" fill="rgb(223,123,16)"/><text x="1097.00" y="270.50"></text></g><g><title>ftype (pandas/core/internals/blocks.py:318) (92 samples, 0.35%)</title><rect x="1095" y="276" width="4" height="15" fill="rgb(225,184,12)"/><text x="1098.00" y="286.50"></text></g><g><title>__str__ (numpy/core/_dtype.py:54) (41 samples, 0.16%)</title><rect x="1097" y="292" width="2" height="15" fill="rgb(230,60,5)"/><text x="1100.00" y="302.50"></text></g><g><title>__init__ (pandas/core/internals/managers.py:116) (118 samples, 0.45%)</title><rect x="1094" y="228" width="5" height="15" fill="rgb(239,113,54)"/><text x="1097.00" y="238.50"></text></g><g><title>_rebuild_blknos_and_blklocs (pandas/core/internals/managers.py:190) (35 samples, 0.13%)</title><rect x="1099" y="244" width="2" height="15" fill="rgb(218,218,29)"/><text x="1102.00" y="254.50"></text></g><g><title>_rebuild_blknos_and_blklocs (pandas/core/internals/managers.py:198) (35 samples, 0.13%)</title><rect x="1103" y="244" width="1" height="15" fill="rgb(248,181,28)"/><text x="1106.00" y="254.50"></text></g><g><title>_rebuild_blknos_and_blklocs (pandas/core/internals/managers.py:200) (36 samples, 0.14%)</title><rect x="1104" y="244" width="2" height="15" fill="rgb(231,19,13)"/><text x="1107.00" y="254.50"></text></g><g><title>__init__ (pandas/core/internals/managers.py:118) (153 samples, 0.59%)</title><rect x="1099" y="228" width="7" height="15" fill="rgb(235,60,39)"/><text x="1102.00" y="238.50"></text></g><g><title>_take (pandas/core/generic.py:3359) (1,439 samples, 5.54%)</title><rect x="1041" y="180" width="65" height="15" fill="rgb(246,12,5)"/><text x="1044.00" y="190.50">_take (..</text></g><g><title>take (pandas/core/internals/managers.py:1350) (950 samples, 3.66%)</title><rect x="1063" y="196" width="43" height="15" fill="rgb(205,229,52)"/><text x="1066.00" y="206.50">take..</text></g><g><title>reindex_indexer (pandas/core/internals/managers.py:1239) (328 samples, 1.26%)</title><rect x="1092" y="212" width="14" height="15" fill="rgb(234,96,44)"/><text x="1095.00" y="222.50"></text></g><g><title>_take (pandas/core/generic.py:3360) (49 samples, 0.19%)</title><rect x="1106" y="180" width="3" height="15" fill="rgb(218,108,25)"/><text x="1109.00" y="190.50"></text></g><g><title>equals (pandas/core/indexes/base.py:4061) (38 samples, 0.15%)</title><rect x="1110" y="196" width="2" height="15" fill="rgb(246,223,21)"/><text x="1113.00" y="206.50"></text></g><g><title>is_object_dtype (pandas/core/dtypes/common.py:157) (36 samples, 0.14%)</title><rect x="1110" y="212" width="2" height="15" fill="rgb(214,60,43)"/><text x="1113.00" y="222.50"></text></g><g><title>_take (pandas/core/generic.py:3364) (101 samples, 0.39%)</title><rect x="1109" y="180" width="4" height="15" fill="rgb(215,199,7)"/><text x="1112.00" y="190.50"></text></g><g><title>approximate_dependencies (dfd.py:344) (2,119 samples, 8.16%)</title><rect x="1017" y="132" width="97" height="15" fill="rgb(243,136,5)"/><text x="1020.00" y="142.50">approximate..</text></g><g><title>__getitem__ (pandas/core/frame.py:2918) (1,971 samples, 7.59%)</title><rect x="1024" y="148" width="90" height="15" fill="rgb(235,43,11)"/><text x="1027.00" y="158.50">__getitem_..</text></g><g><title>_getitem_bool_array (pandas/core/frame.py:2969) (1,676 samples, 6.46%)</title><rect x="1038" y="164" width="76" height="15" fill="rgb(217,101,33)"/><text x="1041.00" y="174.50">_getitem..</text></g><g><title>iget (pandas/core/internals/managers.py:978) (29 samples, 0.11%)</title><rect x="1118" y="196" width="1" height="15" fill="rgb(228,183,26)"/><text x="1121.00" y="206.50"></text></g><g><title>make_block_same_class (pandas/core/internals/blocks.py:235) (25 samples, 0.10%)</title><rect x="1118" y="212" width="1" height="15" fill="rgb(229,99,20)"/><text x="1121.00" y="222.50"></text></g><g><title>make_block (pandas/core/internals/blocks.py:3095) (22 samples, 0.08%)</title><rect x="1118" y="228" width="1" height="15" fill="rgb(226,147,3)"/><text x="1121.00" y="238.50"></text></g><g><title>_get_item_cache (pandas/core/generic.py:3061) (99 samples, 0.38%)</title><rect x="1116" y="164" width="4" height="15" fill="rgb(238,154,9)"/><text x="1119.00" y="174.50"></text></g><g><title>get (pandas/core/internals/managers.py:952) (65 samples, 0.25%)</title><rect x="1117" y="180" width="3" height="15" fill="rgb(215,202,7)"/><text x="1120.00" y="190.50"></text></g><g><title>_box_item_values (pandas/core/frame.py:3343) (27 samples, 0.10%)</title><rect x="1120" y="180" width="1" height="15" fill="rgb(217,11,48)"/><text x="1123.00" y="190.50"></text></g><g><title>__setattr__ (pandas/core/generic.py:5079) (23 samples, 0.09%)</title><rect x="1123" y="228" width="1" height="15" fill="rgb(234,6,31)"/><text x="1126.00" y="238.50"></text></g><g><title>__init__ (pandas/core/series.py:268) (39 samples, 0.15%)</title><rect x="1123" y="212" width="1" height="15" fill="rgb(217,173,8)"/><text x="1126.00" y="222.50"></text></g><g><title>_get_item_cache (pandas/core/generic.py:3062) (104 samples, 0.40%)</title><rect x="1120" y="164" width="5" height="15" fill="rgb(249,221,6)"/><text x="1123.00" y="174.50"></text></g><g><title>_box_item_values (pandas/core/frame.py:3347) (75 samples, 0.29%)</title><rect x="1122" y="180" width="3" height="15" fill="rgb(233,44,52)"/><text x="1125.00" y="190.50"></text></g><g><title>_box_col_values (pandas/core/frame.py:3354) (68 samples, 0.26%)</title><rect x="1122" y="196" width="3" height="15" fill="rgb(238,44,15)"/><text x="1125.00" y="206.50"></text></g><g><title>__getitem__ (pandas/core/frame.py:2901) (231 samples, 0.89%)</title><rect x="1116" y="148" width="10" height="15" fill="rgb(247,229,13)"/><text x="1119.00" y="158.50"></text></g><g><title>to_numpy (pandas/core/base.py:951) (24 samples, 0.09%)</title><rect x="1126" y="148" width="1" height="15" fill="rgb(247,72,17)"/><text x="1129.00" y="158.50"></text></g><g><title>_unique1d (numpy/lib/arraysetops.py:312) (36 samples, 0.14%)</title><rect x="1128" y="164" width="2" height="15" fill="rgb(254,222,45)"/><text x="1131.00" y="174.50"></text></g><g><title>_unique1d (numpy/lib/arraysetops.py:327) (44 samples, 0.17%)</title><rect x="1132" y="164" width="2" height="15" fill="rgb(227,36,28)"/><text x="1135.00" y="174.50"></text></g><g><title>unique (numpy/lib/arraysetops.py:264) (183 samples, 0.71%)</title><rect x="1128" y="148" width="8" height="15" fill="rgb(206,78,39)"/><text x="1131.00" y="158.50"></text></g><g><title>_unique1d (numpy/lib/arraysetops.py:328) (45 samples, 0.17%)</title><rect x="1134" y="164" width="2" height="15" fill="rgb(207,75,27)"/><text x="1137.00" y="174.50"></text></g><g><title>approximate_dependencies (dfd.py:345) (497 samples, 1.91%)</title><rect x="1114" y="132" width="22" height="15" fill="rgb(219,64,35)"/><text x="1117.00" y="142.50">a..</text></g><g><title>approximate_dependencies (dfd.py:346) (44 samples, 0.17%)</title><rect x="1136" y="132" width="2" height="15" fill="rgb(217,228,30)"/><text x="1139.00" y="142.50"></text></g><g><title>find_LHSs (dfd.py:87) (24,833 samples, 95.67%)</title><rect x="11" y="100" width="1128" height="15" fill="rgb(244,0,27)"/><text x="14.00" y="110.50">find_LHSs (dfd.py:87)</text></g><g><title>compute_partitions (dfd.py:255) (24,833 samples, 95.67%)</title><rect x="11" y="116" width="1128" height="15" fill="rgb(218,173,26)"/><text x="14.00" y="126.50">compute_partitions (dfd.py:255)</text></g><g><title>approximate_dependencies (dfd.py:347) (25 samples, 0.10%)</title><rect x="1138" y="132" width="1" height="15" fill="rgb(222,69,15)"/><text x="1141.00" y="142.50"></text></g><g><title>&lt;module&gt; (pyspy.py:10) (24,856 samples, 95.76%)</title><rect x="10" y="52" width="1129" height="15" fill="rgb(235,218,30)"/><text x="13.00" y="62.50">&lt;module&gt; (pyspy.py:10)</text></g><g><title>find_dependencies (user_interaction.py:16) (24,855 samples, 95.76%)</title><rect x="10" y="68" width="1129" height="15" fill="rgb(214,109,34)"/><text x="13.00" y="78.50">find_dependencies (user_interaction.py:16)</text></g><g><title>dfd (dfd.py:32) (24,846 samples, 95.72%)</title><rect x="10" y="84" width="1129" height="15" fill="rgb(227,78,29)"/><text x="13.00" y="94.50">dfd (dfd.py:32)</text></g><g><title>&lt;module&gt; (dfd.py:2) (37 samples, 0.14%)</title><rect x="1140" y="244" width="1" height="15" fill="rgb(220,215,9)"/><text x="1143.00" y="254.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (37 samples, 0.14%)</title><rect x="1140" y="260" width="1" height="15" fill="rgb(232,50,22)"/><text x="1143.00" y="270.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (37 samples, 0.14%)</title><rect x="1140" y="276" width="1" height="15" fill="rgb(237,130,47)"/><text x="1143.00" y="286.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (37 samples, 0.14%)</title><rect x="1140" y="292" width="1" height="15" fill="rgb(243,179,35)"/><text x="1143.00" y="302.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (37 samples, 0.14%)</title><rect x="1140" y="308" width="1" height="15" fill="rgb(247,131,3)"/><text x="1143.00" y="318.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (37 samples, 0.14%)</title><rect x="1140" y="324" width="1" height="15" fill="rgb(238,222,10)"/><text x="1143.00" y="334.50"></text></g><g><title>&lt;module&gt; (pyspy.py:2) (44 samples, 0.17%)</title><rect x="1139" y="52" width="2" height="15" fill="rgb(241,14,30)"/><text x="1142.00" y="62.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (44 samples, 0.17%)</title><rect x="1139" y="68" width="2" height="15" fill="rgb(208,103,53)"/><text x="1142.00" y="78.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (44 samples, 0.17%)</title><rect x="1139" y="84" width="2" height="15" fill="rgb(214,169,41)"/><text x="1142.00" y="94.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (44 samples, 0.17%)</title><rect x="1139" y="100" width="2" height="15" fill="rgb(224,217,19)"/><text x="1142.00" y="110.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (44 samples, 0.17%)</title><rect x="1139" y="116" width="2" height="15" fill="rgb(242,86,44)"/><text x="1142.00" y="126.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (44 samples, 0.17%)</title><rect x="1139" y="132" width="2" height="15" fill="rgb(240,178,52)"/><text x="1142.00" y="142.50"></text></g><g><title>&lt;module&gt; (user_interaction.py:1) (44 samples, 0.17%)</title><rect x="1139" y="148" width="2" height="15" fill="rgb(209,159,26)"/><text x="1142.00" y="158.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (44 samples, 0.17%)</title><rect x="1139" y="164" width="2" height="15" fill="rgb(221,152,54)"/><text x="1142.00" y="174.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (44 samples, 0.17%)</title><rect x="1139" y="180" width="2" height="15" fill="rgb(250,82,2)"/><text x="1142.00" y="190.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (44 samples, 0.17%)</title><rect x="1139" y="196" width="2" height="15" fill="rgb(234,98,53)"/><text x="1142.00" y="206.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (43 samples, 0.17%)</title><rect x="1140" y="212" width="1" height="15" fill="rgb(222,159,23)"/><text x="1143.00" y="222.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (43 samples, 0.17%)</title><rect x="1140" y="228" width="1" height="15" fill="rgb(248,26,39)"/><text x="1143.00" y="238.50"></text></g><g><title>&lt;module&gt; (pandas/core/groupby/__init__.py:1) (32 samples, 0.12%)</title><rect x="1143" y="340" width="1" height="15" fill="rgb(244,173,40)"/><text x="1146.00" y="350.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (32 samples, 0.12%)</title><rect x="1143" y="356" width="1" height="15" fill="rgb(219,175,32)"/><text x="1146.00" y="366.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (32 samples, 0.12%)</title><rect x="1143" y="372" width="1" height="15" fill="rgb(214,206,1)"/><text x="1146.00" y="382.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (32 samples, 0.12%)</title><rect x="1143" y="388" width="1" height="15" fill="rgb(212,169,10)"/><text x="1146.00" y="398.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (32 samples, 0.12%)</title><rect x="1143" y="404" width="1" height="15" fill="rgb(205,123,34)"/><text x="1146.00" y="414.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (32 samples, 0.12%)</title><rect x="1143" y="420" width="1" height="15" fill="rgb(218,3,12)"/><text x="1146.00" y="430.50"></text></g><g><title>&lt;module&gt; (pandas/core/groupby/groupby.py:37) (31 samples, 0.12%)</title><rect x="1143" y="436" width="1" height="15" fill="rgb(209,129,8)"/><text x="1146.00" y="446.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (31 samples, 0.12%)</title><rect x="1143" y="452" width="1" height="15" fill="rgb(239,202,30)"/><text x="1146.00" y="462.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (31 samples, 0.12%)</title><rect x="1143" y="468" width="1" height="15" fill="rgb(226,12,16)"/><text x="1146.00" y="478.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (31 samples, 0.12%)</title><rect x="1143" y="484" width="1" height="15" fill="rgb(254,209,3)"/><text x="1146.00" y="494.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (31 samples, 0.12%)</title><rect x="1143" y="500" width="1" height="15" fill="rgb(221,124,39)"/><text x="1146.00" y="510.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (31 samples, 0.12%)</title><rect x="1143" y="516" width="1" height="15" fill="rgb(251,217,28)"/><text x="1146.00" y="526.50"></text></g><g><title>&lt;module&gt; (pandas/core/api.py:26) (36 samples, 0.14%)</title><rect x="1143" y="244" width="1" height="15" fill="rgb(241,130,25)"/><text x="1146.00" y="254.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (36 samples, 0.14%)</title><rect x="1143" y="260" width="1" height="15" fill="rgb(233,151,51)"/><text x="1146.00" y="270.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (36 samples, 0.14%)</title><rect x="1143" y="276" width="1" height="15" fill="rgb(219,105,35)"/><text x="1146.00" y="286.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (36 samples, 0.14%)</title><rect x="1143" y="292" width="1" height="15" fill="rgb(207,180,49)"/><text x="1146.00" y="302.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (36 samples, 0.14%)</title><rect x="1143" y="308" width="1" height="15" fill="rgb(230,83,0)"/><text x="1146.00" y="318.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (36 samples, 0.14%)</title><rect x="1143" y="324" width="1" height="15" fill="rgb(228,176,1)"/><text x="1146.00" y="334.50"></text></g><g><title>&lt;module&gt; (pandas/__init__.py:42) (49 samples, 0.19%)</title><rect x="1143" y="148" width="2" height="15" fill="rgb(220,158,30)"/><text x="1146.00" y="158.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (49 samples, 0.19%)</title><rect x="1143" y="164" width="2" height="15" fill="rgb(237,169,8)"/><text x="1146.00" y="174.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (49 samples, 0.19%)</title><rect x="1143" y="180" width="2" height="15" fill="rgb(206,73,27)"/><text x="1146.00" y="190.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (49 samples, 0.19%)</title><rect x="1143" y="196" width="2" height="15" fill="rgb(211,151,18)"/><text x="1146.00" y="206.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (49 samples, 0.19%)</title><rect x="1143" y="212" width="2" height="15" fill="rgb(233,105,20)"/><text x="1146.00" y="222.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (49 samples, 0.19%)</title><rect x="1143" y="228" width="2" height="15" fill="rgb(216,202,34)"/><text x="1146.00" y="238.50"></text></g><g><title>&lt;module&gt; (pyspy.py:3) (96 samples, 0.37%)</title><rect x="1141" y="52" width="5" height="15" fill="rgb(220,136,30)"/><text x="1144.00" y="62.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (96 samples, 0.37%)</title><rect x="1141" y="68" width="5" height="15" fill="rgb(224,135,22)"/><text x="1144.00" y="78.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (96 samples, 0.37%)</title><rect x="1141" y="84" width="5" height="15" fill="rgb(214,141,21)"/><text x="1144.00" y="94.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (96 samples, 0.37%)</title><rect x="1141" y="100" width="5" height="15" fill="rgb(227,205,50)"/><text x="1144.00" y="110.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (96 samples, 0.37%)</title><rect x="1141" y="116" width="5" height="15" fill="rgb(205,126,23)"/><text x="1144.00" y="126.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (96 samples, 0.37%)</title><rect x="1141" y="132" width="5" height="15" fill="rgb(223,229,39)"/><text x="1144.00" y="142.50"></text></g><g><title>read (pandas/io/parsers.py:1139) (809 samples, 3.12%)</title><rect x="1146" y="100" width="37" height="15" fill="rgb(210,126,11)"/><text x="1149.00" y="110.50">rea..</text></g><g><title>read (pandas/io/parsers.py:1995) (809 samples, 3.12%)</title><rect x="1146" y="116" width="37" height="15" fill="rgb(254,220,53)"/><text x="1149.00" y="126.50">rea..</text></g><g><title>arrays_to_mgr (pandas/core/internals/construction.py:56) (28 samples, 0.11%)</title><rect x="1183" y="148" width="1" height="15" fill="rgb(249,120,30)"/><text x="1186.00" y="158.50"></text></g><g><title>_homogenize (pandas/core/internals/construction.py:277) (28 samples, 0.11%)</title><rect x="1183" y="164" width="1" height="15" fill="rgb(235,181,1)"/><text x="1186.00" y="174.50"></text></g><g><title>sanitize_array (pandas/core/internals/construction.py:674) (28 samples, 0.11%)</title><rect x="1183" y="180" width="1" height="15" fill="rgb(226,4,49)"/><text x="1186.00" y="190.50"></text></g><g><title>_read (pandas/io/parsers.py:435) (880 samples, 3.39%)</title><rect x="1146" y="84" width="40" height="15" fill="rgb(251,7,11)"/><text x="1149.00" y="94.50">_re..</text></g><g><title>read (pandas/io/parsers.py:1154) (68 samples, 0.26%)</title><rect x="1183" y="100" width="3" height="15" fill="rgb(218,197,54)"/><text x="1186.00" y="110.50"></text></g><g><title>__init__ (pandas/core/frame.py:392) (68 samples, 0.26%)</title><rect x="1183" y="116" width="3" height="15" fill="rgb(207,103,51)"/><text x="1186.00" y="126.50"></text></g><g><title>init_dict (pandas/core/internals/construction.py:212) (68 samples, 0.26%)</title><rect x="1183" y="132" width="3" height="15" fill="rgb(242,127,48)"/><text x="1186.00" y="142.50"></text></g><g><title>arrays_to_mgr (pandas/core/internals/construction.py:61) (40 samples, 0.15%)</title><rect x="1184" y="148" width="2" height="15" fill="rgb(220,209,7)"/><text x="1187.00" y="158.50"></text></g><g><title>create_block_manager_from_arrays (pandas/core/internals/managers.py:1666) (40 samples, 0.15%)</title><rect x="1184" y="164" width="2" height="15" fill="rgb(242,208,17)"/><text x="1187.00" y="174.50"></text></g><g><title>&lt;module&gt; (pyspy.py:6) (885 samples, 3.41%)</title><rect x="1146" y="52" width="40" height="15" fill="rgb(225,29,47)"/><text x="1149.00" y="62.50">&lt;mo..</text></g><g><title>parser_f (pandas/io/parsers.py:702) (885 samples, 3.41%)</title><rect x="1146" y="68" width="40" height="15" fill="rgb(213,133,54)"/><text x="1149.00" y="78.50">par..</text></g><g><title>drop (pandas/core/indexes/base.py:4960) (25 samples, 0.10%)</title><rect x="1188" y="116" width="1" height="15" fill="rgb(229,37,40)"/><text x="1191.00" y="126.50"></text></g><g><title>get_indexer (pandas/core/indexes/base.py:2755) (25 samples, 0.10%)</title><rect x="1188" y="132" width="1" height="15" fill="rgb(232,29,24)"/><text x="1191.00" y="142.50"></text></g><g><title>_drop_axis (pandas/core/generic.py:3812) (47 samples, 0.18%)</title><rect x="1187" y="100" width="2" height="15" fill="rgb(237,38,45)"/><text x="1190.00" y="110.50"></text></g><g><title>&lt;module&gt; (pyspy.py:8) (51 samples, 0.20%)</title><rect x="1187" y="52" width="2" height="15" fill="rgb(238,56,38)"/><text x="1190.00" y="62.50"></text></g><g><title>drop (pandas/core/frame.py:3940) (51 samples, 0.20%)</title><rect x="1187" y="68" width="2" height="15" fill="rgb(207,73,33)"/><text x="1190.00" y="78.50"></text></g><g><title>drop (pandas/core/generic.py:3780) (51 samples, 0.20%)</title><rect x="1187" y="84" width="2" height="15" fill="rgb(221,225,2)"/><text x="1190.00" y="94.50"></text></g><g><title>all (25,956 samples, 100%)</title><rect x="10" y="36" width="1180" height="15" fill="rgb(216,175,24)"/><text x="13.00" y="46.50"></text></g></g></svg>
<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="454" onload="init(evt)" viewBox="0 0 1200 454" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    searching = 0;
}

window.addEventListener("click", function(e) {
	var target = find_group(e.target);
	if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);
    }
    else if (e.target.id == "unzoom") unzoom();
    else if (e.target.id == "search") search_prompt();
}, false)

// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
	var target = find_group(e.target);
	if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
	var target = find_group(e.target);
	if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function find_child(node, selector) {
	var children = node.querySelectorAll(selector);
	if (children.length) return children[0];
	return;
}
function find_group(node) {
	var parent = node.parentElement;
	if (!parent) return;
	if (parent.id == "frames") return node;
	return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) -3;
    var txt = find_child(e, "title").textContent.replace(/\\([^(]*\\)\$/,"");
    t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
        return;
    for (var x = txt.length - 2; x > 0; x--) {
        if (t.getSubStringLength(0, x + 2) <= w) {
            t.textContent = txt.substring(0, x) + "..";
            return;
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - xpad) * ratio + xpad;
            if(e.tagName == "text")
                e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x - xpad, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = xpad;
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = parseInt(svg.width.baseVal.value) - (xpad*2);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = parseFloat(xmin + width);
    var ymin = parseFloat(attr.y.value);
    var ratio = (svg.width.baseVal.value - 2 * xpad) / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.0001;
    unzoombtn.classList.remove("hide");
    var el = document.getElementById("frames").children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = document.getElementById("frames").children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = document.getElementById("frames").children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;	// JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
]]></script><rect x="0" y="0" width="1200" height="454" fill="url(#background)"/><text id="title" x="600.00" y="24.00">py-spy</text><text id="details" x="10.00" y="437.00"> </text><text id="unzoom" class="hide" x="10.00" y="24.00">Reset Zoom</text><text id="search" x="1090.00" y="24.00">Search</text><text id="matched" x="1090.00" y="437.00"> </text><g id="frames"><g><title>_factorize_array (pandas/core/algorithms.py:456) (338 samples, 0.74%)</title><rect x="20" y="228" width="9" height="15" fill="rgb(253,18,3)"/><text x="23.00" y="238.50"></text></g><g><title>_get_data_algo (pandas/core/algorithms.py:228) (336 samples, 0.73%)</title><rect x="20" y="244" width="9" height="15" fill="rgb(223,145,22)"/><text x="23.00" y="254.50"></text></g><g><title>_factorize_array (pandas/core/algorithms.py:458) (46 samples, 0.10%)</title><rect x="29" y="228" width="1" height="15" fill="rgb(212,119,3)"/><text x="32.00" y="238.50"></text></g><g><title>factorize (pandas/core/algorithms.py:613) (1,488 samples, 3.25%)</title><rect x="18" y="212" width="38" height="15" fill="rgb(236,47,26)"/><text x="21.00" y="222.50">fac..</text></g><g><title>_factorize_array (pandas/core/algorithms.py:460) (1,015 samples, 2.22%)</title><rect x="30" y="228" width="26" height="15" fill="rgb(251,187,19)"/><text x="33.00" y="238.50">_..</text></g><g><title>duplicated (pandas/core/frame.py:4687) (1,520 samples, 3.32%)</title><rect x="18" y="164" width="39" height="15" fill="rgb(217,229,28)"/><text x="21.00" y="174.50">dup..</text></g><g><title>f (pandas/core/frame.py:4668) (1,516 samples, 3.31%)</title><rect x="18" y="180" width="39" height="15" fill="rgb(221,33,37)"/><text x="21.00" y="190.50">f (..</text></g><g><title>wrapper (pandas/util/_decorators.py:188) (1,516 samples, 3.31%)</title><rect x="18" y="196" width="39" height="15" fill="rgb(243,213,42)"/><text x="21.00" y="206.50">wra..</text></g><g><title>get_group_index (pandas/core/sorting.py:62) (62 samples, 0.14%)</title><rect x="57" y="180" width="2" height="15" fill="rgb(232,202,6)"/><text x="60.00" y="190.50"></text></g><g><title>maybe_lift (pandas/core/sorting.py:58) (62 samples, 0.14%)</title><rect x="57" y="196" width="2" height="15" fill="rgb(244,195,48)"/><text x="60.00" y="206.50"></text></g><g><title>get_group_index (pandas/core/sorting.py:82) (127 samples, 0.28%)</title><rect x="59" y="180" width="3" height="15" fill="rgb(221,191,1)"/><text x="62.00" y="190.50"></text></g><g><title>duplicated (pandas/core/frame.py:4689) (220 samples, 0.48%)</title><rect x="57" y="164" width="6" height="15" fill="rgb(214,78,48)"/><text x="60.00" y="174.50"></text></g><g><title>drop_duplicates (pandas/core/frame.py:4630) (2,058 samples, 4.50%)</title><rect x="17" y="148" width="53" height="15" fill="rgb(216,48,25)"/><text x="20.00" y="158.50">drop_..</text></g><g><title>duplicated (pandas/core/frame.py:4690) (264 samples, 0.58%)</title><rect x="63" y="164" width="7" height="15" fill="rgb(210,0,34)"/><text x="66.00" y="174.50"></text></g><g><title>take_nd (pandas/core/algorithms.py:1651) (115 samples, 0.25%)</title><rect x="71" y="276" width="3" height="15" fill="rgb(233,151,51)"/><text x="74.00" y="286.50"></text></g><g><title>take_nd (pandas/core/internals/blocks.py:1238) (282 samples, 0.62%)</title><rect x="71" y="260" width="7" height="15" fill="rgb(230,30,2)"/><text x="74.00" y="270.50"></text></g><g><title>take_nd (pandas/core/algorithms.py:1655) (159 samples, 0.35%)</title><rect x="74" y="276" width="4" height="15" fill="rgb(206,41,34)"/><text x="77.00" y="286.50"></text></g><g><title>reindex_indexer (pandas/core/internals/managers.py:1235) (284 samples, 0.62%)</title><rect x="71" y="228" width="7" height="15" fill="rgb(241,184,4)"/><text x="74.00" y="238.50"></text></g><g><title>&lt;listcomp&gt; (pandas/core/internals/managers.py:1235) (284 samples, 0.62%)</title><rect x="71" y="244" width="7" height="15" fill="rgb(242,208,37)"/><text x="74.00" y="254.50"></text></g><g><title>_take (pandas/core/generic.py:3359) (329 samples, 0.72%)</title><rect x="70" y="196" width="8" height="15" fill="rgb(250,33,17)"/><text x="73.00" y="206.50"></text></g><g><title>take (pandas/core/internals/managers.py:1350) (286 samples, 0.63%)</title><rect x="71" y="212" width="7" height="15" fill="rgb(209,71,4)"/><text x="74.00" y="222.50"></text></g><g><title>__getitem__ (pandas/core/frame.py:2918) (345 samples, 0.75%)</title><rect x="70" y="164" width="9" height="15" fill="rgb(224,96,28)"/><text x="73.00" y="174.50"></text></g><g><title>_getitem_bool_array (pandas/core/frame.py:2969) (334 samples, 0.73%)</title><rect x="70" y="180" width="9" height="15" fill="rgb(210,209,34)"/><text x="73.00" y="190.50"></text></g><g><title>approximate_dependencies (dfd.py:354) (2,422 samples, 5.29%)</title><rect x="16" y="132" width="63" height="15" fill="rgb(214,62,39)"/><text x="19.00" y="142.50">approx..</text></g><g><title>drop_duplicates (pandas/core/frame.py:4637) (359 samples, 0.78%)</title><rect x="70" y="148" width="9" height="15" fill="rgb(245,20,45)"/><text x="73.00" y="158.50"></text></g><g><title>_factorize_array (pandas/core/algorithms.py:456) (104 samples, 0.23%)</title><rect x="81" y="228" width="3" height="15" fill="rgb(218,123,6)"/><text x="84.00" y="238.50"></text></g><g><title>_get_data_algo (pandas/core/algorithms.py:228) (101 samples, 0.22%)</title><rect x="81" y="244" width="3" height="15" fill="rgb(233,67,48)"/><text x="84.00" y="254.50"></text></g><g><title>factorize (pandas/core/algorithms.py:613) (568 samples, 1.24%)</title><rect x="80" y="212" width="15" height="15" fill="rgb(219,105,24)"/><text x="83.00" y="222.50"></text></g><g><title>_factorize_array (pandas/core/algorithms.py:460) (394 samples, 0.86%)</title><rect x="85" y="228" width="10" height="15" fill="rgb(210,183,43)"/><text x="88.00" y="238.50"></text></g><g><title>duplicated (pandas/core/frame.py:4687) (595 samples, 1.30%)</title><rect x="80" y="164" width="15" height="15" fill="rgb(245,136,29)"/><text x="83.00" y="174.50"></text></g><g><title>f (pandas/core/frame.py:4668) (584 samples, 1.28%)</title><rect x="80" y="180" width="15" height="15" fill="rgb(243,158,16)"/><text x="83.00" y="190.50"></text></g><g><title>wrapper (pandas/util/_decorators.py:188) (583 samples, 1.27%)</title><rect x="80" y="196" width="15" height="15" fill="rgb(246,86,17)"/><text x="83.00" y="206.50"></text></g><g><title>duplicated (pandas/core/frame.py:4689) (73 samples, 0.16%)</title><rect x="95" y="164" width="2" height="15" fill="rgb(242,226,49)"/><text x="98.00" y="174.50"></text></g><g><title>get_group_index (pandas/core/sorting.py:82) (43 samples, 0.09%)</title><rect x="96" y="180" width="1" height="15" fill="rgb(252,65,7)"/><text x="99.00" y="190.50"></text></g><g><title>drop_duplicates (pandas/core/frame.py:4630) (890 samples, 1.95%)</title><rect x="79" y="148" width="23" height="15" fill="rgb(213,192,17)"/><text x="82.00" y="158.50">d..</text></g><g><title>duplicated (pandas/core/frame.py:4690) (188 samples, 0.41%)</title><rect x="97" y="164" width="5" height="15" fill="rgb(228,19,3)"/><text x="100.00" y="174.50"></text></g><g><title>take_nd (pandas/core/algorithms.py:1651) (72 samples, 0.16%)</title><rect x="103" y="276" width="2" height="15" fill="rgb(251,4,22)"/><text x="106.00" y="286.50"></text></g><g><title>take_nd (pandas/core/internals/blocks.py:1238) (234 samples, 0.51%)</title><rect x="103" y="260" width="6" height="15" fill="rgb(206,94,7)"/><text x="106.00" y="270.50"></text></g><g><title>take_nd (pandas/core/algorithms.py:1655) (156 samples, 0.34%)</title><rect x="105" y="276" width="4" height="15" fill="rgb(227,147,20)"/><text x="108.00" y="286.50"></text></g><g><title>reindex_indexer (pandas/core/internals/managers.py:1235) (235 samples, 0.51%)</title><rect x="103" y="228" width="6" height="15" fill="rgb(205,144,46)"/><text x="106.00" y="238.50"></text></g><g><title>&lt;listcomp&gt; (pandas/core/internals/managers.py:1235) (235 samples, 0.51%)</title><rect x="103" y="244" width="6" height="15" fill="rgb(251,179,38)"/><text x="106.00" y="254.50"></text></g><g><title>_take (pandas/core/generic.py:3359) (272 samples, 0.59%)</title><rect x="102" y="196" width="7" height="15" fill="rgb(247,175,8)"/><text x="105.00" y="206.50"></text></g><g><title>take (pandas/core/internals/managers.py:1350) (236 samples, 0.52%)</title><rect x="103" y="212" width="6" height="15" fill="rgb(238,117,28)"/><text x="106.00" y="222.50"></text></g><g><title>__getitem__ (pandas/core/frame.py:2918) (288 samples, 0.63%)</title><rect x="102" y="164" width="7" height="15" fill="rgb(240,175,0)"/><text x="105.00" y="174.50"></text></g><g><title>_getitem_bool_array (pandas/core/frame.py:2969) (278 samples, 0.61%)</title><rect x="102" y="180" width="7" height="15" fill="rgb(235,119,0)"/><text x="105.00" y="190.50"></text></g><g><title>approximate_dependencies (dfd.py:355) (1,187 samples, 2.59%)</title><rect x="79" y="132" width="30" height="15" fill="rgb(215,129,24)"/><text x="82.00" y="142.50">ap..</text></g><g><title>drop_duplicates (pandas/core/frame.py:4637) (294 samples, 0.64%)</title><rect x="102" y="148" width="7" height="15" fill="rgb(224,71,33)"/><text x="105.00" y="158.50"></text></g><g><title>apply (pandas/core/internals/managers.py:395) (39 samples, 0.09%)</title><rect x="110" y="260" width="1" height="15" fill="rgb(218,66,25)"/><text x="113.00" y="270.50"></text></g><g><title>copy (pandas/core/internals/blocks.py:753) (39 samples, 0.09%)</title><rect x="110" y="276" width="1" height="15" fill="rgb(230,141,23)"/><text x="113.00" y="286.50"></text></g><g><title>_drop_labels_or_levels (pandas/core/generic.py:1784) (40 samples, 0.09%)</title><rect x="110" y="212" width="1" height="15" fill="rgb(240,19,53)"/><text x="113.00" y="222.50"></text></g><g><title>copy (pandas/core/generic.py:5804) (40 samples, 0.09%)</title><rect x="110" y="228" width="1" height="15" fill="rgb(205,3,15)"/><text x="113.00" y="238.50"></text></g><g><title>copy (pandas/core/internals/managers.py:734) (40 samples, 0.09%)</title><rect x="110" y="244" width="1" height="15" fill="rgb(228,15,11)"/><text x="113.00" y="254.50"></text></g><g><title>__init__ (pandas/core/reshape/merge.py:529) (64 samples, 0.14%)</title><rect x="110" y="180" width="2" height="15" fill="rgb(226,78,31)"/><text x="113.00" y="190.50"></text></g><g><title>_get_merge_keys (pandas/core/reshape/merge.py:885) (54 samples, 0.12%)</title><rect x="110" y="196" width="2" height="15" fill="rgb(246,49,44)"/><text x="113.00" y="206.50"></text></g><g><title>merge (pandas/core/reshape/merge.py:47) (67 samples, 0.15%)</title><rect x="110" y="164" width="2" height="15" fill="rgb(213,0,35)"/><text x="113.00" y="174.50"></text></g><g><title>get_result (pandas/core/reshape/merge.py:544) (51 samples, 0.11%)</title><rect x="112" y="180" width="2" height="15" fill="rgb(221,182,20)"/><text x="115.00" y="190.50"></text></g><g><title>_factorize_keys (pandas/core/reshape/merge.py:1661) (325 samples, 0.71%)</title><rect x="115" y="244" width="8" height="15" fill="rgb(211,60,33)"/><text x="118.00" y="254.50"></text></g><g><title>_factorize_keys (pandas/core/reshape/merge.py:1662) (317 samples, 0.69%)</title><rect x="123" y="244" width="8" height="15" fill="rgb(220,36,47)"/><text x="126.00" y="254.50"></text></g><g><title>_get_join_indexers (pandas/core/reshape/merge.py:1130) (674 samples, 1.47%)</title><rect x="114" y="228" width="18" height="15" fill="rgb(239,6,28)"/><text x="117.00" y="238.50"></text></g><g><title>_factorize_keys (pandas/core/reshape/merge.py:1661) (87 samples, 0.19%)</title><rect x="134" y="260" width="2" height="15" fill="rgb(218,91,28)"/><text x="137.00" y="270.50"></text></g><g><title>_factorize_keys (pandas/core/reshape/merge.py:1662) (76 samples, 0.17%)</title><rect x="136" y="260" width="2" height="15" fill="rgb(245,185,46)"/><text x="139.00" y="270.50"></text></g><g><title>_get_join_keys (pandas/core/reshape/merge.py:1722) (176 samples, 0.38%)</title><rect x="133" y="244" width="5" height="15" fill="rgb(244,150,18)"/><text x="136.00" y="254.50"></text></g><g><title>_get_join_indexers (pandas/core/reshape/merge.py:1133) (258 samples, 0.56%)</title><rect x="132" y="228" width="6" height="15" fill="rgb(221,71,25)"/><text x="135.00" y="238.50"></text></g><g><title>_factorize_keys (pandas/core/reshape/merge.py:1661) (89 samples, 0.19%)</title><rect x="139" y="244" width="2" height="15" fill="rgb(213,19,18)"/><text x="142.00" y="254.50"></text></g><g><title>_factorize_keys (pandas/core/reshape/merge.py:1662) (50 samples, 0.11%)</title><rect x="141" y="244" width="1" height="15" fill="rgb(243,61,18)"/><text x="144.00" y="254.50"></text></g><g><title>_get_join_indexers (pandas/core/reshape/merge.py:1138) (146 samples, 0.32%)</title><rect x="138" y="228" width="4" height="15" fill="rgb(233,173,39)"/><text x="141.00" y="238.50"></text></g><g><title>_get_join_info (pandas/core/reshape/merge.py:756) (1,165 samples, 2.55%)</title><rect x="114" y="196" width="30" height="15" fill="rgb(243,168,43)"/><text x="117.00" y="206.50">_g..</text></g><g><title>_get_join_indexers (pandas/core/reshape/merge.py:735) (1,165 samples, 2.55%)</title><rect x="114" y="212" width="30" height="15" fill="rgb(250,196,43)"/><text x="117.00" y="222.50">_g..</text></g><g><title>_get_join_indexers (pandas/core/reshape/merge.py:1146) (57 samples, 0.12%)</title><rect x="142" y="228" width="2" height="15" fill="rgb(209,190,16)"/><text x="145.00" y="238.50"></text></g><g><title>get_result (pandas/core/reshape/merge.py:546) (1,167 samples, 2.55%)</title><rect x="114" y="180" width="30" height="15" fill="rgb(252,15,31)"/><text x="117.00" y="190.50">ge..</text></g><g><title>concatenate_join_units (pandas/core/internals/concat.py:242) (85 samples, 0.19%)</title><rect x="144" y="212" width="2" height="15" fill="rgb(241,8,54)"/><text x="147.00" y="222.50"></text></g><g><title>&lt;listcomp&gt; (pandas/core/internals/concat.py:242) (85 samples, 0.19%)</title><rect x="144" y="228" width="2" height="15" fill="rgb(252,193,37)"/><text x="147.00" y="238.50"></text></g><g><title>get_reindexed_values (pandas/core/internals/concat.py:225) (85 samples, 0.19%)</title><rect x="144" y="244" width="2" height="15" fill="rgb(254,162,23)"/><text x="147.00" y="254.50"></text></g><g><title>take_nd (pandas/core/algorithms.py:1655) (46 samples, 0.10%)</title><rect x="145" y="260" width="1" height="15" fill="rgb(213,36,13)"/><text x="148.00" y="270.50"></text></g><g><title>concatenate_block_managers (pandas/core/internals/managers.py:2061) (92 samples, 0.20%)</title><rect x="144" y="196" width="2" height="15" fill="rgb(221,168,12)"/><text x="147.00" y="206.50"></text></g><g><title>get_result (pandas/core/reshape/merge.py:560) (107 samples, 0.23%)</title><rect x="144" y="180" width="3" height="15" fill="rgb(207,198,14)"/><text x="147.00" y="190.50"></text></g><g><title>__init__ (pandas/core/arrays/categorical.py:383) (111 samples, 0.24%)</title><rect x="148" y="212" width="2" height="15" fill="rgb(236,103,4)"/><text x="151.00" y="222.50"></text></g><g><title>_get_codes_for_values (pandas/core/arrays/categorical.py:2593) (62 samples, 0.14%)</title><rect x="149" y="228" width="1" height="15" fill="rgb(213,187,12)"/><text x="152.00" y="238.50"></text></g><g><title>_indicator_post_merge (pandas/core/reshape/merge.py:605) (113 samples, 0.25%)</title><rect x="148" y="196" width="2" height="15" fill="rgb(206,112,20)"/><text x="151.00" y="206.50"></text></g><g><title>_consolidate_inplace (pandas/core/internals/managers.py:929) (39 samples, 0.09%)</title><rect x="151" y="372" width="1" height="15" fill="rgb(214,120,2)"/><text x="154.00" y="382.50"></text></g><g><title>reindex (pandas/core/generic.py:4337) (40 samples, 0.09%)</title><rect x="151" y="292" width="1" height="15" fill="rgb(226,70,48)"/><text x="154.00" y="302.50"></text></g><g><title>_consolidate_inplace (pandas/core/generic.py:5138) (40 samples, 0.09%)</title><rect x="151" y="308" width="1" height="15" fill="rgb(247,135,46)"/><text x="154.00" y="318.50"></text></g><g><title>_protect_consolidate (pandas/core/generic.py:5127) (40 samples, 0.09%)</title><rect x="151" y="324" width="1" height="15" fill="rgb(208,24,45)"/><text x="154.00" y="334.50"></text></g><g><title>f (pandas/core/generic.py:5136) (40 samples, 0.09%)</title><rect x="151" y="340" width="1" height="15" fill="rgb(249,165,52)"/><text x="154.00" y="350.50"></text></g><g><title>consolidate (pandas/core/internals/managers.py:924) (40 samples, 0.09%)</title><rect x="151" y="356" width="1" height="15" fill="rgb(213,91,35)"/><text x="154.00" y="366.50"></text></g><g><title>take_nd (pandas/core/algorithms.py:1651) (42 samples, 0.09%)</title><rect x="152" y="404" width="1" height="15" fill="rgb(238,132,10)"/><text x="155.00" y="414.50"></text></g><g><title>reindex_indexer (pandas/core/internals/managers.py:1231) (80 samples, 0.17%)</title><rect x="152" y="356" width="2" height="15" fill="rgb(224,178,33)"/><text x="155.00" y="366.50"></text></g><g><title>_slice_take_blocks_ax0 (pandas/core/internals/managers.py:1312) (75 samples, 0.16%)</title><rect x="152" y="372" width="2" height="15" fill="rgb(226,89,4)"/><text x="155.00" y="382.50"></text></g><g><title>take_nd (pandas/core/internals/blocks.py:1234) (75 samples, 0.16%)</title><rect x="152" y="388" width="2" height="15" fill="rgb(236,117,27)"/><text x="155.00" y="398.50"></text></g><g><title>get_result (pandas/core/reshape/merge.py:566) (285 samples, 0.62%)</title><rect x="147" y="180" width="7" height="15" fill="rgb(210,11,10)"/><text x="150.00" y="190.50"></text></g><g><title>_indicator_post_merge (pandas/core/reshape/merge.py:611) (128 samples, 0.28%)</title><rect x="151" y="196" width="3" height="15" fill="rgb(205,112,54)"/><text x="154.00" y="206.50"></text></g><g><title>drop (pandas/core/frame.py:3940) (128 samples, 0.28%)</title><rect x="151" y="212" width="3" height="15" fill="rgb(207,93,50)"/><text x="154.00" y="222.50"></text></g><g><title>drop (pandas/core/generic.py:3780) (127 samples, 0.28%)</title><rect x="151" y="228" width="3" height="15" fill="rgb(211,16,50)"/><text x="154.00" y="238.50"></text></g><g><title>_drop_axis (pandas/core/generic.py:3813) (124 samples, 0.27%)</title><rect x="151" y="244" width="3" height="15" fill="rgb(250,113,6)"/><text x="154.00" y="254.50"></text></g><g><title>wrapper (pandas/util/_decorators.py:197) (124 samples, 0.27%)</title><rect x="151" y="260" width="3" height="15" fill="rgb(242,219,33)"/><text x="154.00" y="270.50"></text></g><g><title>reindex (pandas/core/frame.py:3809) (124 samples, 0.27%)</title><rect x="151" y="276" width="3" height="15" fill="rgb(221,59,50)"/><text x="154.00" y="286.50"></text></g><g><title>reindex (pandas/core/generic.py:4356) (83 samples, 0.18%)</title><rect x="152" y="292" width="2" height="15" fill="rgb(225,201,49)"/><text x="155.00" y="302.50"></text></g><g><title>_reindex_axes (pandas/core/frame.py:3736) (83 samples, 0.18%)</title><rect x="152" y="308" width="2" height="15" fill="rgb(220,6,8)"/><text x="155.00" y="318.50"></text></g><g><title>_reindex_columns (pandas/core/frame.py:3761) (82 samples, 0.18%)</title><rect x="152" y="324" width="2" height="15" fill="rgb(247,136,23)"/><text x="155.00" y="334.50"></text></g><g><title>_reindex_with_indexers (pandas/core/generic.py:4490) (82 samples, 0.18%)</title><rect x="152" y="340" width="2" height="15" fill="rgb(253,167,54)"/><text x="155.00" y="350.50"></text></g><g><title>_maybe_add_join_keys (pandas/core/reshape/merge.py:705) (39 samples, 0.09%)</title><rect x="155" y="196" width="1" height="15" fill="rgb(213,210,27)"/><text x="158.00" y="206.50"></text></g><g><title>__new__ (pandas/core/indexes/base.py:422) (95 samples, 0.21%)</title><rect x="156" y="212" width="2" height="15" fill="rgb(252,145,26)"/><text x="159.00" y="222.50"></text></g><g><title>_maybe_add_join_keys (pandas/core/reshape/merge.py:713) (135 samples, 0.30%)</title><rect x="156" y="196" width="3" height="15" fill="rgb(243,136,6)"/><text x="159.00" y="206.50"></text></g><g><title>get_result (pandas/core/reshape/merge.py:568) (260 samples, 0.57%)</title><rect x="154" y="180" width="7" height="15" fill="rgb(247,227,5)"/><text x="157.00" y="190.50"></text></g><g><title>_maybe_add_join_keys (pandas/core/reshape/merge.py:716) (56 samples, 0.12%)</title><rect x="159" y="196" width="2" height="15" fill="rgb(217,205,41)"/><text x="162.00" y="206.50"></text></g><g><title>__setitem__ (pandas/core/frame.py:3370) (56 samples, 0.12%)</title><rect x="159" y="212" width="2" height="15" fill="rgb(226,150,15)"/><text x="162.00" y="222.50"></text></g><g><title>approximate_dependencies (dfd.py:363) (1,988 samples, 4.35%)</title><rect x="109" y="132" width="52" height="15" fill="rgb(253,130,39)"/><text x="112.00" y="142.50">appro..</text></g><g><title>merge (pandas/core/frame.py:6868) (1,988 samples, 4.35%)</title><rect x="109" y="148" width="52" height="15" fill="rgb(215,71,30)"/><text x="112.00" y="158.50">merge..</text></g><g><title>merge (pandas/core/reshape/merge.py:48) (1,905 samples, 4.16%)</title><rect x="112" y="164" width="49" height="15" fill="rgb(237,169,29)"/><text x="115.00" y="174.50">merg..</text></g><g><title>approximate_dependencies (dfd.py:364) (39 samples, 0.09%)</title><rect x="161" y="132" width="1" height="15" fill="rgb(248,99,37)"/><text x="164.00" y="142.50"></text></g><g><title>__init__ (pandas/core/series.py:240) (39 samples, 0.09%)</title><rect x="163" y="164" width="1" height="15" fill="rgb(212,42,36)"/><text x="166.00" y="174.50"></text></g><g><title>_try_cast (pandas/core/internals/construction.py:688) (78 samples, 0.17%)</title><rect x="167" y="196" width="2" height="15" fill="rgb(212,173,48)"/><text x="170.00" y="206.50"></text></g><g><title>maybe_castable (pandas/core/dtypes/cast.py:843) (67 samples, 0.15%)</title><rect x="167" y="212" width="2" height="15" fill="rgb(252,139,22)"/><text x="170.00" y="222.50"></text></g><g><title>maybe_cast_to_datetime (pandas/core/dtypes/cast.py:1067) (150 samples, 0.33%)</title><rect x="169" y="212" width="4" height="15" fill="rgb(222,34,47)"/><text x="172.00" y="222.50"></text></g><g><title>_try_cast (pandas/core/internals/construction.py:697) (219 samples, 0.48%)</title><rect x="169" y="196" width="6" height="15" fill="rgb(247,87,20)"/><text x="172.00" y="206.50"></text></g><g><title>_try_cast (pandas/core/internals/construction.py:704) (90 samples, 0.20%)</title><rect x="175" y="196" width="2" height="15" fill="rgb(210,138,54)"/><text x="178.00" y="206.50"></text></g><g><title>sanitize_array (pandas/core/internals/construction.py:582) (437 samples, 0.96%)</title><rect x="166" y="180" width="12" height="15" fill="rgb(250,204,38)"/><text x="169.00" y="190.50"></text></g><g><title>sanitize_array (pandas/core/internals/construction.py:674) (149 samples, 0.33%)</title><rect x="178" y="180" width="4" height="15" fill="rgb(232,135,35)"/><text x="181.00" y="190.50"></text></g><g><title>__init__ (pandas/core/series.py:262) (676 samples, 1.48%)</title><rect x="165" y="164" width="17" height="15" fill="rgb(246,171,53)"/><text x="168.00" y="174.50"></text></g><g><title>get_block_type (pandas/core/internals/blocks.py:3060) (61 samples, 0.13%)</title><rect x="185" y="212" width="2" height="15" fill="rgb(219,59,36)"/><text x="188.00" y="222.50"></text></g><g><title>make_block (pandas/core/internals/blocks.py:3088) (157 samples, 0.34%)</title><rect x="183" y="196" width="4" height="15" fill="rgb(227,117,19)"/><text x="186.00" y="206.50"></text></g><g><title>__init__ (pandas/core/internals/managers.py:1481) (220 samples, 0.48%)</title><rect x="183" y="180" width="6" height="15" fill="rgb(212,189,54)"/><text x="186.00" y="190.50"></text></g><g><title>make_block (pandas/core/internals/blocks.py:3095) (47 samples, 0.10%)</title><rect x="187" y="196" width="2" height="15" fill="rgb(248,51,23)"/><text x="190.00" y="206.50"></text></g><g><title>__init__ (pandas/core/series.py:264) (247 samples, 0.54%)</title><rect x="182" y="164" width="7" height="15" fill="rgb(205,32,16)"/><text x="185.00" y="174.50"></text></g><g><title>__init__ (pandas/core/series.py:268) (54 samples, 0.12%)</title><rect x="189" y="164" width="2" height="15" fill="rgb(226,127,19)"/><text x="192.00" y="174.50"></text></g><g><title>iterrows (pandas/core/frame.py:846) (1,105 samples, 2.42%)</title><rect x="163" y="148" width="28" height="15" fill="rgb(230,223,1)"/><text x="166.00" y="158.50">i..</text></g><g><title>approximate_dependencies (dfd.py:368) (1,134 samples, 2.48%)</title><rect x="162" y="132" width="29" height="15" fill="rgb(223,214,41)"/><text x="165.00" y="142.50">ap..</text></g><g><title>__getitem__ (pandas/core/series.py:868) (160 samples, 0.35%)</title><rect x="200" y="148" width="4" height="15" fill="rgb(233,128,39)"/><text x="203.00" y="158.50"></text></g><g><title>get_value (pandas/core/indexes/base.py:4375) (40 samples, 0.09%)</title><rect x="203" y="164" width="1" height="15" fill="rgb(226,170,42)"/><text x="206.00" y="174.50"></text></g><g><title>approximate_dependencies (dfd.py:369) (528 samples, 1.15%)</title><rect x="191" y="132" width="14" height="15" fill="rgb(227,183,26)"/><text x="194.00" y="142.50"></text></g><g><title>__getitem__ (pandas/core/series.py:868) (154 samples, 0.34%)</title><rect x="746" y="148" width="4" height="15" fill="rgb(222,147,18)"/><text x="749.00" y="158.50"></text></g><g><title>get_value (pandas/core/indexes/base.py:4375) (63 samples, 0.14%)</title><rect x="748" y="164" width="2" height="15" fill="rgb(250,171,3)"/><text x="751.00" y="174.50"></text></g><g><title>approximate_dependencies (dfd.py:371) (21,131 samples, 46.19%)</title><rect x="205" y="132" width="545" height="15" fill="rgb(214,95,53)"/><text x="208.00" y="142.50">approximate_dependencies (dfd.py:371)</text></g><g><title>get_value (pandas/core/indexes/base.py:4351) (76 samples, 0.17%)</title><rect x="754" y="164" width="2" height="15" fill="rgb(241,35,5)"/><text x="757.00" y="174.50"></text></g><g><title>_values (pandas/core/series.py:481) (57 samples, 0.12%)</title><rect x="755" y="180" width="1" height="15" fill="rgb(208,229,28)"/><text x="758.00" y="190.50"></text></g><g><title>get_value (pandas/core/indexes/base.py:4369) (107 samples, 0.23%)</title><rect x="757" y="164" width="2" height="15" fill="rgb(213,18,16)"/><text x="760.00" y="174.50"></text></g><g><title>get_values (pandas/core/series.py:494) (77 samples, 0.17%)</title><rect x="757" y="180" width="2" height="15" fill="rgb(234,26,51)"/><text x="760.00" y="190.50"></text></g><g><title>get_values (pandas/core/internals/managers.py:1558) (69 samples, 0.15%)</title><rect x="758" y="196" width="1" height="15" fill="rgb(221,210,33)"/><text x="761.00" y="206.50"></text></g><g><title>_convert_scalar_indexer (pandas/core/indexes/base.py:2856) (65 samples, 0.14%)</title><rect x="761" y="180" width="2" height="15" fill="rgb(234,226,24)"/><text x="764.00" y="190.50"></text></g><g><title>get_value (pandas/core/indexes/base.py:4372) (112 samples, 0.24%)</title><rect x="760" y="164" width="3" height="15" fill="rgb(214,80,7)"/><text x="763.00" y="174.50"></text></g><g><title>__getitem__ (pandas/core/series.py:868) (533 samples, 1.16%)</title><rect x="753" y="148" width="14" height="15" fill="rgb(217,178,14)"/><text x="756.00" y="158.50"></text></g><g><title>get_value (pandas/core/indexes/base.py:4375) (109 samples, 0.24%)</title><rect x="764" y="164" width="3" height="15" fill="rgb(250,126,29)"/><text x="767.00" y="174.50"></text></g><g><title>approximate_dependencies (dfd.py:373) (644 samples, 1.41%)</title><rect x="751" y="132" width="16" height="15" fill="rgb(210,63,8)"/><text x="754.00" y="142.50"></text></g><g><title>approximate_dependencies (dfd.py:375) (4,518 samples, 9.87%)</title><rect x="767" y="132" width="117" height="15" fill="rgb(244,229,21)"/><text x="770.00" y="142.50">approximate_de..</text></g><g><title>__getitem__ (pandas/core/series.py:868) (51 samples, 0.11%)</title><rect x="884" y="148" width="1" height="15" fill="rgb(221,119,6)"/><text x="887.00" y="158.50"></text></g><g><title>approximate_dependencies (dfd.py:376) (63 samples, 0.14%)</title><rect x="884" y="132" width="1" height="15" fill="rgb(205,40,49)"/><text x="887.00" y="142.50"></text></g><g><title>approximate_dependencies (dfd.py:377) (4,191 samples, 9.16%)</title><rect x="885" y="132" width="109" height="15" fill="rgb(236,97,44)"/><text x="888.00" y="142.50">approximate_d..</text></g><g><title>__getitem__ (pandas/core/frame.py:2898) (81 samples, 0.18%)</title><rect x="996" y="148" width="2" height="15" fill="rgb(252,22,34)"/><text x="999.00" y="158.50"></text></g><g><title>is_bool_dtype (pandas/core/dtypes/common.py:1636) (43 samples, 0.09%)</title><rect x="1002" y="180" width="1" height="15" fill="rgb(234,120,45)"/><text x="1005.00" y="190.50"></text></g><g><title>is_bool_indexer (pandas/core/common.py:127) (105 samples, 0.23%)</title><rect x="1001" y="164" width="2" height="15" fill="rgb(228,152,4)"/><text x="1004.00" y="174.50"></text></g><g><title>__getitem__ (pandas/core/frame.py:2917) (180 samples, 0.39%)</title><rect x="999" y="148" width="5" height="15" fill="rgb(212,42,53)"/><text x="1002.00" y="158.50"></text></g><g><title>is_sparse (pandas/core/dtypes/common.py:216) (56 samples, 0.12%)</title><rect x="1006" y="196" width="1" height="15" fill="rgb(247,130,53)"/><text x="1009.00" y="206.50"></text></g><g><title>check_bool_indexer (pandas/core/indexing.py:2490) (64 samples, 0.14%)</title><rect x="1006" y="180" width="1" height="15" fill="rgb(205,164,21)"/><text x="1009.00" y="190.50"></text></g><g><title>_getitem_bool_array (pandas/core/frame.py:2967) (121 samples, 0.26%)</title><rect x="1005" y="164" width="3" height="15" fill="rgb(216,63,40)"/><text x="1008.00" y="174.50"></text></g><g><title>check_bool_indexer (pandas/core/indexing.py:2496) (39 samples, 0.09%)</title><rect x="1007" y="180" width="1" height="15" fill="rgb(212,93,3)"/><text x="1010.00" y="190.50"></text></g><g><title>_getitem_bool_array (pandas/core/frame.py:2968) (995 samples, 2.17%)</title><rect x="1008" y="164" width="26" height="15" fill="rgb(225,4,17)"/><text x="1011.00" y="174.50">_..</text></g><g><title>_protect_consolidate (pandas/core/generic.py:5127) (50 samples, 0.11%)</title><rect x="1035" y="212" width="2" height="15" fill="rgb(205,48,15)"/><text x="1038.00" y="222.50"></text></g><g><title>f (pandas/core/generic.py:5136) (47 samples, 0.10%)</title><rect x="1036" y="228" width="1" height="15" fill="rgb(252,57,36)"/><text x="1039.00" y="238.50"></text></g><g><title>_take (pandas/core/generic.py:3355) (104 samples, 0.23%)</title><rect x="1034" y="180" width="3" height="15" fill="rgb(230,138,36)"/><text x="1037.00" y="190.50"></text></g><g><title>_consolidate_inplace (pandas/core/generic.py:5138) (77 samples, 0.17%)</title><rect x="1035" y="196" width="2" height="15" fill="rgb(213,18,51)"/><text x="1038.00" y="206.50"></text></g><g><title>_take (pandas/core/generic.py:3358) (41 samples, 0.09%)</title><rect x="1037" y="180" width="1" height="15" fill="rgb(227,35,4)"/><text x="1040.00" y="190.50"></text></g><g><title>take (pandas/core/internals/managers.py:1337) (46 samples, 0.10%)</title><rect x="1039" y="196" width="1" height="15" fill="rgb(212,190,37)"/><text x="1042.00" y="206.50"></text></g><g><title>asanyarray (numpy/core/numeric.py:591) (40 samples, 0.09%)</title><rect x="1039" y="212" width="1" height="15" fill="rgb(250,84,32)"/><text x="1042.00" y="222.50"></text></g><g><title>take (pandas/core/internals/managers.py:1339) (60 samples, 0.13%)</title><rect x="1040" y="196" width="1" height="15" fill="rgb(222,155,5)"/><text x="1043.00" y="206.50"></text></g><g><title>shape (pandas/core/internals/managers.py:141) (49 samples, 0.11%)</title><rect x="1040" y="212" width="1" height="15" fill="rgb(220,81,8)"/><text x="1043.00" y="222.50"></text></g><g><title>maybe_convert_indices (pandas/core/indexing.py:2608) (52 samples, 0.11%)</title><rect x="1042" y="212" width="1" height="15" fill="rgb(208,24,40)"/><text x="1045.00" y="222.50"></text></g><g><title>maybe_convert_indices (pandas/core/indexing.py:2609) (90 samples, 0.20%)</title><rect x="1043" y="212" width="2" height="15" fill="rgb(205,67,40)"/><text x="1046.00" y="222.50"></text></g><g><title>_any (numpy/core/_methods.py:43) (70 samples, 0.15%)</title><rect x="1044" y="228" width="1" height="15" fill="rgb(251,189,48)"/><text x="1047.00" y="238.50"></text></g><g><title>maybe_convert_indices (pandas/core/indexing.py:2613) (50 samples, 0.11%)</title><rect x="1045" y="212" width="2" height="15" fill="rgb(206,0,3)"/><text x="1048.00" y="222.50"></text></g><g><title>take (pandas/core/internals/managers.py:1341) (244 samples, 0.53%)</title><rect x="1041" y="196" width="7" height="15" fill="rgb(230,164,30)"/><text x="1044.00" y="206.50"></text></g><g><title>take (pandas/core/internals/managers.py:1344) (57 samples, 0.12%)</title><rect x="1048" y="196" width="1" height="15" fill="rgb(245,195,3)"/><text x="1051.00" y="206.50"></text></g><g><title>take (pandas/core/indexes/base.py:799) (39 samples, 0.09%)</title><rect x="1050" y="212" width="1" height="15" fill="rgb(253,85,38)"/><text x="1053.00" y="222.50"></text></g><g><title>__new__ (pandas/core/indexes/base.py:266) (70 samples, 0.15%)</title><rect x="1053" y="260" width="2" height="15" fill="rgb(214,41,51)"/><text x="1056.00" y="270.50"></text></g><g><title>__new__ (pandas/core/indexes/base.py:285) (48 samples, 0.10%)</title><rect x="1056" y="260" width="2" height="15" fill="rgb(225,143,52)"/><text x="1059.00" y="270.50"></text></g><g><title>is_interval_dtype (pandas/core/dtypes/common.py:569) (45 samples, 0.10%)</title><rect x="1056" y="276" width="2" height="15" fill="rgb(254,33,43)"/><text x="1059.00" y="286.50"></text></g><g><title>is_dtype (pandas/core/dtypes/dtypes.py:991) (39 samples, 0.09%)</title><rect x="1057" y="292" width="1" height="15" fill="rgb(244,152,28)"/><text x="1060.00" y="302.50"></text></g><g><title>__new__ (pandas/core/indexes/base.py:292) (63 samples, 0.14%)</title><rect x="1058" y="260" width="1" height="15" fill="rgb(242,36,50)"/><text x="1061.00" y="270.50"></text></g><g><title>__new__ (pandas/core/indexes/base.py:403) (41 samples, 0.09%)</title><rect x="1063" y="260" width="1" height="15" fill="rgb(252,185,44)"/><text x="1066.00" y="270.50"></text></g><g><title>take (pandas/core/internals/managers.py:1348) (716 samples, 1.56%)</title><rect x="1049" y="196" width="19" height="15" fill="rgb(239,206,19)"/><text x="1052.00" y="206.50"></text></g><g><title>take (pandas/core/indexes/base.py:800) (651 samples, 1.42%)</title><rect x="1051" y="212" width="17" height="15" fill="rgb(242,144,2)"/><text x="1054.00" y="222.50"></text></g><g><title>_shallow_copy (pandas/core/indexes/numeric.py:71) (635 samples, 1.39%)</title><rect x="1051" y="228" width="17" height="15" fill="rgb(210,37,45)"/><text x="1054.00" y="238.50"></text></g><g><title>_shallow_copy_with_infer (pandas/core/indexes/base.py:607) (573 samples, 1.25%)</title><rect x="1053" y="244" width="15" height="15" fill="rgb(252,167,29)"/><text x="1056.00" y="254.50"></text></g><g><title>__new__ (pandas/core/indexes/base.py:404) (138 samples, 0.30%)</title><rect x="1064" y="260" width="4" height="15" fill="rgb(223,7,39)"/><text x="1067.00" y="270.50"></text></g><g><title>__new__ (pandas/core/indexes/numeric.py:58) (81 samples, 0.18%)</title><rect x="1065" y="276" width="3" height="15" fill="rgb(217,120,43)"/><text x="1068.00" y="286.50"></text></g><g><title>take_nd (pandas/core/algorithms.py:1586) (48 samples, 0.10%)</title><rect x="1071" y="260" width="1" height="15" fill="rgb(229,49,33)"/><text x="1074.00" y="270.50"></text></g><g><title>is_datetime64tz_dtype (pandas/core/dtypes/common.py:469) (42 samples, 0.09%)</title><rect x="1071" y="276" width="1" height="15" fill="rgb(223,134,27)"/><text x="1074.00" y="286.50"></text></g><g><title>take_nd (pandas/core/algorithms.py:1588) (74 samples, 0.16%)</title><rect x="1072" y="260" width="2" height="15" fill="rgb(245,202,20)"/><text x="1075.00" y="270.50"></text></g><g><title>is_interval_dtype (pandas/core/dtypes/common.py:569) (65 samples, 0.14%)</title><rect x="1072" y="276" width="2" height="15" fill="rgb(215,143,34)"/><text x="1075.00" y="286.50"></text></g><g><title>is_dtype (pandas/core/dtypes/dtypes.py:991) (54 samples, 0.12%)</title><rect x="1073" y="292" width="1" height="15" fill="rgb(234,33,3)"/><text x="1076.00" y="302.50"></text></g><g><title>is_sparse (pandas/core/dtypes/common.py:216) (46 samples, 0.10%)</title><rect x="1074" y="276" width="1" height="15" fill="rgb(207,206,48)"/><text x="1077.00" y="286.50"></text></g><g><title>take_nd (pandas/core/algorithms.py:1591) (52 samples, 0.11%)</title><rect x="1074" y="260" width="1" height="15" fill="rgb(215,187,39)"/><text x="1077.00" y="270.50"></text></g><g><title>maybe_promote (pandas/core/dtypes/cast.py:316) (48 samples, 0.10%)</title><rect x="1080" y="276" width="2" height="15" fill="rgb(222,198,6)"/><text x="1083.00" y="286.50"></text></g><g><title>is_datetime64tz_dtype (pandas/core/dtypes/common.py:469) (46 samples, 0.10%)</title><rect x="1080" y="292" width="2" height="15" fill="rgb(223,47,49)"/><text x="1083.00" y="302.50"></text></g><g><title>take_nd (pandas/core/algorithms.py:1609) (205 samples, 0.45%)</title><rect x="1077" y="260" width="5" height="15" fill="rgb(252,14,32)"/><text x="1080.00" y="270.50"></text></g><g><title>take_nd (pandas/core/algorithms.py:1616) (41 samples, 0.09%)</title><rect x="1083" y="260" width="1" height="15" fill="rgb(246,52,52)"/><text x="1086.00" y="270.50"></text></g><g><title>take_nd (pandas/core/algorithms.py:1651) (41 samples, 0.09%)</title><rect x="1086" y="260" width="1" height="15" fill="rgb(247,76,48)"/><text x="1089.00" y="270.50"></text></g><g><title>issubdtype (numpy/core/numerictypes.py:392) (50 samples, 0.11%)</title><rect x="1092" y="308" width="1" height="15" fill="rgb(228,182,2)"/><text x="1095.00" y="318.50"></text></g><g><title>_name_get (numpy/core/_dtype.py:334) (85 samples, 0.19%)</title><rect x="1091" y="292" width="3" height="15" fill="rgb(225,78,52)"/><text x="1094.00" y="302.50"></text></g><g><title>_get_take_nd_function (pandas/core/algorithms.py:1419) (246 samples, 0.54%)</title><rect x="1088" y="276" width="6" height="15" fill="rgb(238,157,16)"/><text x="1091.00" y="286.50"></text></g><g><title>take_nd (pandas/core/algorithms.py:1654) (286 samples, 0.63%)</title><rect x="1087" y="260" width="8" height="15" fill="rgb(224,98,20)"/><text x="1090.00" y="270.50"></text></g><g><title>take_nd (pandas/core/internals/blocks.py:1238) (1,137 samples, 2.49%)</title><rect x="1070" y="244" width="29" height="15" fill="rgb(253,205,54)"/><text x="1073.00" y="254.50">ta..</text></g><g><title>take_nd (pandas/core/algorithms.py:1655) (174 samples, 0.38%)</title><rect x="1095" y="260" width="4" height="15" fill="rgb(240,1,36)"/><text x="1098.00" y="270.50"></text></g><g><title>take_nd (pandas/core/internals/blocks.py:1250) (39 samples, 0.09%)</title><rect x="1100" y="244" width="1" height="15" fill="rgb(250,158,8)"/><text x="1103.00" y="254.50"></text></g><g><title>reindex_indexer (pandas/core/internals/managers.py:1235) (1,379 samples, 3.01%)</title><rect x="1068" y="212" width="36" height="15" fill="rgb(236,211,2)"/><text x="1071.00" y="222.50">rei..</text></g><g><title>&lt;listcomp&gt; (pandas/core/internals/managers.py:1235) (1,373 samples, 3.00%)</title><rect x="1068" y="228" width="36" height="15" fill="rgb(213,162,49)"/><text x="1071.00" y="238.50">&lt;li..</text></g><g><title>take_nd (pandas/core/internals/blocks.py:1253) (127 samples, 0.28%)</title><rect x="1101" y="244" width="3" height="15" fill="rgb(209,220,46)"/><text x="1104.00" y="254.50"></text></g><g><title>make_block_same_class (pandas/core/internals/blocks.py:235) (110 samples, 0.24%)</title><rect x="1101" y="260" width="3" height="15" fill="rgb(245,69,41)"/><text x="1104.00" y="270.50"></text></g><g><title>make_block (pandas/core/internals/blocks.py:3095) (95 samples, 0.21%)</title><rect x="1101" y="276" width="3" height="15" fill="rgb(229,8,47)"/><text x="1104.00" y="286.50"></text></g><g><title>__init__ (pandas/core/internals/managers.py:114) (89 samples, 0.19%)</title><rect x="1104" y="228" width="3" height="15" fill="rgb(223,91,4)"/><text x="1107.00" y="238.50"></text></g><g><title>_consolidate_check (pandas/core/internals/managers.py:600) (209 samples, 0.46%)</title><rect x="1107" y="244" width="5" height="15" fill="rgb(228,157,8)"/><text x="1110.00" y="254.50"></text></g><g><title>&lt;listcomp&gt; (pandas/core/internals/managers.py:600) (202 samples, 0.44%)</title><rect x="1107" y="260" width="5" height="15" fill="rgb(207,166,23)"/><text x="1110.00" y="270.50"></text></g><g><title>ftype (pandas/core/internals/blocks.py:318) (181 samples, 0.40%)</title><rect x="1108" y="276" width="4" height="15" fill="rgb(230,224,47)"/><text x="1111.00" y="286.50"></text></g><g><title>__str__ (numpy/core/_dtype.py:54) (84 samples, 0.18%)</title><rect x="1110" y="292" width="2" height="15" fill="rgb(235,215,2)"/><text x="1113.00" y="302.50"></text></g><g><title>__init__ (pandas/core/internals/managers.py:116) (234 samples, 0.51%)</title><rect x="1107" y="228" width="6" height="15" fill="rgb(211,27,30)"/><text x="1110.00" y="238.50"></text></g><g><title>_rebuild_blknos_and_blklocs (pandas/core/internals/managers.py:190) (49 samples, 0.11%)</title><rect x="1113" y="244" width="1" height="15" fill="rgb(245,37,17)"/><text x="1116.00" y="254.50"></text></g><g><title>_rebuild_blknos_and_blklocs (pandas/core/internals/managers.py:198) (63 samples, 0.14%)</title><rect x="1116" y="244" width="2" height="15" fill="rgb(214,2,10)"/><text x="1119.00" y="254.50"></text></g><g><title>_rebuild_blknos_and_blklocs (pandas/core/internals/managers.py:200) (60 samples, 0.13%)</title><rect x="1118" y="244" width="2" height="15" fill="rgb(240,180,28)"/><text x="1121.00" y="254.50"></text></g><g><title>__init__ (pandas/core/internals/managers.py:118) (263 samples, 0.57%)</title><rect x="1113" y="228" width="7" height="15" fill="rgb(206,161,24)"/><text x="1116.00" y="238.50"></text></g><g><title>_take (pandas/core/generic.py:3359) (3,190 samples, 6.97%)</title><rect x="1038" y="180" width="82" height="15" fill="rgb(247,217,52)"/><text x="1041.00" y="190.50">_take (pa..</text></g><g><title>take (pandas/core/internals/managers.py:1350) (2,045 samples, 4.47%)</title><rect x="1068" y="196" width="52" height="15" fill="rgb(237,147,35)"/><text x="1071.00" y="206.50">take ..</text></g><g><title>reindex_indexer (pandas/core/internals/managers.py:1239) (632 samples, 1.38%)</title><rect x="1104" y="212" width="16" height="15" fill="rgb(240,90,33)"/><text x="1107.00" y="222.50"></text></g><g><title>_take (pandas/core/generic.py:3360) (104 samples, 0.23%)</title><rect x="1120" y="180" width="3" height="15" fill="rgb(223,105,16)"/><text x="1123.00" y="190.50"></text></g><g><title>equals (pandas/core/indexes/base.py:4061) (57 samples, 0.12%)</title><rect x="1124" y="196" width="2" height="15" fill="rgb(216,187,7)"/><text x="1127.00" y="206.50"></text></g><g><title>is_object_dtype (pandas/core/dtypes/common.py:157) (53 samples, 0.12%)</title><rect x="1124" y="212" width="2" height="15" fill="rgb(214,72,15)"/><text x="1127.00" y="222.50"></text></g><g><title>_take (pandas/core/generic.py:3364) (172 samples, 0.38%)</title><rect x="1123" y="180" width="4" height="15" fill="rgb(225,24,49)"/><text x="1126.00" y="190.50"></text></g><g><title>approximate_dependencies (dfd.py:379) (5,218 samples, 11.40%)</title><rect x="994" y="132" width="134" height="15" fill="rgb(253,180,16)"/><text x="997.00" y="142.50">approximate_depe..</text></g><g><title>__getitem__ (pandas/core/frame.py:2918) (4,822 samples, 10.54%)</title><rect x="1004" y="148" width="124" height="15" fill="rgb(244,114,26)"/><text x="1007.00" y="158.50">__getitem__ (pa..</text></g><g><title>_getitem_bool_array (pandas/core/frame.py:2969) (3,657 samples, 7.99%)</title><rect x="1034" y="164" width="94" height="15" fill="rgb(227,6,25)"/><text x="1037.00" y="174.50">_getitem_bo..</text></g><g><title>get (pandas/core/internals/managers.py:941) (44 samples, 0.10%)</title><rect x="1132" y="180" width="1" height="15" fill="rgb(205,189,46)"/><text x="1135.00" y="190.50"></text></g><g><title>iget (pandas/core/internals/managers.py:978) (64 samples, 0.14%)</title><rect x="1134" y="196" width="2" height="15" fill="rgb(233,192,8)"/><text x="1137.00" y="206.50"></text></g><g><title>make_block_same_class (pandas/core/internals/blocks.py:235) (59 samples, 0.13%)</title><rect x="1134" y="212" width="2" height="15" fill="rgb(211,145,24)"/><text x="1137.00" y="222.50"></text></g><g><title>make_block (pandas/core/internals/blocks.py:3095) (53 samples, 0.12%)</title><rect x="1134" y="228" width="2" height="15" fill="rgb(213,42,38)"/><text x="1137.00" y="238.50"></text></g><g><title>_get_item_cache (pandas/core/generic.py:3061) (208 samples, 0.45%)</title><rect x="1131" y="164" width="5" height="15" fill="rgb(254,145,37)"/><text x="1134.00" y="174.50"></text></g><g><title>get (pandas/core/internals/managers.py:952) (129 samples, 0.28%)</title><rect x="1133" y="180" width="3" height="15" fill="rgb(208,43,4)"/><text x="1136.00" y="190.50"></text></g><g><title>_box_item_values (pandas/core/frame.py:3343) (68 samples, 0.15%)</title><rect x="1136" y="180" width="2" height="15" fill="rgb(212,110,18)"/><text x="1139.00" y="190.50"></text></g><g><title>__init__ (pandas/core/series.py:268) (85 samples, 0.19%)</title><rect x="1139" y="212" width="2" height="15" fill="rgb(215,200,34)"/><text x="1142.00" y="222.50"></text></g><g><title>_get_item_cache (pandas/core/generic.py:3062) (236 samples, 0.52%)</title><rect x="1136" y="164" width="6" height="15" fill="rgb(215,50,49)"/><text x="1139.00" y="174.50"></text></g><g><title>_box_item_values (pandas/core/frame.py:3347) (162 samples, 0.35%)</title><rect x="1138" y="180" width="4" height="15" fill="rgb(233,213,52)"/><text x="1141.00" y="190.50"></text></g><g><title>_box_col_values (pandas/core/frame.py:3354) (155 samples, 0.34%)</title><rect x="1138" y="196" width="4" height="15" fill="rgb(215,79,51)"/><text x="1141.00" y="206.50"></text></g><g><title>__getitem__ (pandas/core/frame.py:2901) (485 samples, 1.06%)</title><rect x="1130" y="148" width="13" height="15" fill="rgb(233,6,25)"/><text x="1133.00" y="158.50"></text></g><g><title>to_numpy (pandas/core/base.py:951) (56 samples, 0.12%)</title><rect x="1143" y="148" width="1" height="15" fill="rgb(212,224,4)"/><text x="1146.00" y="158.50"></text></g><g><title>_unique1d (numpy/lib/arraysetops.py:312) (127 samples, 0.28%)</title><rect x="1147" y="164" width="3" height="15" fill="rgb(234,197,40)"/><text x="1150.00" y="174.50"></text></g><g><title>_unique1d (numpy/lib/arraysetops.py:316) (43 samples, 0.09%)</title><rect x="1151" y="164" width="1" height="15" fill="rgb(235,204,43)"/><text x="1154.00" y="174.50"></text></g><g><title>_unique1d (numpy/lib/arraysetops.py:327) (107 samples, 0.23%)</title><rect x="1152" y="164" width="3" height="15" fill="rgb(221,42,2)"/><text x="1155.00" y="174.50"></text></g><g><title>unique (numpy/lib/arraysetops.py:264) (507 samples, 1.11%)</title><rect x="1146" y="148" width="13" height="15" fill="rgb(209,178,15)"/><text x="1149.00" y="158.50"></text></g><g><title>_unique1d (numpy/lib/arraysetops.py:328) (136 samples, 0.30%)</title><rect x="1155" y="164" width="4" height="15" fill="rgb(231,41,45)"/><text x="1158.00" y="174.50"></text></g><g><title>approximate_dependencies (dfd.py:380) (1,191 samples, 2.60%)</title><rect x="1128" y="132" width="31" height="15" fill="rgb(253,218,2)"/><text x="1131.00" y="142.50">ap..</text></g><g><title>_amax (numpy/core/_methods.py:28) (44 samples, 0.10%)</title><rect x="1159" y="148" width="2" height="15" fill="rgb(208,53,48)"/><text x="1162.00" y="158.50"></text></g><g><title>approximate_dependencies (dfd.py:381) (123 samples, 0.27%)</title><rect x="1159" y="132" width="3" height="15" fill="rgb(245,227,3)"/><text x="1162.00" y="142.50"></text></g><g><title>_sum (numpy/core/_methods.py:36) (58 samples, 0.13%)</title><rect x="1161" y="148" width="1" height="15" fill="rgb(228,19,29)"/><text x="1164.00" y="158.50"></text></g><g><title>find_LHSs (dfd.py:106) (44,654 samples, 97.60%)</title><rect x="12" y="100" width="1151" height="15" fill="rgb(209,121,19)"/><text x="15.00" y="110.50">find_LHSs (dfd.py:106)</text></g><g><title>compute_partitions (dfd.py:323) (44,654 samples, 97.60%)</title><rect x="12" y="116" width="1151" height="15" fill="rgb(212,41,17)"/><text x="15.00" y="126.50">compute_partitions (dfd.py:323)</text></g><g><title>approximate_dependencies (dfd.py:382) (54 samples, 0.12%)</title><rect x="1162" y="132" width="1" height="15" fill="rgb(205,122,8)"/><text x="1165.00" y="142.50"></text></g><g><title>&lt;module&gt; (pyspy.py:10) (44,753 samples, 97.82%)</title><rect x="10" y="52" width="1154" height="15" fill="rgb(220,16,54)"/><text x="13.00" y="62.50">&lt;module&gt; (pyspy.py:10)</text></g><g><title>find_dependencies (user_interaction.py:29) (44,753 samples, 97.82%)</title><rect x="10" y="68" width="1154" height="15" fill="rgb(234,18,41)"/><text x="13.00" y="78.50">find_dependencies (user_interaction.py:29)</text></g><g><title>dfd (dfd.py:50) (44,671 samples, 97.64%)</title><rect x="12" y="84" width="1152" height="15" fill="rgb(230,70,11)"/><text x="15.00" y="94.50">dfd (dfd.py:50)</text></g><g><title>read (pandas/io/parsers.py:1139) (804 samples, 1.76%)</title><rect x="1165" y="100" width="21" height="15" fill="rgb(236,186,18)"/><text x="1168.00" y="110.50"></text></g><g><title>read (pandas/io/parsers.py:1995) (804 samples, 1.76%)</title><rect x="1165" y="116" width="21" height="15" fill="rgb(210,38,25)"/><text x="1168.00" y="126.50"></text></g><g><title>&lt;module&gt; (pyspy.py:6) (875 samples, 1.91%)</title><rect x="1165" y="52" width="22" height="15" fill="rgb(213,167,52)"/><text x="1168.00" y="62.50">&lt;..</text></g><g><title>parser_f (pandas/io/parsers.py:702) (875 samples, 1.91%)</title><rect x="1165" y="68" width="22" height="15" fill="rgb(217,128,26)"/><text x="1168.00" y="78.50">p..</text></g><g><title>_read (pandas/io/parsers.py:435) (875 samples, 1.91%)</title><rect x="1165" y="84" width="22" height="15" fill="rgb(231,220,40)"/><text x="1168.00" y="94.50">_..</text></g><g><title>read (pandas/io/parsers.py:1154) (61 samples, 0.13%)</title><rect x="1186" y="100" width="1" height="15" fill="rgb(210,223,2)"/><text x="1189.00" y="110.50"></text></g><g><title>__init__ (pandas/core/frame.py:392) (61 samples, 0.13%)</title><rect x="1186" y="116" width="1" height="15" fill="rgb(212,73,9)"/><text x="1189.00" y="126.50"></text></g><g><title>init_dict (pandas/core/internals/construction.py:212) (61 samples, 0.13%)</title><rect x="1186" y="132" width="1" height="15" fill="rgb(252,228,29)"/><text x="1189.00" y="142.50"></text></g><g><title>arrays_to_mgr (pandas/core/internals/construction.py:61) (41 samples, 0.09%)</title><rect x="1186" y="148" width="1" height="15" fill="rgb(208,135,30)"/><text x="1189.00" y="158.50"></text></g><g><title>create_block_manager_from_arrays (pandas/core/internals/managers.py:1666) (41 samples, 0.09%)</title><rect x="1186" y="164" width="1" height="15" fill="rgb(212,172,51)"/><text x="1189.00" y="174.50"></text></g><g><title>_drop_axis (pandas/core/generic.py:3812) (47 samples, 0.10%)</title><rect x="1188" y="100" width="1" height="15" fill="rgb(237,21,27)"/><text x="1191.00" y="110.50"></text></g><g><title>&lt;module&gt; (pyspy.py:8) (51 samples, 0.11%)</title><rect x="1188" y="52" width="1" height="15" fill="rgb(210,94,19)"/><text x="1191.00" y="62.50"></text></g><g><title>drop (pandas/core/frame.py:3940) (51 samples, 0.11%)</title><rect x="1188" y="68" width="1" height="15" fill="rgb(232,113,53)"/><text x="1191.00" y="78.50"></text></g><g><title>drop (pandas/core/generic.py:3780) (51 samples, 0.11%)</title><rect x="1188" y="84" width="1" height="15" fill="rgb(229,154,32)"/><text x="1191.00" y="94.50"></text></g><g><title>all (45,752 samples, 100%)</title><rect x="10" y="36" width="1180" height="15" fill="rgb(209,40,10)"/><text x="13.00" y="46.50"></text></g></g></svg>